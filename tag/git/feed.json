{
    "version": "https://jsonfeed.org/version/1",
    "title": "雪漫城的风宅 • All posts by \"git\" tag",
    "description": "この世界は好都合に未完成 だから知りたいんだ —— チ。-地球の運動について-",
    "home_page_url": "https://nightingalewk.cn",
    "items": [
        {
            "id": "https://nightingalewk.cn/2025/06/26/75.%20%E5%A6%82%E4%BD%95%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E7%8B%AC%E7%AB%8B%E7%9A%84%20Git%20%E4%BB%93%E5%BA%93%EF%BC%88Monorepo%20%E5%AE%9E%E8%B7%B5%EF%BC%89/",
            "url": "https://nightingalewk.cn/2025/06/26/75.%20%E5%A6%82%E4%BD%95%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E7%8B%AC%E7%AB%8B%E7%9A%84%20Git%20%E4%BB%93%E5%BA%93%EF%BC%88Monorepo%20%E5%AE%9E%E8%B7%B5%EF%BC%89/",
            "title": "如何合并两个独立的 Git 仓库（Monorepo 实践）",
            "date_published": "2025-06-26T02:00:00.000Z",
            "content_html": "<p>本文是一份将两个完全独立、无关联历史的 Git 仓库合并到一个新仓库（Monorepo）的完整操作指南。我们将把每个旧仓库的内容及其完整提交历史，迁移到新仓库的不同子目录中。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"核心思路\"><a href=\"#核心思路\" class=\"headerlink\" title=\"核心思路\"></a>核心思路</h2><p>我们的目标是创建一个全新的仓库 <code>sushang-combined</code>，并将 <code>sushang-v1</code> 和 <code>sushang-v2</code> 两个仓库的所有内容和历史记录，分别完整地移入 <code>sushang-combined</code> 下的 <code>sushang-v1/</code> 和 <code>sushang-v2/</code> 子目录中。</p>\n<h2 id=\"第一阶段：环境准备\"><a href=\"#第一阶段：环境准备\" class=\"headerlink\" title=\"第一阶段：环境准备\"></a>第一阶段：环境准备</h2><p>首先，创建工作区，并克隆所有需要的仓库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 创建一个专门的工作目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> git-merge-project &amp;&amp; <span class=\"built_in\">cd</span> git-merge-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 克隆你的两个源仓库 (请替换为你的实际URL)</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> &lt;URL_for_sushang-v1&gt;</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> &lt;URL_for_sushang-v2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 创建并初始化最终要合并到的目标仓库</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> sushang-combined</span><br><span class=\"line\"><span class=\"built_in\">cd</span> sushang-combined</span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二阶段：重构源仓库\"><a href=\"#第二阶段：重构源仓库\" class=\"headerlink\" title=\"第二阶段：重构源仓库\"></a>第二阶段：重构源仓库</h2><p>此阶段是关键。我们需要在每个源仓库中，将所有文件移入一个与仓库同名的子目录。<strong>这个过程需要对 <code>sushang-v1</code> 和 <code>sushang-v2</code> 分别执行一次。</strong></p>\n<p>下面以 <code>sushang-v1</code> 为例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 进入 sushang-v1 的本地克隆目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../sushang-v1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 创建子目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> sushang-v1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 将所有文件和目录移动到新子目录中</span></span><br><span class=\"line\"><span class=\"comment\"># 使用 git mv 至关重要，它能让 Git 追踪文件移动，保留历史记录！</span></span><br><span class=\"line\"><span class=\"comment\"># -k 标志会忽略移动过程中可能出现的无关紧要的错误</span></span><br><span class=\"line\">git <span class=\"built_in\">mv</span> -k * sushang-v1/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 单独处理以点开头的隐藏文件（如 .gitignore, .github 等）</span></span><br><span class=\"line\">git <span class=\"built_in\">mv</span> .gitignore sushang-v1/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 提交这次结构调整</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;chore: Restructure repository for monorepo merge&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>请返回上一级目录，对 <code>sushang-v2</code> 仓库重复上述 1-5 步。</strong></p>\n<h2 id=\"第三阶段：执行合并\"><a href=\"#第三阶段：执行合并\" class=\"headerlink\" title=\"第三阶段：执行合并\"></a>第三阶段：执行合并</h2><p>现在，所有准备工作就绪，可以开始真正的合并操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 返回合并目标仓库</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../sushang-combined</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 合并 sushang-v1</span></span><br><span class=\"line\"><span class=\"comment\">#    将本地重构后的 sushang-v1 仓库添加为名为 v1 的远程源</span></span><br><span class=\"line\">git remote add v1 ../sushang-v1</span><br><span class=\"line\"><span class=\"comment\">#    从 v1 拉取所有历史数据</span></span><br><span class=\"line\">git fetch v1</span><br><span class=\"line\"><span class=\"comment\">#    合并 v1 的主分支，--allow-unrelated-histories 是关键！</span></span><br><span class=\"line\">git merge v1/main --allow-unrelated-histories -m <span class=\"string\">&quot;feat: Merge sushang-v1 history&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 合并 sushang-v2</span></span><br><span class=\"line\"><span class=\"comment\">#    以同样的方式添加并合并 v2</span></span><br><span class=\"line\">git remote add v2 ../sushang-v2</span><br><span class=\"line\">git fetch v2</span><br><span class=\"line\">git merge v2/main --allow-unrelated-histories -m <span class=\"string\">&quot;feat: Merge sushang-v2 history&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 验证结果</span></span><br><span class=\"line\"><span class=\"comment\">#    执行 ls，应能看到 sushang-v1 和 sushang-v2 两个目录</span></span><br><span class=\"line\"><span class=\"comment\">#    执行 git log --graph --oneline --all 查看合并后的历史图谱</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -la</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第四阶段：发布到-GitHub\"><a href=\"#第四阶段：发布到-GitHub\" class=\"headerlink\" title=\"第四阶段：发布到 GitHub\"></a>第四阶段：发布到 GitHub</h2><p>将本地合并好的新仓库推送到远程。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 在 GitHub 上创建一个新的、空的仓库，例如 sushang-combined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 在本地 sushang-combined 目录中，关联到你刚创建的远程仓库</span></span><br><span class=\"line\">git remote add origin &lt;URL_for_new_github_repo&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 将本地的完整历史推送到 GitHub</span></span><br><span class=\"line\"><span class=\"comment\">#    -u 选项会建立本地 main 分支与远程 origin/main 分支的追踪关系</span></span><br><span class=\"line\">git push -u origin main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. (可选) 清理本地的临时远程源</span></span><br><span class=\"line\">git remote <span class=\"built_in\">rm</span> v1</span><br><span class=\"line\">git remote <span class=\"built_in\">rm</span> v2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第五阶段：归档旧仓库\"><a href=\"#第五阶段：归档旧仓库\" class=\"headerlink\" title=\"第五阶段：归档旧仓库\"></a>第五阶段：归档旧仓库</h2><p>为了避免混淆，并完整保留 Issues、Pull Requests 等宝贵信息，最佳实践是<strong>归档</strong>（Archive）而不是删除旧仓库。</p>\n<p>对 <code>sushang-v1</code> 和 <code>sushang-v2</code> 在 GitHub 上的仓库，分别执行以下操作：</p>\n<ol>\n<li><strong>更新仓库描述</strong>：在仓库主页点击 “Edit”，修改描述，明确指出项目已归档，并提供新仓库 <code>sushang-combined</code> 的链接。例如：“**[ARCHIVED]** Development continues at [link to sushang-combined].”</li>\n<li><strong>更新 README</strong>：在 <code>README.md</code> 文件顶部添加醒目通知，引导访问者前往新仓库。</li>\n<li><strong>执行归档</strong>：<ul>\n<li>进入仓库的 <code>Settings</code> 页面。</li>\n<li>滚动到底部的 <code>Danger Zone</code>（危险区域）。</li>\n<li>点击 <code>Archive this repository</code>（归档此仓库）。</li>\n<li>按提示输入仓库名称进行确认。</li>\n</ul>\n</li>\n</ol>\n<p>至此，您已成功将两个独立仓库完整地合并为一个，并完成了所有后续整理工作。</p>\n",
            "tags": [
                "Git",
                "Monorepo",
                "DevOps"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2025/06/26/74.%20%E4%BF%AE%E6%94%B9%E7%BA%BF%E4%B8%8A%20git%20%E4%BB%93%E5%BA%93%20master%20%E4%B8%BB%E5%88%86%E6%94%AF%E4%B8%BA%20main/",
            "url": "https://nightingalewk.cn/2025/06/26/74.%20%E4%BF%AE%E6%94%B9%E7%BA%BF%E4%B8%8A%20git%20%E4%BB%93%E5%BA%93%20master%20%E4%B8%BB%E5%88%86%E6%94%AF%E4%B8%BA%20main/",
            "title": "如何将 Git 仓库的默认分支从 master 修改为 main",
            "date_published": "2025-06-26T01:15:00.000Z",
            "content_html": "<p>随着技术社区对包容性语言的倡导，将 Git 仓库的默认分支从 <code>master</code> 修改为 <code>main</code> 已成为一种普遍的推荐做法。本文将提供一个详细、安全的操作指南，帮助你顺利完成这一迁移。</p>\n<p>整个过程主要分为四个核心步骤，外加一个针对团队协作的同步步骤。我们将依次进行操作，确保万无一失。</p>\n<h2 id=\"1-重命名本地分支\"><a href=\"#1-重命名本地分支\" class=\"headerlink\" title=\"1. 重命名本地分支\"></a>1. 重命名本地分支</h2><p>首先，我们需要在本地的 Git 仓库中进行操作。打开你的项目终端或命令行工具。</p>\n<ol>\n<li><p><strong>切换到 <code>master</code> 分支并拉取最新代码</strong>，确保本地与远程是同步的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用 <code>-m</code> (<code>--move</code>) 参数重命名分支</strong>。这将把本地的 <code>master</code> 分支直接更名为 <code>main</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m master main</span><br></pre></td></tr></table></figure>\n<p>执行后，你的本地主分支名就修改完成了。</p>\n</li>\n</ol>\n<h2 id=\"2-推送新分支到远程仓库\"><a href=\"#2-推送新分支到远程仓库\" class=\"headerlink\" title=\"2. 推送新分支到远程仓库\"></a>2. 推送新分支到远程仓库</h2><p>本地分支改名后，需要将这个新的 <code>main</code> 分支推送到你的远程仓库（如 GitHub 或 GitLab），并建立跟踪关系。</p>\n<ol>\n<li><strong>推送 <code>main</code> 分支</strong>。使用 <code>-u</code> (<code>--set-upstream</code>) 参数，这样 Git 会记住本地 <code>main</code> 分支对应远程的 <code>main</code> 分支，方便以后直接使用 <code>git push</code> 和 <code>git pull</code>。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n此时，你的远程仓库会同时存在 <code>master</code> 和 <code>main</code> 两个分支，它们的内容完全相同。</li>\n</ol>\n<h2 id=\"3-修改平台的默认分支（关键步骤）\"><a href=\"#3-修改平台的默认分支（关键步骤）\" class=\"headerlink\" title=\"3. 修改平台的默认分支（关键步骤）\"></a>3. 修改平台的默认分支（关键步骤）</h2><p>这是整个流程中最关键的一步，必须在代码托管平台的网页上完成。**只有修改了默认分支，新的克隆 (clone) 和拉取请求 (Pull Request) 才会默认指向 <code>main</code>**。</p>\n<p>以 <strong>GitHub</strong> 为例：</p>\n<ol>\n<li>进入你的仓库主页，点击右上角的 <strong>Settings</strong> (设置)。</li>\n<li>在左侧菜单栏找到并点击 <strong>Branches</strong> (分支)。</li>\n<li>在 “Default branch” (默认分支) 区域，点击切换按钮（通常是两个箭头图标）。</li>\n<li>在弹出的窗口中，将默认分支从 <code>master</code> 选为 <code>main</code>，然后点击 <strong>Update</strong> 确认。</li>\n</ol>\n<p>其他平台（如 GitLab, Gitee）的操作也类似，通常都在仓库的“设置”或“仓库管理”中的“分支”选项里。</p>\n<h2 id=\"4-清理远程的-master-分支\"><a href=\"#4-清理远程的-master-分支\" class=\"headerlink\" title=\"4. 清理远程的 master 分支\"></a>4. 清理远程的 master 分支</h2><p>在确认 <code>main</code> 已成为默认分支，并且所有相关的自动化流程（如 CI&#x2F;CD）都已更新后，你就可以安全地删除远程的 <code>master</code> 分支了，以避免团队成员产生混淆。</p>\n<ol>\n<li><strong>执行删除命令</strong>：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --delete master</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>至此，你的仓库就完全迁移到 <code>main</code> 作为主分支了。</p>\n<h2 id=\"注意事项与协作者指南\"><a href=\"#注意事项与协作者指南\" class=\"headerlink\" title=\"注意事项与协作者指南\"></a>注意事项与协作者指南</h2><p>如果你的项目是多人协作的，请务必通知所有成员，并让他们在自己的本地仓库执行以下命令来同步变更：</p>\n<pre><code class=\"bash\"># 1. 切换到旧的 master 分支\ngit checkout master\n\n# 2. 从远程拉取最新的分支结构信息\ngit fetch origin\n\n# 3. 将本地的 master 也重命名为 main\ngit branch -m master main\n\n# 4. 重新设置本地 main 分支去跟踪远程的 main 分支\ngit branch --set-upstream-to=origin/main main\n\n# 5. (推荐) 清理本地无效的远程跟踪分支\ngit remote prune origin\n</code></pre>\n",
            "tags": [
                "教程",
                "Git",
                "GitHub",
                "版本控制"
            ]
        }
    ]
}