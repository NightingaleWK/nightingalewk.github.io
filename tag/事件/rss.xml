<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>雪漫城的风宅 • Posts by &#34;事件&#34; tag</title>
        <link>https://nightingalewk.cn</link>
        <description>この世界は好都合に未完成 だから知りたいんだ —— チ。-地球の運動について-</description>
        <language>zh-CN</language>
        <pubDate>Thu, 24 Nov 2022 16:17:00 +0800</pubDate>
        <lastBuildDate>Thu, 24 Nov 2022 16:17:00 +0800</lastBuildDate>
        <category>hexo</category>
        <category>迁移</category>
        <category>电脑维修</category>
        <category>主食</category>
        <category>pr</category>
        <category>bilibili</category>
        <category>学习笔记</category>
        <category>汤</category>
        <category>热菜</category>
        <category>甜品</category>
        <category>梦境</category>
        <category>海鲜</category>
        <category>homestead</category>
        <category>代码部署</category>
        <category>oneinstack</category>
        <category>lnmp</category>
        <category>代码更新</category>
        <category>dcat admin</category>
        <category>oh-my-zsh</category>
        <category>debug</category>
        <category>道歉信</category>
        <category>指令</category>
        <category>免密</category>
        <category>vs code</category>
        <category>fileinfo</category>
        <category>PAC 清单</category>
        <category>laravel sail</category>
        <category>定时任务</category>
        <category>gpg</category>
        <category>sshppass</category>
        <category>awk</category>
        <category>net time</category>
        <category>端口查询</category>
        <category>表单验证</category>
        <category>swap</category>
        <category>blade</category>
        <category>事件</category>
        <category>wordpress</category>
        <category>队列</category>
        <category>redis</category>
        <category>特色小吃</category>
        <category>粥</category>
        <category>Cloudreve</category>
        <category>artisan 指令</category>
        <category>故障排除</category>
        <category>Font Awesome</category>
        <category>vite</category>
        <category>linux</category>
        <category>我的世界</category>
        <category>Minecraft</category>
        <category>膝盖中箭之地</category>
        <category>领域</category>
        <category>realms</category>
        <category>公告</category>
        <category>screen</category>
        <category>cursor</category>
        <category>人工智能</category>
        <category>prompt</category>
        <item>
            <guid isPermalink="true">https://nightingalewk.cn/2022/11/24/48.%20laravel%20%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/</guid>
            <title>laravel 事件系统简明示例</title>
            <link>https://nightingalewk.cn/2022/11/24/48.%20laravel%20%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/</link>
            <category>事件</category>
            <pubDate>Thu, 24 Nov 2022 16:17:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;简单对 laravel 事件系统做一些说明&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;laravel 的事件提供了一个简单的观察者实现，能够订阅和监听应用中发生的各种事件。事件类保存在 app&amp;#x2F;Events 目录中，而这些事件的的监听器则被保存在 app&amp;#x2F;Listeners 目录下。这些目录只有当你使用 Artisan 命令来生成事件和监听器时才会被自动创建。&lt;/p&gt;
&lt;p&gt;事件机制是一种很好的应用解耦方式，因为一个事件可以拥有多个互不依赖的监听器。例如，如果你希望每次订单发货时向用户发送一个 Slack 通知。你可以简单地发起一个 OrderShipped 事件，让监听器接收之后转化成一个 Slack 通知，这样你就可以不用把订单的业务代码跟 Slack 通知的代码耦合在一起了。&lt;/p&gt;
&lt;h2 id=&#34;生成一个事件类&#34;&gt;&lt;a href=&#34;#生成一个事件类&#34; class=&#34;headerlink&#34; title=&#34;生成一个事件类&#34;&gt;&lt;/a&gt;生成一个事件类&lt;/h2&gt;&lt;p&gt;比如通过 artisan 命令生成一个 UserLogin 事件：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;php artisan make:event UserLogin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 app&amp;#x2F;Events 中就会自动生成一个 UserLogin.php 文件，内容不多，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;namespace App\Events;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;use Illuminate\Broadcasting\Channel;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;use Illuminate\Queue\SerializesModels;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;use Illuminate\Broadcasting\PrivateChannel;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;use Illuminate\Broadcasting\PresenceChannel;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;use Illuminate\Broadcasting\InteractsWithSockets;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;use Illuminate\Contracts\Broadcasting\ShouldBroadcast;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class UserLogin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    use InteractsWithSockets, SerializesModels;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * Create a new event instance.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * @return void&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function __construct()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * Get the channels the event should broadcast on.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * @return Channel|array&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function broadcastOn()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return new PrivateChannel(&amp;#x27;channel-name&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;定义监听器&#34;&gt;&lt;a href=&#34;#定义监听器&#34; class=&#34;headerlink&#34; title=&#34;定义监听器&#34;&gt;&lt;/a&gt;定义监听器&lt;/h2&gt;&lt;p&gt;一个事件可以被一个或多个监听器监听，也就是观察者模式，我们可以定义多个监听器，当这个事件发生，执行一系列逻辑。&lt;/p&gt;
&lt;p&gt;在 EventServiceProvider 的 $listen 中可以定义事件和监听器，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;protected $listen = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;App\Events\UserLogin&amp;#x27; =&amp;gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#x27;App\Lisenter\DoSomething1&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#x27;App\Lisenter\Dosomething2&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后执行 artisan 命令，就可以自动在 app&amp;#x2F;Lisenter 目录生成监听器。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;php artisan event::generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到 app&amp;#x2F;Lisenter 目录多了 DoSomething1.php 和 DoSomething2.php 两个文件，我们看看其中一个内容：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;namespace App\Lisenter;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;use App\Events\UserLogin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;use Illuminate\Queue\InteractsWithQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;use Illuminate\Contracts\Queue\ShouldQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class DoSomething1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * Create the event listener.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * @return void&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function __construct()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * Handle the event.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * @param  UserLogin  $event&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     * @return void&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public function handle(UserLogin $event)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        info(&amp;#x27;do something1&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在两个监听器的 handle 方法中我们打印一个日志来测试一下，如代码 handle 方法所示。&lt;/p&gt;
&lt;h2 id=&#34;分发和触发事件&#34;&gt;&lt;a href=&#34;#分发和触发事件&#34; class=&#34;headerlink&#34; title=&#34;分发和触发事件&#34;&gt;&lt;/a&gt;分发和触发事件&lt;/h2&gt;&lt;p&gt;我们在某个控制器的方法中来分发事件，也就是触发事件，看监听器是否正常工作。&lt;/p&gt;
&lt;p&gt;就是一句话：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;event(new UserLogin());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们请求这个控制器，观察日志，发现打印了日志：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[2018-06-17 10:04:29] local.INFO: do something1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[2018-06-17 10:04:29] local.INFO: do something2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么这个事件 - 监听机制就正常工作了。&lt;/p&gt;
&lt;h1 id=&#34;队列异步处理&#34;&gt;&lt;a href=&#34;#队列异步处理&#34; class=&#34;headerlink&#34; title=&#34;队列异步处理&#34;&gt;&lt;/a&gt;队列异步处理&lt;/h1&gt;&lt;p&gt;如果某个监听器需要执行的操作比较慢，可以放到消息队列进行异步处理。&lt;/p&gt;
&lt;p&gt;比如把上面的 DoSomething1 改成需要放入队列的，只需要 implements ShoulQueue 接口。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class DoSomething1 implements ShouldQueue&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以指定队列驱动，如下代码。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 任务应该发送到的队列的连接的名称&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * @var string|null&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public $connection = &amp;#x27;redis&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * 任务应该发送到的队列的名称&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; * @var string|null&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public $queue = &amp;#x27;listeners&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们再次执行控制器方法。&lt;/p&gt;
&lt;p&gt;日志里没有打印 do something1，只有 do something2，但是在 redis 队列里发现了一个名为 queues:default 的列表。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&amp;quot;job&amp;quot;:&amp;quot;Illuminate\\Events\\CallQueuedHandler@call&amp;quot;,&amp;quot;data&amp;quot;:&amp;#123;&amp;quot;class&amp;quot;:&amp;quot;App\\Listener\\DoSomething1&amp;quot;,&amp;quot;method&amp;quot;:&amp;quot;handle&amp;quot;,&amp;quot;data&amp;quot;:&amp;quot;a:1:&amp;#123;i:0;O:20:\&amp;quot;App\\Events\\UserLogin\&amp;quot;:1:&amp;#123;s:6:\&amp;quot;socket\&amp;quot;;N;&amp;#125;&amp;#125;&amp;quot;&amp;#125;,&amp;quot;id&amp;quot;:&amp;quot;3D7VDUwueYGtUvsazicWsifwWQxnnLID&amp;quot;,&amp;quot;attempts&amp;quot;:1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个时候需要使用 php artisan queue:work 执行队列任务，才是真正执行 DoSomething1 这个监听器的 handle 方法。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
