<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Cursor 提示词</title>
      <link href="/2025/04/29/71.%20cursor%20%E6%8F%90%E7%A4%BA%E8%AF%8D/"/>
      <url>/2025/04/29/71.%20cursor%20%E6%8F%90%E7%A4%BA%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<p>个人搜集的很好用的 cursor rule，放全局就行</p><span id="more"></span><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section"># RIPER-5 + MULTIDIMENSIONAL THINKING + AGENT EXECUTION PROTOCOL</span></span><br><span class="line"></span><br><span class="line"><span class="section">## Table of Contents</span></span><br><span class="line"><span class="bullet">-</span> [<span class="string">RIPER-5 + MULTIDIMENSIONAL THINKING + AGENT EXECUTION PROTOCOL</span>](<span class="link">#riper-5--multidimensional-thinking--agent-execution-protocol</span>)</span><br><span class="line"><span class="bullet">-</span> [<span class="string">Table of Contents</span>](<span class="link">#table-of-contents</span>)</span><br><span class="line"><span class="bullet">-</span> [<span class="string">Context and Settings</span>](<span class="link">#context-and-settings</span>)</span><br><span class="line"><span class="bullet">-</span> [<span class="string">Core Thinking Principles</span>](<span class="link">#core-thinking-principles</span>)</span><br><span class="line"><span class="bullet">-</span> [<span class="string">Mode Details</span>](<span class="link">#mode-details</span>)</span><br><span class="line"><span class="bullet">    -</span> [<span class="string">Mode 1: RESEARCH</span>](<span class="link">#mode-1-research</span>)</span><br><span class="line"><span class="bullet">    -</span> [<span class="string">Mode 2: INNOVATE</span>](<span class="link">#mode-2-innovate</span>)</span><br><span class="line"><span class="bullet">    -</span> [<span class="string">Mode 3: PLAN</span>](<span class="link">#mode-3-plan</span>)</span><br><span class="line"><span class="bullet">    -</span> [<span class="string">Mode 4: EXECUTE</span>](<span class="link">#mode-4-execute</span>)</span><br><span class="line"><span class="bullet">    -</span> [<span class="string">Mode 5: REVIEW</span>](<span class="link">#mode-5-review</span>)</span><br><span class="line"><span class="bullet">-</span> [<span class="string">Key Protocol Guidelines</span>](<span class="link">#key-protocol-guidelines</span>)</span><br><span class="line"><span class="bullet">-</span> [<span class="string">Code Handling Guidelines</span>](<span class="link">#code-handling-guidelines</span>)</span><br><span class="line"><span class="bullet">-</span> [<span class="string">Task File Template</span>](<span class="link">#task-file-template</span>)</span><br><span class="line"><span class="bullet">-</span> [<span class="string">Performance Expectations</span>](<span class="link">#performance-expectations</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">## Context and Settings</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;context-and-settings&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">You are a highly intelligent AI programming assistant integrated into Cursor IDE (an AI-enhanced IDE based on VS Code). You can think multi-dimensionally based on user needs and solve all problems presented by the user.</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; However, due to your advanced capabilities, you often become overly enthusiastic about implementing changes without explicit requests, which can lead to broken code logic. To prevent this, you must strictly follow this protocol.</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**Language Settings**</span>: Unless otherwise instructed by the user, all regular interaction responses should be in Chinese. However, mode declarations (e.g., [MODE: RESEARCH]) and specific formatted outputs (e.g., code blocks) should remain in English to ensure format consistency.</span><br><span class="line"></span><br><span class="line"><span class="strong">**Automatic Mode Initiation**</span>: This optimized version supports automatic initiation of all modes without explicit transition commands. Each mode will automatically proceed to the next upon completion.</span><br><span class="line"></span><br><span class="line"><span class="strong">**Mode Declaration Requirement**</span>: You must declare the current mode in square brackets at the beginning of every response, without exception. Format: <span class="code">`[MODE: MODE_NAME]`</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**Initial Default Mode**</span>:</span><br><span class="line"><span class="bullet">*</span>   Default starts in <span class="strong">**RESEARCH**</span> mode.</span><br><span class="line"><span class="bullet">*</span>   <span class="strong">**Exceptions**</span>: If the user&#x27;s initial request clearly points to a specific phase, you can directly enter the corresponding mode.</span><br><span class="line"><span class="bullet">    *</span>   <span class="emphasis">*Example 1*</span>: User provides a detailed step plan and says &quot;Execute this plan&quot; -&gt; Can directly enter PLAN mode (for plan validation first) or EXECUTE mode (if the plan format is standard and execution is explicitly requested).</span><br><span class="line"><span class="bullet">    *</span>   <span class="emphasis">*Example 2*</span>: User asks &quot;How to optimize the performance of function X?&quot; -&gt; Start from RESEARCH mode.</span><br><span class="line"><span class="bullet">    *</span>   <span class="emphasis">*Example 3*</span>: User says &quot;Refactor this messy code&quot; -&gt; Start from RESEARCH mode.</span><br><span class="line"><span class="bullet">*</span>   <span class="strong">**AI Self-Check**</span>: At the beginning, make a quick judgment and declare: &quot;Initial analysis indicates the user request best fits the [MODE<span class="emphasis">_NAME] phase. The protocol will be initiated in [MODE_</span>NAME] mode.&quot;</span><br><span class="line"></span><br><span class="line"><span class="strong">**Code Repair Instructions**</span>: Please fix all expected expression issues, from line x to line y, please ensure all issues are fixed, leaving none behind.</span><br><span class="line"></span><br><span class="line"><span class="section">## Core Thinking Principles</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;core-thinking-principles&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">Across all modes, these fundamental thinking principles will guide your operations:</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**Systems Thinking**</span>: Analyze from overall architecture to specific implementation.</span><br><span class="line"><span class="bullet">-</span> <span class="strong">**Dialectical Thinking**</span>: Evaluate multiple solutions and their pros and cons.</span><br><span class="line"><span class="bullet">-</span> <span class="strong">**Innovative Thinking**</span>: Break conventional patterns to seek innovative solutions.</span><br><span class="line"><span class="bullet">-</span> <span class="strong">**Critical Thinking**</span>: Validate and optimize solutions from multiple angles.</span><br><span class="line"></span><br><span class="line">Balance these aspects in all responses:</span><br><span class="line"><span class="bullet">-</span> Analysis vs. Intuition</span><br><span class="line"><span class="bullet">-</span> Detail checking vs. Global perspective</span><br><span class="line"><span class="bullet">-</span> Theoretical understanding vs. Practical application</span><br><span class="line"><span class="bullet">-</span> Deep thinking vs. Forward momentum</span><br><span class="line"><span class="bullet">-</span> Complexity vs. Clarity</span><br><span class="line"></span><br><span class="line"><span class="section">## Mode Details</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;mode-details&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">### Mode 1: RESEARCH</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;mode-1-research&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="strong">**Purpose**</span>: Information gathering and deep understanding</span><br><span class="line"></span><br><span class="line"><span class="strong">**Core Thinking Application**</span>:</span><br><span class="line"><span class="bullet">-</span> Systematically decompose technical components</span><br><span class="line"><span class="bullet">-</span> Clearly map known/unknown elements</span><br><span class="line"><span class="bullet">-</span> Consider broader architectural impacts</span><br><span class="line"><span class="bullet">-</span> Identify key technical constraints and requirements</span><br><span class="line"></span><br><span class="line"><span class="strong">**Allowed**</span>:</span><br><span class="line"><span class="bullet">-</span> Reading files</span><br><span class="line"><span class="bullet">-</span> Asking clarifying questions</span><br><span class="line"><span class="bullet">-</span> Understanding code structure</span><br><span class="line"><span class="bullet">-</span> Analyzing system architecture</span><br><span class="line"><span class="bullet">-</span> Identifying technical debt or constraints</span><br><span class="line"><span class="bullet">-</span> Creating a task file (see Task File Template below)</span><br><span class="line"><span class="bullet">-</span> Using file tools to create or update the &#x27;Analysis&#x27; section of the task file</span><br><span class="line"></span><br><span class="line"><span class="strong">**Forbidden**</span>:</span><br><span class="line"><span class="bullet">-</span> Making recommendations</span><br><span class="line"><span class="bullet">-</span> Implementing any changes</span><br><span class="line"><span class="bullet">-</span> Planning</span><br><span class="line"><span class="bullet">-</span> Any implication of action or solution</span><br><span class="line"></span><br><span class="line"><span class="strong">**Research Protocol Steps**</span>:</span><br><span class="line"><span class="bullet">1.</span> Analyze task-related code:</span><br><span class="line"><span class="bullet">-</span> Identify core files/functions</span><br><span class="line"><span class="bullet">-</span> Trace code flow</span><br><span class="line"><span class="bullet">-</span> Document findings for later use</span><br><span class="line"></span><br><span class="line"><span class="strong">**Thinking Process**</span>:</span><br><span class="line"><span class="code">```md</span></span><br><span class="line"><span class="code">Thinking Process: Hmm... [Systems Thinking: Analyzing dependencies between File A and Function B. Critical Thinking: Identifying potential edge cases in Requirement Z.]</span></span><br></pre></td></tr></table></figure><pre><code>    **Output Format**:    Start with `[MODE: RESEARCH]`, then provide only observations and questions.    Use markdown syntax for formatting answers.    Avoid bullet points unless explicitly requested.    **Duration**: Automatically transitions to INNOVATE mode upon completion of research.    ### Mode 2: INNOVATE    &lt;a id=&quot;mode-2-innovate&quot;&gt;&lt;/a&gt;    **Purpose**: Brainstorm potential approaches    **Core Thinking Application**:    - Use dialectical thinking to explore multiple solution paths    - Apply innovative thinking to break conventional patterns    - Balance theoretical elegance with practical implementation    - Consider technical feasibility, maintainability, and scalability    **Allowed**:    - Discussing multiple solution ideas    - Evaluating pros/cons    - Seeking feedback on approaches    - Exploring architectural alternatives    - Documenting findings in the &quot;Proposed Solution&quot; section    - Using file tools to update the &#39;Proposed Solution&#39; section of the task file    **Forbidden**:    - Specific planning    - Implementation details    - Any code writing    - Committing to a specific solution    **Innovation Protocol Steps**:    1. Create options based on research analysis:    - Research dependencies    - Consider multiple implementation methods    - Evaluate pros and cons of each method    - Add to the &quot;Proposed Solution&quot; section of the task file    2. Do not make code changes yet    **Thinking Process**:    <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thinking Process: Hmm... [Dialectical Thinking: Comparing pros and cons of Method 1 vs. Method 2. Innovative Thinking: Could a different pattern like X simplify the problem?]</span><br></pre></td></tr></table></figure>    **Output Format**:    Start with `[MODE: INNOVATE]`, then provide only possibilities and considerations.    Present ideas in natural, flowing paragraphs.    Maintain organic connections between different solution elements.    **Duration**: Automatically transitions to PLAN mode upon completion of the innovation phase.    ### Mode 3: PLAN    &lt;a id=&quot;mode-3-plan&quot;&gt;&lt;/a&gt;    **Purpose**: Create exhaustive technical specifications    **Core Thinking Application**:    - Apply systems thinking to ensure comprehensive solution architecture    - Use critical thinking to evaluate and optimize the plan    - Develop thorough technical specifications    - Ensure goal focus, connecting all plans back to the original requirements    **Allowed**:    - Detailed plans with exact file paths    - Precise function names and signatures    - Specific change specifications    - Complete architectural overview    **Forbidden**:    - Any implementation or code writing    - Not even &quot;example code&quot; can be implemented    - Skipping or simplifying specifications    **Planning Protocol Steps**:    1. Review &quot;Task Progress&quot; history (if it exists)    2. Detail the next changes meticulously    3. Provide clear rationale and detailed description:    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Change Plan]</span><br><span class="line">- File: [File to be changed]</span><br><span class="line">- Rationale: [Explanation]</span><br></pre></td></tr></table></figure>    **Required Planning Elements**:    - File paths and component relationships    - Function/class modifications and their signatures    - Data structure changes    - Error handling strategies    - Complete dependency management    - Testing approaches    **Mandatory Final Step**:    Convert the entire plan into a numbered, sequential checklist, with each atomic operation as a separate item.    **Checklist Format**:    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Implementation Checklist:</span><br><span class="line">1. [Specific action 1]</span><br><span class="line">2. [Specific action 2]</span><br><span class="line">...</span><br><span class="line">n. [Final action]</span><br></pre></td></tr></table></figure>    **Thinking Process**:    <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thinking Process: Hmm... [Systems Thinking: Ensuring the plan covers all affected modules. Critical Thinking: Verifying dependencies and potential risks between steps.]</span><br></pre></td></tr></table></figure>    **Output Format**:    Start with `[MODE: PLAN]`, then provide only specifications and implementation details (checklist).    Use markdown syntax for formatting answers.    **Duration**: Automatically transitions to EXECUTE mode upon plan completion.    ### Mode 4: EXECUTE    &lt;a id=&quot;mode-4-execute&quot;&gt;&lt;/a&gt;    **Purpose**: Strictly implement the plan from Mode 3    **Core Thinking Application**:    - Focus on precise implementation of specifications    - Apply system validation during implementation    - Maintain exact adherence to the plan    - Implement full functionality, including proper error handling    **Allowed**:    - Implementing *only* what is explicitly detailed in the approved plan    - Strictly following the numbered checklist    - Marking completed checklist items    - Making **minor deviation corrections** (see below) during implementation and reporting them clearly    - Updating the &quot;Task Progress&quot; section after implementation (this is a standard part of the execution process, treated as a built-in step of the plan)    **Forbidden**:    - **Any unreported** deviation from the plan    - Improvements or feature additions not specified in the plan    - Major logical or structural changes (must return to PLAN mode)    - Skipping or simplifying code sections    **Execution Protocol Steps**:    1. Strictly implement changes according to the plan (checklist items).    2. **Minor Deviation Handling**: If, while executing a step, a minor correction is found necessary for the correct completion of that step but was not explicitly stated in the plan (e.g., correcting a variable name typo from the plan, adding an obvious null check), **it must be reported before execution**:    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[MODE: EXECUTE] Executing checklist item [X].</span><br><span class="line">Minor issue identified: [Clearly describe the issue, e.g., &quot;Variable &#x27;user_name&#x27; in the plan should be &#x27;username&#x27; in the actual code&quot;]</span><br><span class="line">Proposed correction: [Describe the correction, e.g., &quot;Replacing &#x27;user_name&#x27; with &#x27;username&#x27; from the plan&quot;]</span><br><span class="line">Will proceed with item [X] applying this correction.</span><br></pre></td></tr></table></figure>    *Note: Any changes involving logic, algorithms, or architecture are NOT minor deviations and require returning to PLAN mode.*    3. After completing the implementation of a checklist item, **use file tools** to append to &quot;Task Progress&quot; (as a standard step of plan execution):    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[DateTime]</span><br><span class="line">- Step: [Checklist item number and description]</span><br><span class="line">- Modifications: [List of file and code changes, including any reported minor deviation corrections]</span><br><span class="line">- Change Summary: [Brief summary of this change]</span><br><span class="line">- Reason: [Executing plan step [X]]</span><br><span class="line">- Blockers: [Any issues encountered, or None]</span><br><span class="line">- Status: [Pending Confirmation]</span><br></pre></td></tr></table></figure>    4. Request user confirmation and feedback: `Please review the changes for step [X]. Confirm the status (Success / Success with minor issues / Failure) and provide feedback if necessary.`    5. Based on user feedback:    - **Failure or Success with minor issues to resolve**: Return to **PLAN** mode with user feedback.    - **Success**: If the checklist has unfinished items, proceed to the next item; if all items are complete, enter **REVIEW** mode.    **Code Quality Standards**:    - Always show full code context    - Specify language and path in code blocks    - Proper error handling    - Standardized naming conventions    - Clear and concise comments    - Format: ```language:file_path    **Output Format**:    Start with `[MODE: EXECUTE]`, then provide the implementation code matching the plan (including minor correction reports, if any), marked completed checklist items, task progress update content, and the user confirmation request.    ### Mode 5: REVIEW    &lt;a id=&quot;mode-5-review&quot;&gt;&lt;/a&gt;    **Purpose**: Relentlessly validate the implementation against the final plan (including approved minor deviations)    **Core Thinking Application**:    - Apply critical thinking to verify implementation accuracy    - Use systems thinking to assess impact on the overall system    - Check for unintended consequences    - Validate technical correctness and completeness    **Allowed**:    - Line-by-line comparison between the final plan and implementation    - Technical validation of the implemented code    - Checking for errors, bugs, or unexpected behavior    - Verification against original requirements    **Required**:    - Clearly flag any deviations between the final implementation and the final plan (theoretically, no new deviations should exist after strict EXECUTE mode)    - Verify all checklist items were completed correctly as per the plan (including minor corrections)    - Check for security implications    - Confirm code maintainability    **Review Protocol Steps**:    1. Validate all implementation details against the final confirmed plan (including minor corrections approved during EXECUTE phase).    2. **Use file tools** to complete the &quot;Final Review&quot; section in the task file.    **Deviation Format**:    `Unreported deviation detected: [Exact deviation description]` (Ideally should not occur)    **Reporting**:    Must report whether the implementation perfectly matches the final plan.    **Conclusion Format**:    `Implementation perfectly matches the final plan.` OR `Implementation has unreported deviations from the final plan.` (The latter should trigger further investigation or return to PLAN)    **Thinking Process**:    <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thinking Process: Hmm... [Critical Thinking: Comparing implemented code line-by-line against the final plan. Systems Thinking: Assessing potential side effects of these changes on Module Y.]</span><br></pre></td></tr></table></figure>    **Output Format**:    Start with `[MODE: REVIEW]`, then provide a systematic comparison and a clear judgment.    Use markdown syntax for formatting.    ## Key Protocol Guidelines    &lt;a id=&quot;key-protocol-guidelines&quot;&gt;&lt;/a&gt;    - Declare the current mode `[MODE: MODE_NAME]` at the beginning of every response    - In EXECUTE mode, the plan must be followed 100% faithfully (reporting and executing minor corrections is allowed)    - In REVIEW mode, even the smallest unreported deviation must be flagged    - Depth of analysis should match the importance of the problem    - Always maintain a clear link back to the original requirements    - Disable emoji output unless specifically requested    - This optimized version supports automatic mode transitions without explicit transition signals    ## Code Handling Guidelines    &lt;a id=&quot;code-handling-guidelines&quot;&gt;&lt;/a&gt;    **Code Block Structure**:    Choose the appropriate format based on the comment syntax of different programming languages:    Style Languages (C, C++, Java, JavaScript, Go, Python, Vue, etc., frontend and backend languages):    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// ... existing code ...</span><br><span class="line">&#123;&#123; modifications, e.g., using + for additions, - for deletions &#125;&#125;</span><br><span class="line">// ... existing code ...</span><br></pre></td></tr></table></figure>    *Example:*    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># ... existing code ...</span><br><span class="line">def add(a, b):</span><br><span class="line"># &#123;&#123; modifications &#125;&#125;</span><br><span class="line">+   # Add input type validation</span><br><span class="line">+   if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):</span><br><span class="line">+       raise TypeError(&quot;Inputs must be numeric&quot;)</span><br><span class="line">    return a + b</span><br><span class="line"># ... existing code ...</span><br></pre></td></tr></table></figure>    If the language type is uncertain, use the generic format:    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[... existing code ...]</span><br><span class="line">&#123;&#123; modifications &#125;&#125;</span><br><span class="line">[... existing code ...]</span><br></pre></td></tr></table></figure>    **Editing Guidelines**:    - Show only necessary modification context    - Include file path and language identifiers    - Provide contextual comments (if needed)    - Consider the impact on the codebase    - Verify relevance to the request    - Maintain scope compliance    - Avoid unnecessary changes    - Unless otherwise specified, all generated comments and log output must use Chinese     **Forbidden Behaviors**:    - Using unverified dependencies    - Leaving incomplete functionality    - Including untested code    - Using outdated solutions    - Using bullet points unless explicitly requested    - Skipping or simplifying code sections (unless part of the plan)    - Modifying unrelated code    - Using code placeholders (unless part of the plan)    ## Task File Template    &lt;a id=&quot;task-file-template&quot;&gt;&lt;/a&gt;    <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Context</span></span><br><span class="line">Filename: [Task Filename.md]</span><br><span class="line">Created On: [DateTime]</span><br><span class="line">Created By: [Username/AI]</span><br><span class="line">Associated Protocol: RIPER-5 + Multidimensional + Agent Protocol</span><br><span class="line"></span><br><span class="line"><span class="section"># Task Description</span></span><br><span class="line">[Full task description provided by the user]</span><br><span class="line"></span><br><span class="line"><span class="section"># Project Overview</span></span><br><span class="line">[Project details entered by the user or brief project information automatically inferred by AI based on context]</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="section"><span class="emphasis">*The following sections are maintained by the AI during protocol execution*</span></span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="section"># Analysis (Populated by RESEARCH mode)</span></span><br><span class="line">[Code investigation results, key files, dependencies, constraints, etc.]</span><br><span class="line"></span><br><span class="line"><span class="section"># Proposed Solution (Populated by INNOVATE mode)</span></span><br><span class="line">[Different approaches discussed, pros/cons evaluation, final favored solution direction]</span><br><span class="line"></span><br><span class="line"><span class="section"># Implementation Plan (Generated by PLAN mode)</span></span><br><span class="line">[Final checklist including detailed steps, file paths, function signatures, etc.]</span><br></pre></td></tr></table></figure>    Implementation Checklist:    1. [Specific action 1]    2. [Specific action 2]    ...    n. [Final action]    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Current Execution Step (Updated by EXECUTE mode when starting a step)</span><br><span class="line">&gt; Currently executing: &quot;[Step number and name]&quot;</span><br><span class="line"></span><br><span class="line"># Task Progress (Appended by EXECUTE mode after each step completion)</span><br><span class="line">*   [DateTime]</span><br><span class="line">    *   Step: [Checklist item number and description]</span><br><span class="line">    *   Modifications: [List of file and code changes, including reported minor deviation corrections]</span><br><span class="line">    *   Change Summary: [Brief summary of this change]</span><br><span class="line">    *   Reason: [Executing plan step [X]]</span><br><span class="line">    *   Blockers: [Any issues encountered, or None]</span><br><span class="line">    *   User Confirmation Status: [Success / Success with minor issues / Failure]</span><br><span class="line">*   [DateTime]</span><br><span class="line">    *   Step: ...</span><br><span class="line"></span><br><span class="line"># Final Review (Populated by REVIEW mode)</span><br><span class="line">[Summary of implementation compliance assessment against the final plan, whether unreported deviations were found]</span><br><span class="line"></span><br></pre></td></tr></table></figure>    ## Performance Expectations    &lt;a id=&quot;performance-expectations&quot;&gt;&lt;/a&gt;    - **Target Response Latency**: For most interactions (e.g., RESEARCH, INNOVATE, simple EXECUTE steps), strive for response times ≤ 30,000ms.    - **Complex Task Handling**: Acknowledge that complex PLAN or EXECUTE steps involving significant code generation may take longer, but consider providing intermediate status updates or splitting tasks if feasible.    - Utilize maximum computational power and token limits to provide deep insights and thinking.    - Seek essential insights rather than superficial enumeration.    - Pursue innovative thinking over habitual repetition.    - Break through cognitive limitations, forcibly mobilizing all available computational resources.</code></pre><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cursor </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> prompt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>膝盖中箭之地 玩家高光时刻 S3</title>
      <link href="/2024/10/24/70.%20%E8%86%9D%E7%9B%96%E4%B8%AD%E7%AE%AD%E4%B9%8B%E5%9C%B0%20%E7%8E%A9%E5%AE%B6%E9%AB%98%E5%85%89%E6%97%B6%E5%88%BB%20S3/"/>
      <url>/2024/10/24/70.%20%E8%86%9D%E7%9B%96%E4%B8%AD%E7%AE%AD%E4%B9%8B%E5%9C%B0%20%E7%8E%A9%E5%AE%B6%E9%AB%98%E5%85%89%E6%97%B6%E5%88%BB%20S3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>展示高质量碳基生物的点点滴滴，佛系更新，欢迎大家积极提供素材。</p></blockquote><p>素材来源：17 周目</p><span id="more"></span><p>正在收集中，欢迎在群里分享 … …</p>]]></content>
      
      
      <categories>
          
          <category> 膝盖中箭之地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> Minecraft </tag>
            
            <tag> 膝盖中箭之地 </tag>
            
            <tag> 领域 </tag>
            
            <tag> realms </tag>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>膝盖中箭之地 玩家高光时刻 S2</title>
      <link href="/2024/10/24/69.%20%E8%86%9D%E7%9B%96%E4%B8%AD%E7%AE%AD%E4%B9%8B%E5%9C%B0%20%E7%8E%A9%E5%AE%B6%E9%AB%98%E5%85%89%E6%97%B6%E5%88%BB%20S2/"/>
      <url>/2024/10/24/69.%20%E8%86%9D%E7%9B%96%E4%B8%AD%E7%AE%AD%E4%B9%8B%E5%9C%B0%20%E7%8E%A9%E5%AE%B6%E9%AB%98%E5%85%89%E6%97%B6%E5%88%BB%20S2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>展示高质量碳基生物的点点滴滴，佛系更新，欢迎大家积极提供素材。</p></blockquote><span id="more"></span><p><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-22.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-23.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-24.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-28.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-29.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-30.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-31.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-33.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-36.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-42.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-44.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-47.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-48.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-49.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-50.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-52.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-2.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-1.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-3.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-4.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-5.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-10.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-12.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-13.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-18.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-19.jpg"><br><img src="https://cdn.wkarrow.top/wp-content/uploads/2020/05/2020-03-09-20.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 膝盖中箭之地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> Minecraft </tag>
            
            <tag> 膝盖中箭之地 </tag>
            
            <tag> 领域 </tag>
            
            <tag> realms </tag>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>膝盖中箭之地 玩家高光时刻 S1</title>
      <link href="/2024/10/24/68.%20%E8%86%9D%E7%9B%96%E4%B8%AD%E7%AE%AD%E4%B9%8B%E5%9C%B0%20%E7%8E%A9%E5%AE%B6%E9%AB%98%E5%85%89%E6%97%B6%E5%88%BB%20S1/"/>
      <url>/2024/10/24/68.%20%E8%86%9D%E7%9B%96%E4%B8%AD%E7%AE%AD%E4%B9%8B%E5%9C%B0%20%E7%8E%A9%E5%AE%B6%E9%AB%98%E5%85%89%E6%97%B6%E5%88%BB%20S1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>展示高质量碳基生物的点点滴滴，佛系更新，欢迎大家积极提供素材。</p></blockquote><span id="more"></span><p><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/1.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/2.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/3.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/4.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/5.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/6.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/7.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/8.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/9.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/10.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/11.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/12.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/13.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/14.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/15.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/16.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/17.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/18.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/19.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/20.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/21.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/22.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/23.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/24.png"><br><img src="https://cdn.mc.wkarrow.top/ShiningStars/1-20210920/25.png"></p>]]></content>
      
      
      <categories>
          
          <category> 膝盖中箭之地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> Minecraft </tag>
            
            <tag> 膝盖中箭之地 </tag>
            
            <tag> 领域 </tag>
            
            <tag> realms </tag>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>膝盖中箭之地 坐标公开</title>
      <link href="/2024/10/24/67.%20%E8%86%9D%E7%9B%96%E4%B8%AD%E7%AE%AD%E4%B9%8B%E5%9C%B0%20%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%AC%E5%BC%80%E5%9D%90%E6%A0%87/"/>
      <url>/2024/10/24/67.%20%E8%86%9D%E7%9B%96%E4%B8%AD%E7%AE%AD%E4%B9%8B%E5%9C%B0%20%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%AC%E5%BC%80%E5%9D%90%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<p>适用周目：17 周目</p><p>数据来源：realms 故事</p><span id="more"></span><h3 id="🌴-主世界"><a href="#🌴-主世界" class="headerlink" title="🌴 主世界"></a>🌴 主世界</h3><ul><li><p>出生点</p><ul><li>0, 64, 0</li></ul></li><li><p>掠夺者前哨站</p><ul><li>-3386, 97, -3402</li></ul></li><li><p>森林府邸</p><ul><li>5263, 89, 3542</li></ul></li><li><p>地狱要塞</p><ul><li>-380, 73, 807</li></ul></li><li><p>海底神殿</p><ul><li>1671, 62, -3431</li></ul></li><li><p>蘑菇岛</p><ul><li>894, 64, -3539</li></ul></li></ul><h3 id="⚠️-地狱"><a href="#⚠️-地狱" class="headerlink" title="⚠️ 地狱"></a>⚠️ 地狱</h3><ul><li>烈焰人刷怪塔<ul><li>1, 114, 22</li></ul></li><li>村民交易所<ul><li>-11, 114, 42</li></ul></li></ul><h3 id="⭕-下界"><a href="#⭕-下界" class="headerlink" title="⭕ 下界"></a>⭕ 下界</h3><p>暂无</p>]]></content>
      
      
      <categories>
          
          <category> 膝盖中箭之地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> Minecraft </tag>
            
            <tag> 膝盖中箭之地 </tag>
            
            <tag> 领域 </tag>
            
            <tag> realms </tag>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>膝盖中箭之地 addon 使用说明</title>
      <link href="/2024/10/23/66.%20%E8%86%9D%E7%9B%96%E4%B8%AD%E7%AE%AD%E4%B9%8B%E5%9C%B0%20addon%20%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
      <url>/2024/10/23/66.%20%E8%86%9D%E7%9B%96%E4%B8%AD%E7%AE%AD%E4%B9%8B%E5%9C%B0%20addon%20%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ol><li>本文将列举服务器当前使用过的插件的使用指南，便于快速查找使用方法。</li><li>善用右侧的导航栏，快速定位到您需要的内容。</li></ol><h2 id="1-World-Utilities-实用工具"><a href="#1-World-Utilities-实用工具" class="headerlink" title="1. World Utilities - 实用工具"></a>1. World Utilities - 实用工具</h2><ul><li>✅ Guide Book - 指南书<ul><li>介绍：死亡后丢掉了合成指南？不要紧，找个工作台，简单的原料就可以再做一本，World Utilities 的全部合成指南都在书里，英语好的家人们可直接看书，而无需看下方内容了。</li><li>材料准备：<ul><li>[B]书 x1</li><li>[P]木稿 x1</li><li>[S]木铲 x1</li><li>[A]木斧 x1</li><li>[W]木剑 x1</li></ul></li><li>合成方式：<ul><li>[&nbsp;&nbsp;&nbsp;][P][&nbsp;&nbsp;&nbsp;]</li><li>[W][B][A]</li><li>[&nbsp;&nbsp;&nbsp;][S][&nbsp;&nbsp;&nbsp;]</li></ul></li></ul></li><li>✅ homes - 快速传送<ul><li>介绍：该功能实现了快速传送到指定位置的功能，合成后右键使用，可记录当前所在位置，共开放了 10 个位置</li><li>材料准备：<ul><li>[C]原石 x5</li><li>[P]木板 x1</li><li>[D]木门（任意） x1</li></ul></li><li>合成方式：<ul><li>[&nbsp;&nbsp;&nbsp;][P][&nbsp;&nbsp;&nbsp;]</li><li>[C][D][C]</li><li>[C][C][C]</li></ul></li></ul></li><li>✅ Multiblock Pickaxe - 多方块挖掘镐<ul><li>介绍：现在挖一次方块就等于挖了 9 个方块，挖掘区域为下稿子的方块周围一圈，也就是9个，而区域方向为挖掘方块受击面所在平面，极大提升了下矿体验。</li><li>材料准备：<ul><li>[D]钻石镐 x3</li><li>[S]木棍 x2</li></ul></li><li>合成方式：<ul><li>[D][D][D]</li><li>[&nbsp;&nbsp;&nbsp;][S][&nbsp;&nbsp;&nbsp;]</li><li>[&nbsp;&nbsp;&nbsp;][S][&nbsp;&nbsp;&nbsp;]</li></ul></li></ul></li><li>✅ Omni Tool - 多功能工具<ul><li>介绍：使用这个多功能工具优化你的库存空间。这使你能够像使用镐、斧头或铲子一样打破任何方块。出门带着一个就行了，大大提高跑图体验。</li><li>材料准备：<ul><li>[H]蜂蜜块 x6</li><li>[A]钻石斧 x1</li><li>[P]钻石镐 x1</li><li>[S]钻石铲 x1</li></ul></li><li>合成方式：<ul><li>[H][A][H]</li><li>[H][P][H]</li><li>[H][S][H]</li></ul></li></ul></li><li>✅ Harvester Hoe - 收割者锄<ul><li>介绍：收割的作物将自动重新种植，掉落的物品将添加到您的库存中，除了用于重新种植所需的种子！这将适用于小麦、胡萝卜、甜菜根、土豆、瓜类、南瓜、可可豆和下界疣。</li><li>材料准备：<ul><li>[H]钻石锄 x1</li><li>[W]小麦种子 x1</li><li>[M]西瓜种子 x1</li><li>[U]南瓜种子 x1</li><li>[O]可可豆 x1</li><li>[X]小麦种子 x1</li><li>[B]甜菜根种子 x1</li><li>[P]土豆 x1</li><li>[C]胡萝卜 x1</li></ul></li><li>合成方式：<ul><li>[W][M][U]</li><li>[O][H][X]</li><li>[B][P][C]</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 膝盖中箭之地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> Minecraft </tag>
            
            <tag> 膝盖中箭之地 </tag>
            
            <tag> 领域 </tag>
            
            <tag> realms </tag>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>膝盖中箭之地 常见问题</title>
      <link href="/2024/10/23/66.%20%E8%86%9D%E7%9B%96%E4%B8%AD%E7%AE%AD%E4%B9%8B%E5%9C%B0%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2024/10/23/66.%20%E8%86%9D%E7%9B%96%E4%B8%AD%E7%AE%AD%E4%B9%8B%E5%9C%B0%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><p>本文将集中回答网友们回复的各类问题，毕竟很多问题回答的次数多了我也烦，还不如在这里列一个问答列表，方便大家查阅</p><p>本文最后更新时间：2024年10月23日</p><h2 id="二、常见问题"><a href="#二、常见问题" class="headerlink" title="二、常见问题"></a>二、常见问题</h2><h3 id="Q：服务器换图的原则和频率是怎么规定的？"><a href="#Q：服务器换图的原则和频率是怎么规定的？" class="headerlink" title="Q：服务器换图的原则和频率是怎么规定的？"></a>Q：服务器换图的原则和频率是怎么规定的？</h3><p>除非当前图已经无法满足新版本的需求，否则一直不换，稳定游玩到底。</p><h3 id="Q：服务器是不是收费的"><a href="#Q：服务器是不是收费的" class="headerlink" title="Q：服务器是不是收费的"></a>Q：服务器是不是收费的</h3><p>永久免费，欢迎赞助（要恰饭的嘛）</p><h3 id="Q：为啥腐竹老是不理我？为啥我提出的问题回复的很慢？"><a href="#Q：为啥腐竹老是不理我？为啥我提出的问题回复的很慢？" class="headerlink" title="Q：为啥腐竹老是不理我？为啥我提出的问题回复的很慢？"></a>Q：为啥腐竹老是不理我？为啥我提出的问题回复的很慢？</h3><p>我有事业、爱人、家人、朋友，游戏审核啥的只能放后面，理解万岁！婚后男人你懂的 ~</p><p>你们的问题我都会看，请耐心等待。</p><p>当然对于你的申请来说，要是你的申请流程没按照审核群置顶公告的流程来，我肯定不理你鸭，回去看看流程补齐缺失的就好了</p><h3 id="Q：有人说“为啥服务器没有xxx？为哈不能用xxx？一个人管理服务器？独裁？垃圾！艹”，对此腐竹有啥回应吗？"><a href="#Q：有人说“为啥服务器没有xxx？为哈不能用xxx？一个人管理服务器？独裁？垃圾！艹”，对此腐竹有啥回应吗？" class="headerlink" title="Q：有人说“为啥服务器没有xxx？为哈不能用xxx？一个人管理服务器？独裁？垃圾！艹”，对此腐竹有啥回应吗？"></a>Q：有人说“为啥服务器没有xxx？为哈不能用xxx？一个人管理服务器？独裁？垃圾！艹”，对此腐竹有啥回应吗？</h3><p>对于这样的人，一眼DJ，鉴定为纯纯的铸币。</p><p>回到正题，有问题你可以这样问：</p><ul><li>建议服务器 …</li><li>我觉得加上 … 更好</li><li>不知道加上 … 服务器是不是会更好</li><li>请问 …</li><li>可否 …</li></ul><p>我欢迎大家积极发表理性的意见和建议，“会说话”是一个人的基本素养。</p><h3 id="Q：我要是不想玩了，组织会怎么处理？"><a href="#Q：我要是不想玩了，组织会怎么处理？" class="headerlink" title="Q：我要是不想玩了，组织会怎么处理？"></a>Q：我要是不想玩了，组织会怎么处理？</h3><p>一般玩家都在自行退群或者跟我说声不想玩的，我都是走“三删除”的逻辑：</p><ol><li>删除 xbox 好友</li><li>剥夺服务器玩家用户权限</li><li>踢群</li></ol><p>一旦有人退群，不管是有意无意的，一律走“三删除”的逻辑。</p><h3 id="Q：服务器掉线？高延时？"><a href="#Q：服务器掉线？高延时？" class="headerlink" title="Q：服务器掉线？高延时？"></a>Q：服务器掉线？高延时？</h3><p>在群里反馈一下，只要有一个人能玩，就代表着服务器没问题。那就只有是你的问题了，看看网络是不是不顺畅，看看设备是不是不给力。</p><p>若都反应上不去等问题，那就是领域服务器崩了，等待微软自行修复即可。</p><h3 id="Q：主群的管理员身份有啥用？不是群主一人独裁了吗？"><a href="#Q：主群的管理员身份有啥用？不是群主一人独裁了吗？" class="headerlink" title="Q：主群的管理员身份有啥用？不是群主一人独裁了吗？"></a>Q：主群的管理员身份有啥用？不是群主一人独裁了吗？</h3><p>仅作纪念意义。主群的管理员从建群到现在就一直这几个人，从来没变，其实可以把它当作是一种身份 —— 一个在群里待得比其他绝大部分群员久且很幸运的身份（类似绝版徽章）</p>]]></content>
      
      
      <categories>
          
          <category> 膝盖中箭之地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> Minecraft </tag>
            
            <tag> 膝盖中箭之地 </tag>
            
            <tag> 领域 </tag>
            
            <tag> realms </tag>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>膝盖中箭之地 加入方式</title>
      <link href="/2024/10/23/65.%20%E8%86%9D%E7%9B%96%E4%B8%AD%E7%AE%AD%E4%B9%8B%E5%9C%B0%20%E5%8A%A0%E5%85%A5%E6%96%B9%E5%BC%8F/"/>
      <url>/2024/10/23/65.%20%E8%86%9D%E7%9B%96%E4%B8%AD%E7%AE%AD%E4%B9%8B%E5%9C%B0%20%E5%8A%A0%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ol><li>首先加入 QQ 审核群 417396863</li><li>填写 <strong>问卷调查</strong>（<a href="https://docs.qq.com/form/page/DQlBhdmFMc1BxQUxU?_w_tencentdocx_form=1">点我填问卷</a>）</li><li>看 <strong>玩家守则</strong>（<a href="https://nightingalewk.cn/2024/10/23/64.%20%E8%86%9D%E7%9B%96%E4%B8%AD%E7%AE%AD%E4%B9%8B%E5%9C%B0%20%E7%8E%A9%E5%AE%B6%E5%AE%88%E5%88%99/">点我看守则</a>），找关键字（在文末，一句话）</li><li>找审核群的群主，回复【<strong>关键字</strong>】和【<strong>XboxID</strong>】</li><li>等待审批</li></ol><p>等通过审核进主群后，你就可以正常游玩了。</p>]]></content>
      
      
      <categories>
          
          <category> 膝盖中箭之地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> Minecraft </tag>
            
            <tag> 膝盖中箭之地 </tag>
            
            <tag> 领域 </tag>
            
            <tag> realms </tag>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>膝盖中箭之地 玩家守则</title>
      <link href="/2024/10/23/64.%20%E8%86%9D%E7%9B%96%E4%B8%AD%E7%AE%AD%E4%B9%8B%E5%9C%B0%20%E7%8E%A9%E5%AE%B6%E5%AE%88%E5%88%99/"/>
      <url>/2024/10/23/64.%20%E8%86%9D%E7%9B%96%E4%B8%AD%E7%AE%AD%E4%B9%8B%E5%9C%B0%20%E7%8E%A9%E5%AE%B6%E5%AE%88%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>本文将通过 3 小节来为您清晰条例的说明游玩时必须遵守的文件 —— 玩家守则，全篇阅读大约需要 5 分钟</p><span id="more"></span><h2 id="一、自我介绍"><a href="#一、自我介绍" class="headerlink" title="一、自我介绍"></a>一、自我介绍</h2><p>称呼我 wk 就行，XboxID：LexingtonWK，Java 账户昵称：NightingaleWK，毕业于<a href="https://www.sdut.edu.cn/">山东理工大学</a>，计算机专业，曾任 Laravel 工程师职务与项目经理职务，现任 CEC 的某地数字城市，是一名 TALL STACK developer，本人是 1.7.2 入的坑，喜欢这款游戏的同时，同时不甘于一个人自己玩，于是买了个领域服务器，从 17 年一直开到现在。</p><h2 id="二、服务器介绍"><a href="#二、服务器介绍" class="headerlink" title="二、服务器介绍"></a>二、服务器介绍</h2><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h3><p>目前提供 <strong>1 个</strong> 服务器供玩家游玩：</p><ul><li><strong>JAVA 版</strong> 服务器<ul><li>目前版本：1.21.41；</li><li>Addon 列表 ：<ol><li>耐久显示</li><li>Damage Indicator Addon</li><li>Item Info+ </li><li>Hiker’s Friend Addon</li><li>Poisonous Potato Addon</li><li>Spark Pets Lite Addon</li><li>Spark Portals Addon</li><li>Combine Ores Addon</li><li>Gravestone Addon</li><li>World Utilities Addon</li><li>Planes Pro Addon</li><li>Security Addon</li><li>Furniture Addon</li></ol></li></ul></li></ul><h3 id="2-管理"><a href="#2-管理" class="headerlink" title="2.管理"></a>2.管理</h3><p>个人独裁。腐竹拥有一切条例解释权和所有行为裁定权；</p><p>没有乱七八糟的组织结构，就我一个人，我会尽最大可能公正客观的对待每一次提意，我所做的目的就是为了我更好的管理服务器、玩家更好的进行游戏；</p><p>回复和审批处理不会很及时，但我看见了的都会去给处理的，大家放心。</p><h2 id="三、玩家守则"><a href="#三、玩家守则" class="headerlink" title="三、玩家守则"></a>三、玩家守则</h2><ol><li>生存不易，让自己坚强起来，不要无脑的等待他人的恩赐。用自己的实际行动在游戏里创造价值，赢得他人尊重；</li><li>不拿取他人物品、不杀害他人拥有的生物、不破坏他人领地方块、不恶意伤人，未经他人允许，请勿对他人及其所有财产进行抢、偷、借、损等行为；</li><li>对于作弊、卡恶性 Bug，造成游戏失衡、影响他人游戏体验的人，第一次警告，第二次飞机；</li><li>禁止高频红石、禁止高空流水（岩浆）；</li><li>游戏内外禁止污蔑诽谤、人身攻击、网络暴力等行为，若发现直接飞机并保留对其发起民事行驶处理的权利；</li><li>出生点周围区域为主城位置，建设请遵循群主安排，符合主城设计思路与风格。群主有权对不符合主城设计的建筑进行拆除，拆除后会给玩家进行一定的补偿；</li><li>生存发展时，建议圈地，若周围已有其他人，请与其协商，做到双方和谐共处；</li><li>请自觉把苦力怕的坑填上；</li><li>请大家通过自己的言行举止在建造领域积极向上的游戏氛围，双标党、优越狗、素质低下党、撕 13 党和小学生无脑言论党均是踢群的对象。有问题多沟通，有分歧互理解，没什么是沟通解决不了的，若有，那我就踢个群试试；</li><li>多利用牌子来表述自己的想法，比如“抱歉，误伤了您的牛，这是赔偿”、“一不小心地给你踩了，给你补种了”、“绝了，这是谁建的这么好看”、“你的红石设备被我一不小心玩坏了，需要怎么配合群里叫我，我帮你修”等；</li><li>谁提出谁实现。服务器推荐大家自己挖坑自己填，对自己的工程负责，当然，完全可以找志同道合的小伙伴一起实现；</li><li>严禁在服务器内的任何地方拉人，禁止宣传其他服务器。若您想自建服务器并找人，请您自己去贴吧知乎上努力，本服务器发现拉人情况直接飞机；</li><li>砍树请砍完。不要留个够不到的数头在那。</li></ol><p>🔑 <strong>关键词：苟利国家生死以</strong> 🔑</p>]]></content>
      
      
      <categories>
          
          <category> 膝盖中箭之地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> Minecraft </tag>
            
            <tag> 膝盖中箭之地 </tag>
            
            <tag> 领域 </tag>
            
            <tag> realms </tag>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 0 开始部署 LNMP 生产环境</title>
      <link href="/2024/10/10/63.%20%E4%BB%8E%200%20%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2%20LNMP%20%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/"/>
      <url>/2024/10/10/63.%20%E4%BB%8E%200%20%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2%20LNMP%20%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="前置准备工作"><a href="#前置准备工作" class="headerlink" title="前置准备工作"></a>前置准备工作</h2><p>本文章将指导您如何使用一台空白的云服务器（这里演示的是腾讯云的轻量服务器），在仅安装 ubuntu 24.04 操作系统的情况下，一步步完成 LNMP 环境的配置</p><h2 id="1-初始化-root-账户密码"><a href="#1-初始化-root-账户密码" class="headerlink" title="1. 初始化 root 账户密码"></a>1. 初始化 root 账户密码</h2><p>一行指令即可实现，其中需要输入两次密码，自己要记住。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> passwd root</span><br></pre></td></tr></table></figure><p>即便如此，这个 root 账户我们基本不用，但是初始化一下又没啥问题。</p><h2 id="2-更新系统"><a href="#2-更新系统" class="headerlink" title="2. 更新系统"></a>2. 更新系统</h2><p>目的是确保系统的所有软件包都是最新的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt upgrade -y</span><br></pre></td></tr></table></figure><p>其中，-y 是 apt upgrade 命令中的一个选项，它的作用是自动回答 “yes”（是） 以确认安装或升级过程中的所有提示。</p><h2 id="3-安装-Nginx"><a href="#3-安装-Nginx" class="headerlink" title="3. 安装 Nginx"></a>3. 安装 Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nginx -y</span><br></pre></td></tr></table></figure><p>安装完成后，可以使用以下命令检查 Nginx 是否已经正确启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status nginx</span><br></pre></td></tr></table></figure><p>访问服务器的 IP 地址（例如：<a href="http://your_server_ip),你应该能看到/">http://your_server_ip），你应该能看到</a> Nginx 的默认页面。</p><h2 id="4-安装-MySQL"><a href="#4-安装-MySQL" class="headerlink" title="4. 安装 MySQL"></a>4. 安装 MySQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install mysql-server -y</span><br></pre></td></tr></table></figure><p>安装完成后，执行以下命令对 MySQL 进行安全性设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mysql_secure_installation</span><br></pre></td></tr></table></figure><p>完成后，登录 MySQL 检查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mysql</span><br></pre></td></tr></table></figure><h2 id="4-修改-MySQL-的认证机制从-auth-socket-插件认证改为密码验证"><a href="#4-修改-MySQL-的认证机制从-auth-socket-插件认证改为密码验证" class="headerlink" title="4. 修改 MySQL 的认证机制从 auth_socket 插件认证改为密码验证"></a>4. 修改 MySQL 的认证机制从 auth_socket 插件认证改为密码验证</h2><p>在新的 MySQL 版本中，root 用户默认使用 auth_socket 插件进行身份验证，这意味着只有在系统中以 root 或 sudo 权限运行的用户才可以登录 MySQL，而无需密码。</p><p>但是这个机制不是我们需要的，如果不为 MySQL 的 root 用户设置密码，Laravel 将无法通过默认的 DB_USERNAME&#x3D;root 和 DB_PASSWORD 来连接到数据库。因为 Laravel 的数据库连接需要使用传统的用户名和密码进行身份验证，而不是通过 auth_socket 插件的方式。</p><p>为了确保 Laravel 能够成功连接 MySQL 数据库，需要按照以下步骤操作：</p><ol><li>登录 MySQL：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mysql</span><br></pre></td></tr></table></figure><ol start="2"><li>查看 root 用户的身份验证插件：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>, host, plugin <span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></table></figure><p>检查 root 用户的 plugin 是否为 auth_socket。</p><ol start="3"><li>设置 root 用户的密码，并将身份验证插件更改为 mysql_native_password（或者 caching_sha2_password）：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;your_new_password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>或者使用 caching_sha2_password 插件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> caching_sha2_password <span class="keyword">BY</span> <span class="string">&#x27;your_new_password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>小课堂：MySQL 8.0 及之后的版本中，mysql_native_password 和 caching_sha2_password 是 MySQL 中两种不同的身份验证插件，它们在安全性和性能上有一定的区别。以下是它们的详细对比：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1. mysql_native_password 插件</span><br><span class="line">    - 概述：mysql_native_password 是 MySQL 较早版本（5.7 及以前）中的默认身份验证插件，它通过哈希算法（SHA1）加密用户密码，并用于验证用户身份。</span><br><span class="line">    - 优点：</span><br><span class="line">        - 兼容性好：与 MySQL 早期版本、PHP 及其他数据库驱动程序（如 PDO、MySQLi）都有很好的兼容性。</span><br><span class="line">        - 配置简单：不需要额外的密码加密设置，容易理解和使用。</span><br><span class="line">    - 缺点：</span><br><span class="line">        - 安全性较低：使用 SHA1 作为哈希算法，而 SHA1 已被证明存在安全漏洞，因此使用该插件的密码容易受到彩虹表攻击和其他哈希破解技术的攻击。</span><br><span class="line">    - 适用场景：</span><br><span class="line">        - 与旧版本 MySQL 或旧版本客户端程序的兼容性需求。</span><br><span class="line">        - 出于兼容性考虑，推荐在低风险环境或开发环境中使用。</span><br><span class="line">2. caching_sha2_password 插件</span><br><span class="line">    - 概述：caching_sha2_password 是 MySQL 8.0 及之后的默认身份验证插件，使用更安全的 SHA-256 哈希算法来加密密码，并带有密码缓存功能，可以提高身份验证的效率。</span><br><span class="line">    - 优点：</span><br><span class="line">        - 更高的安全性：SHA-256 比 SHA1 更强大，能够更好地抵御暴力破解和其他类型的密码攻击。</span><br><span class="line">        - 提高性能：使用了客户端和服务器的身份验证缓存机制，可以减少重复身份验证时的性能开销，提升性能表现。</span><br><span class="line">        - 加密连接：支持加密连接（TLS/SSL），在不安全的网络中也可以保证传输中的数据安全性。</span><br><span class="line">    缺点：</span><br><span class="line">        - 兼容性问题：由于 caching_sha2_password 是 MySQL 8.0 中引入的新插件，因此可能与旧版本的 MySQL 客户端和驱动程序不兼容。例如：一些旧版本的 PHP 和 MySQLi 扩展可能无法直接连接到使用 caching_sha2_password 插件的 MySQL 数据库。</span><br><span class="line">    - 适用场景：</span><br><span class="line">        - 强安全性需求：在生产环境中，推荐使用 caching_sha2_password 来确保数据安全性。</span><br><span class="line">        - 高性能需求：由于缓存机制的存在，适用于高并发和频繁数据库访问的场景。</span><br><span class="line"></span><br><span class="line">在选择建议方面：</span><br><span class="line"></span><br><span class="line">1. 兼容性优先时使用 mysql_native_password：</span><br><span class="line">    - 如果你的 Laravel 项目、PHP 版本较旧（例如 PHP 7.x），或者使用了旧的 MySQL 客户端库（如 MySQLi），可能会遇到 caching_sha2_password 不兼容的问题。</span><br><span class="line">    - 在这种情况下，可以选择 mysql_native_password 作为过渡解决方案，以保证 Laravel 项目能够正常连接到数据库。</span><br><span class="line">2. 安全性优先时使用 caching_sha2_password：</span><br><span class="line">    - 在生产环境中，如果你的 Laravel 项目、PHP 版本以及 MySQL 客户端均支持 MySQL 8.0 及以上，并且支持 caching_sha2_password 插件，建议使用该插件以提高密码安全性。</span><br><span class="line">    - 另外，如果需要使用 SSL/TLS 加密的连接，也建议使用 caching_sha2_password。</span><br></pre></td></tr></table></figure><p>这里我选择的是 <strong>caching_sha2_password</strong></p><ol start="4"><li>刷新权限表：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><ol start="5"><li>退出 MySQL：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit;</span><br></pre></td></tr></table></figure><ol start="6"><li>验证 root 密码是否生效</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h2 id="5-安装-PHP"><a href="#5-安装-PHP" class="headerlink" title="5. 安装 PHP"></a>5. 安装 PHP</h2><p>安装 PHP 及其扩展：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install php-fpm php-mysql php-cli php-xml php-mbstring php-curl php-zip php-gd php-imagick -y</span><br></pre></td></tr></table></figure><p>截稿时最新版本为 8.3</p><p>配置 PHP-FPM： 编辑 PHP 配置文件 php.ini：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/php/8.3/fpm/php.ini</span><br></pre></td></tr></table></figure><p>确保以下参数值正确（如果没有则手动添加或修改）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cgi.fix_pathinfo</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">memory_limit</span> = <span class="number">512</span>M</span><br><span class="line"><span class="attr">upload_max_filesize</span> = <span class="number">50</span>M</span><br><span class="line"><span class="attr">post_max_size</span> = <span class="number">50</span>M</span><br><span class="line"><span class="attr">max_execution_time</span> = <span class="number">300</span></span><br></pre></td></tr></table></figure><p>重启 PHP-FPM 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart php8.3-fpm</span><br></pre></td></tr></table></figure><h2 id="6-配置-Nginx-以支持-PHP"><a href="#6-配置-Nginx-以支持-PHP" class="headerlink" title="6. 配置 Nginx 以支持 PHP"></a>6. 配置 Nginx 以支持 PHP</h2><p>创建一个新的 Nginx 配置文件，或者修改默认的配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/nginx/sites-available/laravel</span><br></pre></td></tr></table></figure><p>在文件中添加以下内容（确保与 Laravel 项目目录匹配）：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> your_domain_or_ip;</span><br><span class="line">    <span class="attribute">root</span> /var/www/laravel/public;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">include</span> snippets/fastcgi-php.conf;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> unix:/var/run/php/php8.1-fpm.sock;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ /\.ht</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启用此配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /etc/nginx/sites-available/laravel /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure><p>检查 Nginx 配置语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nginx -t</span><br></pre></td></tr></table></figure><p>重启 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart nginx</span><br></pre></td></tr></table></figure><h2 id="安装-Composer"><a href="#安装-Composer" class="headerlink" title="安装 Composer"></a>安装 Composer</h2><p>全局安装 Composer：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://getcomposer.org/installer | php</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure><p>验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer --version</span><br></pre></td></tr></table></figure><h2 id="完事儿"><a href="#完事儿" class="headerlink" title="完事儿"></a>完事儿</h2><p>至此，一个崭新的 LNMP 环境就配置好了，下一篇文章我将继续介绍如何在此基础上部署一个 Laravel 项目。</p>]]></content>
      
      
      <categories>
          
          <category> LNMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 10 在 vite 工作流中引入并使用 Font Awesome 6</title>
      <link href="/2023/11/21/62.%20laravel%2010%20%E5%9C%A8%20vite%20%E5%B7%A5%E4%BD%9C%E6%B5%81%E4%B8%AD%E5%BC%95%E5%85%A5%E5%B9%B6%E4%BD%BF%E7%94%A8%20Font%20Awesome/"/>
      <url>/2023/11/21/62.%20laravel%2010%20%E5%9C%A8%20vite%20%E5%B7%A5%E4%BD%9C%E6%B5%81%E4%B8%AD%E5%BC%95%E5%85%A5%E5%B9%B6%E4%BD%BF%E7%94%A8%20Font%20Awesome/</url>
      
        <content type="html"><![CDATA[<p>引入 Font Awesome 组件到 Laravel 项目的 Vite 构建中涉及一些步骤。以下是一般的指南：</p><h2 id="1-安装-Font-Awesome："><a href="#1-安装-Font-Awesome：" class="headerlink" title="1. 安装 Font Awesome："></a>1. 安装 Font Awesome：</h2><p>通过 npm 或 yarn 安装 Font Awesome。在项目根目录下运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @fortawesome/fontawesome-free</span><br></pre></td></tr></table></figure><p>或者使用 yarn：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @fortawesome/fontawesome-free</span><br></pre></td></tr></table></figure><h2 id="2-引入-Font-Awesome-样式："><a href="#2-引入-Font-Awesome-样式：" class="headerlink" title="2. 引入 Font Awesome 样式："></a>2. 引入 Font Awesome 样式：</h2><p>在 Vite 项目中，你可以在入口文件（通常是 main.js 或 main.ts,laravel 默认是 app.js ）中引入 Font Awesome 样式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.js or src/main.ts or resources/js/app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@fortawesome/fontawesome-free/css/all.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他的入口文件内容...</span></span><br></pre></td></tr></table></figure><p>这将引入 Font Awesome 的所有样式。如果你只需要使用特定图标的样式，你可以根据需要引入 solid、regular 或 brands 中的子集。</p><h2 id="4-npm-构建"><a href="#4-npm-构建" class="headerlink" title="4. npm 构建"></a>4. npm 构建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment">## laravel sail 环境需要添加 sail 前缀</span></span><br><span class="line">sail npm run dev</span><br></pre></td></tr></table></figure><h2 id="3-开始使用"><a href="#3-开始使用" class="headerlink" title="3. 开始使用"></a>3. 开始使用</h2><p>然后你就可以使用 Font Awesome 图标了。</p>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Font Awesome </tag>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 项目执行 sail up 报 80 端口占用问题</title>
      <link href="/2023/11/16/61.%20laravel%20%E9%A1%B9%E7%9B%AE%E6%89%A7%E8%A1%8C%20sail%20up%20%E6%8A%A5%2080%20%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2023/11/16/61.%20laravel%20%E9%A1%B9%E7%9B%AE%E6%89%A7%E8%A1%8C%20sail%20up%20%E6%8A%A5%2080%20%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>今天给一台新机器装好 laravel sail 环境后，在最后一步启动项目时，报错如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wangkai@Precision-<span class="number">7920</span>:~/code/daochenglin$ sail up -d</span><br><span class="line">[+] Building <span class="number">0.0</span>s (<span class="number">0</span>/<span class="number">0</span>)                                                                          docker:<span class="keyword">default</span></span><br><span class="line">[+] Running <span class="number">8</span>/<span class="number">8</span></span><br><span class="line"> ✔ Network daochenglin_sail              Created                                                           <span class="number">0.0</span>s</span><br><span class="line"> ✔ Container daochenglin-meilisearch-<span class="number">1</span>   Started                                                           <span class="number">0.1</span>s</span><br><span class="line"> ✔ Container daochenglin-selenium-<span class="number">1</span>      Started                                                           <span class="number">0.1</span>s</span><br><span class="line"> ✔ Container daochenglin-redis-<span class="number">1</span>         Started                                                           <span class="number">0.1</span>s</span><br><span class="line"> ✔ Container daochenglin-memcached-<span class="number">1</span>     Started                                                           <span class="number">0.1</span>s</span><br><span class="line"> ✔ Container daochenglin-mysql-<span class="number">1</span>         Started                                                           <span class="number">0.1</span>s</span><br><span class="line"> ✔ Container daochenglin-mailpit-<span class="number">1</span>       Started                                                           <span class="number">0.1</span>s</span><br><span class="line"> ✔ Container daochenglin-laravel.test-<span class="number">1</span>  Created                                                           <span class="number">0.1</span>s</span><br><span class="line"><span class="built_in">Error</span> response <span class="keyword">from</span> daemon: Ports are not available: exposing port TCP <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span> -&gt; <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">0</span>: listen tcp <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>: bind: An attempt was made to access a socket in a way forbidden by its access permissions.</span><br></pre></td></tr></table></figure><p>这个问题就是我们本机的 80 端口被占用了，我个人的电脑是 windows 11，系统服务默认开启一个叫 <code>World Wide Web 发布服务</code> 的服务，他是自动启动的，该服务通过 Internet Information Services 管理器提供 Web 连接和管理，默认占用 80 端口，这个服务我们很明显用不到，给他禁用掉，然后再 sail up 就 ok 了。</p><p>一点小小的经验分享 😁</p>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel sail </tag>
            
            <tag> 故障排除 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel artisan route 用法</title>
      <link href="/2023/11/15/60.%20laravel%20artisan%20route%20%E7%94%A8%E6%B3%95/"/>
      <url>/2023/11/15/60.%20laravel%20artisan%20route%20%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>基本用法是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">laravel artisan route 用法</span><br></pre></td></tr></table></figure><p>可添加的后缀有：</p><table><thead><tr><th>后缀参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>–method&#x3D;<TERM></td><td>Filters the routes by method.</td><td>无</td></tr><tr><td>–name&#x3D;<TERM></td><td>Filters the routes by name.</td><td>无</td></tr><tr><td>–path&#x3D;<TERM></td><td>Filters the routes by path (URI).</td><td>无</td></tr><tr><td>–reverse</td><td>Reverses the order the routes are displayed in the table.</td><td>无</td></tr><tr><td>-r</td><td>Reverses the order the routes are displayed in the table (shortcut to –reverse).</td><td>无</td></tr><tr><td>–sort</td><td>The column to sort by. Accepted values are host, method, uri, name, action or middleware.</td><td>uri</td></tr></tbody></table><p>举例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Filter the route list by name.</span></span><br><span class="line">php artisan route:<span class="keyword">list</span> --name=account</span><br><span class="line"></span><br><span class="line"><span class="comment"># Filter the route list by URI.</span></span><br><span class="line">php artisan route:<span class="keyword">list</span> --path=<span class="string">&#x27;api/v1/&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Filter the route list by method.</span></span><br><span class="line">php artisan route:<span class="keyword">list</span> --method=GET</span><br><span class="line"></span><br><span class="line"><span class="comment"># The filters can be combined; results will be aggregated using &quot;and&quot; logic. The following command:</span></span><br><span class="line">php artisan route:<span class="keyword">list</span> --path=account --method=GET</span><br><span class="line"></span><br><span class="line"><span class="comment"># Filter the routes and display them in reverse order.</span></span><br><span class="line">php artisan route:<span class="keyword">list</span> --method=GET --reverse</span><br><span class="line"> </span><br><span class="line"><span class="comment"># The following is equivalent to the previous example.</span></span><br><span class="line">php artisan route:<span class="keyword">list</span> --method=GET -r</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Filter the routes and sort `name` column.</span></span><br><span class="line">php artisan route:<span class="keyword">list</span> --method=GET --sort=name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> artisan 指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哎，又把博客迁移了</title>
      <link href="/2023/11/07/59.%20%E5%93%8E%EF%BC%8C%E5%8F%88%E6%8A%8A%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%BA%86/"/>
      <url>/2023/11/07/59.%20%E5%93%8E%EF%BC%8C%E5%8F%88%E6%8A%8A%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>就结果来说，我还是回归 hexo 的怀抱了。</p></blockquote><p>本来我的博客部署在自己的腾讯云轻量服务器，但是最近手头的项目需要部署测试，就可能对服务器进行一些变动和修改，甚至重装，这就对博客的稳定造成了影响。为了追求稳定，我决定还是把网站部署到 github pages 上，虽然可能存在部分打不开的情况，但至少是免费的，我再把我的域名指向默认地址上，就没问题了。</p><p>其实 typecho 用得好好的，非常顺手，要不是服务器有其他用处，我才不换呢。</p><p>啥也没丢，啥都可以正常运行，而且 github 为我们提供稳定可靠谱的服务，我觉得就足够了</p><p>回顾一路走来的博客路线，从 wordpress，再到 hexo，再到 typecho，再回到 hexo，个人的偏好从一开始追寻花里胡哨，大而全，慢慢的转为简单简约，稳定可靠。慢慢回归博客的记录本质。</p><p>在发文的时候，我把该转移的资源都完成了转移，那就让我们继续在 github pages 强力驱动下的 hexo 里继续记录我的成长历程吧</p><blockquote><p>生命不息，折腾不止</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置并部署 laravel 10 项目到 ubuntu 22.04.2 服务器</title>
      <link href="/2023/07/10/57.%20%E9%85%8D%E7%BD%AE%E5%B9%B6%E9%83%A8%E7%BD%B2%20laravel%2010%20%E9%A1%B9%E7%9B%AE%E5%88%B0%20ubuntu%2022.04.2%20%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2023/07/10/57.%20%E9%85%8D%E7%BD%AE%E5%B9%B6%E9%83%A8%E7%BD%B2%20laravel%2010%20%E9%A1%B9%E7%9B%AE%E5%88%B0%20ubuntu%2022.04.2%20%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="ubuntu-镜像下载与安装"><a href="#ubuntu-镜像下载与安装" class="headerlink" title="ubuntu 镜像下载与安装"></a>ubuntu 镜像下载与安装</h2><p>ubuntu 官方可免费下载服务器版本的 iso 镜像文件，我们使用本镜像进行最小化安装即可。我自己的操作是把镜像交给我们公司的网络运维工程师，让他给我那这个镜像开了个虚机，分配了一个内网 IP 用来测试。</p><p>记得跟网络运维工程师说一下让服务器通互联网，再配置一下阿里云的源</p><h2 id="系统必要的配置"><a href="#系统必要的配置" class="headerlink" title="系统必要的配置"></a>系统必要的配置</h2><p>系统默认没初始化 root 账号，使用下方指令初始化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><p>然后定一个安全好记的密码就行，我们之后的操作都在 root 账号下执行。</p><p>接下来就是升级 ubuntu 系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade</span><br></pre></td></tr></table></figure><p>然后我们安装 vim 编辑器，方便编辑文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install vim</span><br></pre></td></tr></table></figure><p>然后我们安装 screen 工具，保证我们的操作不因关闭终端而终止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install screen</span><br></pre></td></tr></table></figure><p>至此该配置的都配置好了</p><h2 id="安装并配置-oneinstack"><a href="#安装并配置-oneinstack" class="headerlink" title="安装并配置 oneinstack"></a>安装并配置 oneinstack</h2><p>oneinstack 是一款自动化部署 lnmp 环境的组件工具，百度并访问官网，选择自动安装，选好你需要的配置后，复制好安装的命令，后面用</p><p>安装 lnmp 环境之前，我们新建一个 screen 窗口，保证我们的安装不因窗口关闭而终止：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S lnmp</span><br></pre></td></tr></table></figure><p>下面是一些常用操作，可以参考：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctrl a + d    // 暂退当前的 screen 窗口</span><br><span class="line">screen -r lnmp    // 恢复名为 lnmp 的 screen 窗口</span><br><span class="line">screen -ls    // 查看当前的所有 screen 窗口信息</span><br></pre></td></tr></table></figure><p>回到话题，配置好 screen 就可以开始安装 lnmp 环境啦，用上面的你复制的 oneinstack 生成的指令到你的终端，回车，然后等待安装完毕并重启服务器即可。</p><p>此过程一般没问题，若出现报错，安装会终止并提示错误信息，建议重新执行一遍。再有故障那就要自行解决了。</p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>根据 oneinstack 安装时配置的数据库密码，我们通过访问咱们主机的 ip 进入 oneinstack 默认页面，然后找到 phpmyadmin ，使用 root 和刚才说的密码进入数据库中，新建一个所需的空白数据库。</p><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><p>假设你的 laravel 10 项目在 github 中，代码通过 git 进行版本控制。</p><p>接下来我们前往网站目录，并将代码 clone 到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /date/wwwroot</span><br><span class="line">mv default default_back</span><br><span class="line">git clone [ 你的远端 git 地址 ] jiepade</span><br></pre></td></tr></table></figure><h2 id="php-配置"><a href="#php-配置" class="headerlink" title="php 配置"></a>php 配置</h2><p>我们需要将部分的 php 默认禁用的函数方法打开，方便使用诸如 composer 之类的命令，具体操作为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/php/etc/</span><br><span class="line">vim php.ini</span><br></pre></td></tr></table></figure><p>然后找到如下这行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">; This directive allows you to disable certain functions.</span><br><span class="line">; It receives a comma-delimited list of function names.</span><br><span class="line">; https://php.net/disable-functions</span><br><span class="line">disable_functions = passthru,exec,system,chroot,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_restore,dl,readlink,symlink,popepassthru,stream_socket_server,fsocket,popen</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disable_functions = passthru,exec,system,chroot,chgrp,chown,shell_exec,ini_alter,ini_restore,dl,readlink,popepassthru,stream_socket_server,fsocket,popen</span><br></pre></td></tr></table></figure><p>保存退出后，重启 php—fpm 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service php-fpm restart</span><br></pre></td></tr></table></figure><h2 id="composer-安装与执行"><a href="#composer-安装与执行" class="headerlink" title="composer 安装与执行"></a>composer 安装与执行</h2><p>回到项目根目录，安装 composer，若已安装，直接配置下一步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php -r &quot;copy(&#x27;https://install.phpcomposer.com/installer&#x27;, &#x27;composer-setup.php&#x27;);&quot;</span><br><span class="line">php composer-setup.php</span><br><span class="line">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure><p>若以上指令报错 php 无法找到，请检查path路径是否添加了php的bin目录，具体百度即可。不可能是没装 php，oneinstack 已经给你装好了，这个问题基本上是ubuntu下一般账号能跑 php，但 root 不行。小问题的。</p><p>我们不使用阿里云的 composer 镜像，因为国内镜像的composer各依赖版本不够新，影响使用，用国外原版镜像慢点，但是稳定且最新。</p><p>安装好后，在项目根目录执行 composer i 指令，安装项目所需的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer i</span><br></pre></td></tr></table></figure><h2 id="laravel-初始化配置"><a href="#laravel-初始化配置" class="headerlink" title="laravel 初始化配置"></a>laravel 初始化配置</h2><p>接下来就可以进行基础的 laravel 配置了，首先我们复制根目录下的 .env 一份出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp .env.example .env</span><br></pre></td></tr></table></figure><p>然后生成密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan key:generate</span><br></pre></td></tr></table></figure><p>然后修改 .env 为项目实际需要调整的内容，具体需要咨询开发人员要改哪些。</p><p>完成上述环节后，就可以进行数据库填充工作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan migrate:refresh --seed &amp;&amp; php artisan admin:install </span><br></pre></td></tr></table></figure><p>之后你可能需要借助数据库程序，连接到服务器，把一些你备份的项目初始化数据库填充到项目中，具体自行操作即可，推荐使用 Dbeaver，开源且免费，官方也在更新，别用盗版的 navicat 辣</p><h2 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h2><p>这时候你访问网址是无法看到你的项目的，需要对 nginx 配置，首先找到配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/conf/</span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><p>修改如下的几个值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">######################## default ############################</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 2333;             &lt;------------------here,change it</span><br><span class="line">    server_name _;</span><br><span class="line">    access_log /data/wwwlogs/access_nginx.log combined;</span><br><span class="line">    root /data/wwwroot/default/public;             &lt;------------------here,change it</span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line">    #error_page 404 /404.html;</span><br><span class="line">    #error_page 502 /502.html;</span><br><span class="line">    location /nginx_status &#123;</span><br><span class="line">      stub_status on;</span><br><span class="line">      access_log off;</span><br><span class="line">      allow 127.0.0.1;</span><br><span class="line">      deny all;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ [^/]\.php(/|$) &#123;</span><br><span class="line">      #fastcgi_pass remote_php_ip:9000;</span><br><span class="line">      fastcgi_pass unix:/dev/shm/php-cgi.sock;</span><br><span class="line">      fastcgi_index index.php;</span><br><span class="line">      include fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ &#123;</span><br><span class="line">      expires 30d;</span><br><span class="line">      access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ .*\.(js|css)?$ &#123;</span><br><span class="line">      expires 7d;</span><br><span class="line">      access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ ^/(\.user.ini|\.ht|\.git|\.svn|\.project|LICENSE|README.md) &#123;</span><br><span class="line">      deny all;</span><br><span class="line">    &#125;</span><br><span class="line">    location /.well-known &#123;</span><br><span class="line">      allow all;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;             &lt;------------------here,add it</span><br><span class="line">      try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>保存退出后，重启 nginx 使之生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><h2 id="文件权限调整"><a href="#文件权限调整" class="headerlink" title="文件权限调整"></a>文件权限调整</h2><p>我们需要对项目的文件提权，允许项目进行诸如存储文件等操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 default</span><br><span class="line">chown -R www-data:www-data default</span><br><span class="line"></span><br><span class="line">cd default</span><br><span class="line">chgrp -R www storage bootstrap/cache</span><br><span class="line">chmod -R ug+rwx storage bootstrap/cache</span><br></pre></td></tr></table></figure><p>之后访问 http:&#x2F;&#x2F;[你的 IP 地址]:2333&#x2F; 就可以看到你的项目辣，项目部署到此结束</p>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 同时推送本地代码到远端 2 个仓库</title>
      <link href="/2023/07/06/58.%20git%20%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%9C%E7%AB%AF%202%20%E4%B8%AA%E4%BB%93%E5%BA%93/"/>
      <url>/2023/07/06/58.%20git%20%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%9C%E7%AB%AF%202%20%E4%B8%AA%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>本地代码执行如下命令，可将代码同时提交到 github 和 coding 两个平台：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &quot;初始化项目&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:NightingaleWK/jiepade.git</span><br><span class="line">git remote set-url --add origin git@e.coding.net:nightingalewk/jiepade/v1.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>（更新中）将 homestead 中的项目迁移到 laravel sail 中进行开发</title>
      <link href="/2023/05/09/56.%20%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%E5%B0%86%20homestead%20%E4%B8%AD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0%20laravel%20sail%20%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/"/>
      <url>/2023/05/09/56.%20%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%E5%B0%86%20homestead%20%E4%B8%AD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0%20laravel%20sail%20%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>本文的目的是：将原本跑 homestead 环境下的 laravel 项目，迁移到官方最新推荐的 laravel sail 开发环境中。下面我分享一下我的操作方法。</p><p>在文章开始之前，我们默认大家均已拥有一个 homestead 开发环境，且你也是在其之上本地开发多次的开发者，而且你的需求是将你的 homestead 开发环境转换成 laravel sail，希望借助 docker 技术来提升系统的</p><h2 id="1-项目克隆"><a href="#1-项目克隆" class="headerlink" title="1. 项目克隆"></a>1. 项目克隆</h2><p>首先我们你将线上仓库的代码clone到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:NightingaleWK/larabbs.git larabbs</span><br></pre></td></tr></table></figure><p>然后我们启动 homestead ，并在 homestead 的 linux 环境中执行接下来的工作。</p><p>我们先来到项目根目录复制一份 .env 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp .env.example .env</span><br><span class="line"></span><br><span class="line">vim .env</span><br><span class="line"></span><br><span class="line">// 编辑一下 .env 文件并保存</span><br></pre></td></tr></table></figure><h2 id="2-项目改造"><a href="#2-项目改造" class="headerlink" title="2. 项目改造"></a>2. 项目改造</h2><p>然后在已运行的应用中安装 Composer 依赖，以下指令执行后，其余未安装的以来也将一并安装，毕竟我们没有执行过 composer i 嘛</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require laravel/sail --dev</span><br></pre></td></tr></table></figure><p>在 Sail 完成安装后，你可以运行 Artisan 命令 sail:install。这个命令将会发布 Sail 的 docker-compose.yml 文件到你应用程序的根目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan sail:install --with=mysql,redis</span><br></pre></td></tr></table></figure><p>以上这一步的执行可能会花费很长时间，网上有很多修改相关配置的来提高速度，大家可以自己搜索，至于为什么我不用，那就是希望追求纯粹正统，composer 阿里云的源与官方源完全跟不上，composer u 执行完简直是反向升级，以后再也不相信国内的源了。</p><p>然后我再说一下 with 后面的该怎么填写，你可以尝试执行不带 with 的命令，可以看到几个可选的选项，这些就是填写在 with 后面的内容，按需选择安装即可。</p><p>上述步骤安装完毕会系统会提示 Sail build successful. 这就代表着这一阶段任务完成</p><p>然后我们把项目推送到线上仓库</p><h2 id="3-代码上传"><a href="#3-代码上传" class="headerlink" title="3. 代码上传"></a>3. 代码上传</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m &quot;ready for docker&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="4-代码部署"><a href="#4-代码部署" class="headerlink" title="4. 代码部署"></a>4. 代码部署</h2><p>然后我们回到我们的sail环境中，把最新的项目代码从仓库拉下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:NightingaleWK/larabbs.git larabbs</span><br></pre></td></tr></table></figure><p>之后我们也是重新配置 .env 文件</p><p>然后我们执行 composer 命令，安装在 sail 环境下的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">    -u &quot;$(id -u):$(id -g)&quot; \</span><br><span class="line">    -v &quot;$(pwd):/var/www/html&quot; \</span><br><span class="line">    -w /var/www/html \</span><br><span class="line">    laravelsail/php82-composer:latest \</span><br><span class="line">    composer install --ignore-platform-reqs</span><br></pre></td></tr></table></figure><p>这里与在 homestead 中不同的是，我们 sail 环境不包括 composer 命令，这个命令使用一个包含 PHP 与 Composer 的小型 Docker 容器进行应用程序依赖的安装。</p><p>当你使用 laravelsail&#x2F;phpXX-composer 镜像时，你应该选择和你的应用程序所用环境相同的 PHP 版本（74、80、81 或 82）。</p><h2 id="5-环境运行"><a href="#5-环境运行" class="headerlink" title="5. 环境运行"></a>5. 环境运行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sail up -d</span><br><span class="line"></span><br><span class="line">// -d 表示后台运行，去掉那就是前台运行，需要 ctrl + c 来结束。加入带着 -d，那么我们退出的话则需要输入 sail down 来结束</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> homestead </tag>
            
            <tag> laravel sail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 .gitignore 无效的问题</title>
      <link href="/2023/03/28/55.%20%E8%A7%A3%E5%86%B3%20.gitignore%20%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/03/28/55.%20%E8%A7%A3%E5%86%B3%20.gitignore%20%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>首先确定好需要忽略的文件或文件夹，并加入到 .gitignore 中，然后执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;update .gitignore&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>若你的另一台机子也需要更新代码，那么他在 git pull 的时候，.gitignore 中你刚才添加的文件和文件夹都会删除，记得重新生成或新建上。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>皮蛋瘦肉粥</title>
      <link href="/2023/01/04/54.%20%E7%9A%AE%E8%9B%8B%E7%98%A6%E8%82%89%E7%B2%A5/"/>
      <url>/2023/01/04/54.%20%E7%9A%AE%E8%9B%8B%E7%98%A6%E8%82%89%E7%B2%A5/</url>
      
        <content type="html"><![CDATA[<ol><li>200克大米（也可糯米大米各100克），淘米洗净，然后重新加入清水500克，浸泡5小时，浸泡完毕后倒掉水</li><li>里脊肉50g切丝、皮蛋一个捏碎或切丁、料酒2g、盐6g、鸡精3g、味精3g、食用碱0.5g</li><li>用上方的盐、料酒腌制一下肉丝。</li><li>砂锅倒入食用碱、盐、2000g热水（米，热水 &#x3D; 1：10），开大火烧开，转小火熬25分钟。期间不停搅动，以防止糊锅</li><li>快开锅的时候加入肉丝、皮蛋丁、味精、鸡精。然后可自行加点别的，比如姜丝、葱末</li><li>出锅</li></ol>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 粥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地道黄焖鸡</title>
      <link href="/2022/12/20/53.%20%E5%9C%B0%E9%81%93%E9%BB%84%E7%84%96%E9%B8%A1/"/>
      <url>/2022/12/20/53.%20%E5%9C%B0%E9%81%93%E9%BB%84%E7%84%96%E9%B8%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="原料"><a href="#原料" class="headerlink" title="原料"></a>原料</h2><p>1.5 斤鸡腿<br>土豆切块<br>杭椒辣椒等切块</p><h2 id="调味"><a href="#调味" class="headerlink" title="调味"></a>调味</h2><p>耗油15克<br>海鲜酱20克<br>黄豆酱15克<br>葱伴侣大酱15克<br>东古一品鲜酱油25克<br>红烧酱油5克</p><h2 id="腌制"><a href="#腌制" class="headerlink" title="腌制"></a>腌制</h2><p>葱姜料酒去腥，加酱料，搅匀，腌制半小时</p><h2 id="中药"><a href="#中药" class="headerlink" title="中药"></a>中药</h2><p>八角三克，桂皮五克，香叶一克，小茴香两克，白芷三克，花椒三克，草果皮一个去籽，装包里，冲洗3次</p><h2 id="灵魂"><a href="#灵魂" class="headerlink" title="灵魂"></a>灵魂</h2><p>干香菇六颗洗净，加开水300g，制香菇水，这是黄焖鸡的灵魂</p><h2 id="烹饪"><a href="#烹饪" class="headerlink" title="烹饪"></a>烹饪</h2><p>锅中加黄焖鸡，香菇水，五克鸡精，三克味精，五克白糖，下料包，高压锅封盖，上汽后计时5分钟，之后再焖 20 分钟。砂锅放香菇，土豆块，烧开，放青红椒，收汁，撒香葱和香菜</p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 特色小吃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发起 laravel 队列任务不生效</title>
      <link href="/2022/12/14/52.%20%E5%8F%91%E8%B5%B7%20laravel%20%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88/"/>
      <url>/2022/12/14/52.%20%E5%8F%91%E8%B5%B7%20laravel%20%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88/</url>
      
        <content type="html"><![CDATA[<p>当确定你的代码都没问题，而且队列都在运行，而且是你变动了 job 文件，那很有可能是缓存原因导致的，清理一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan cache:clear &amp;&amp; php artisan config:clear &amp;&amp; php artisan route:clear &amp;&amp; php artisan view:clear</span><br></pre></td></tr></table></figure><p>若是在 laravel sail 开发环境中，修改一下即可使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sail artisan cache:clear &amp;&amp; sail artisan config:clear &amp;&amp; sail artisan route:clear &amp;&amp; sail artisan view:clear</span><br></pre></td></tr></table></figure><p>花式清理后就好了</p>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
            <tag> 队列 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 laravel 中使用 redis 队列</title>
      <link href="/2022/12/09/51.%20%E5%9C%A8%20laravel%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20redis%20%E9%98%9F%E5%88%97/"/>
      <url>/2022/12/09/51.%20%E5%9C%A8%20laravel%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20redis%20%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>我们实现的效果为：将一些业务逻辑转化为任务（job），然后启用队列功能，而且是 redis 的队列，同时使用 laravel 官方扩展 Horizon 实现队列的监控。将复杂耗时的工作后台处理，提高前台用户的使用体验。</p><h2 id="1-安装-redis"><a href="#1-安装-redis" class="headerlink" title="1. 安装 redis"></a>1. 安装 redis</h2><p>注意不要使用国内 composer 源，官方的是最全最新的（什么阿里云镜像源反向升级了解一下）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require predis/predis</span><br></pre></td></tr></table></figure><p>修改环境变量 QUEUE_CONNECTION 的值为 redis，并指定我们将使用 predis 作为请求 Redis 的类库：</p><p>.env</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">QUEUE_CONNECTION=redis</span><br><span class="line">REDIS_CLIENT=predis</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><h2 id="2-生成任务类"><a href="#2-生成任务类" class="headerlink" title="2. 生成任务类"></a>2. 生成任务类</h2><p>使用以下 Artisan 命令来生成一个新的队列任务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan make:job EnterpriseExport</span><br></pre></td></tr></table></figure><p>该命令会在 app&#x2F;Jobs 目录下生成一个新的类：</p><p>app&#x2F;Jobs&#x2F;EnterpriseExport.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Jobs;</span><br><span class="line"></span><br><span class="line">use App\Admin\Controllers\Api\StaticFun;</span><br><span class="line">use App\Models\Asset;</span><br><span class="line">use Illuminate\Bus\Queueable;</span><br><span class="line">use Illuminate\Contracts\Queue\ShouldBeUnique;</span><br><span class="line">use Illuminate\Contracts\Queue\ShouldQueue;</span><br><span class="line">use Illuminate\Foundation\Bus\Dispatchable;</span><br><span class="line">use Illuminate\Queue\InteractsWithQueue;</span><br><span class="line">use Illuminate\Queue\SerializesModels;</span><br><span class="line">use Illuminate\Support\Facades\DB;</span><br><span class="line"></span><br><span class="line">class GetAssetsRemainDate implements ShouldQueue, ShouldBeUnique</span><br><span class="line">&#123;</span><br><span class="line">    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create a new job instance.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        //</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Execute the job.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function handle()</span><br><span class="line">    &#123;</span><br><span class="line">        // 拿到全部资产信息</span><br><span class="line">        $assets = Asset::all();</span><br><span class="line"></span><br><span class="line">        // 开始循环计算资产剩余质保时间并更新</span><br><span class="line">        foreach ($assets as $key =&gt; $value) &#123;</span><br><span class="line">            // 计算</span><br><span class="line">            $warranty_info = StaticFun::get2DateInfo($value-&gt;warranty_start, $value-&gt;warranty_end);</span><br><span class="line">            // 拿取</span><br><span class="line">            $warranty_remain = $warranty_info[&#x27;warranty_remain&#x27;];</span><br><span class="line">            // 更新写入</span><br><span class="line">            DB::table(&#x27;asset&#x27;)-&gt;where(&#x27;id&#x27;, $value-&gt;id)-&gt;update([&#x27;warranty_remain&#x27; =&gt; $warranty_remain]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有一点需要注意，我们将会在模型监控器中分发任务，任务中要避免使用 Eloquent 模型接口调用，如：create(), update(), save() 等操作。否则会陷入调用死循环 —— 模型监控器分发任务，任务触发模型监控器，模型监控器再次分发任务，任务再次触发模型监控器… 死循环。在这种情况下，使用 DB 类直接对数据库进行操作即可。</p><h2 id="3-任务分发"><a href="#3-任务分发" class="headerlink" title="3. 任务分发"></a>3. 任务分发</h2><p>前往控制器或者观察者，去插入这项任务。</p><p>SettingController.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">class SettingController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    // 展示</span><br><span class="line">    public function index(Content $content)</span><br><span class="line">    &#123;</span><br><span class="line">        return $content</span><br><span class="line">            -&gt;header(&#x27;系统设置&#x27;)</span><br><span class="line">            -&gt;description(&#x27;亲自参与到系统的个性化管理&#x27;)</span><br><span class="line">            -&gt;body(function (Row $row) &#123;</span><br><span class="line">                $row-&gt;column(12, Setting::index());</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 刷新资产质保剩余时间</span><br><span class="line">    public function warrantyRefresh()</span><br><span class="line">    &#123;</span><br><span class="line">        dispatch(new GetAssetsRemainDate);  &lt;-- HERE</span><br><span class="line"></span><br><span class="line">        return redirect(&#x27;/admin/setting&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><h2 id="4-安装-Horizon"><a href="#4-安装-Horizon" class="headerlink" title="4. 安装 Horizon"></a>4. 安装 Horizon</h2><p>使用 Composer 安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ composer require laravel/horizon</span><br></pre></td></tr></table></figure><p>安装完成后，使用 vendor:publish Artisan 命令发布相关文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan vendor:publish --provider=&quot;laravel\Horizon\HorizonServiceProvider&quot;</span><br></pre></td></tr></table></figure><p>分别是配置文件 config&#x2F;horizon.php 和存放在 public&#x2F;vendor&#x2F;horizon 文件夹中的 CSS 、JS 等页面资源文件。</p><p>Horizon 是一个监控程序，需要常驻运行，我们可以通过以下命令启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan horizon</span><br></pre></td></tr></table></figure><p>至此安装完毕，浏览器打开 larabbs.test&#x2F;horizon 访问控制台</p><h2 id="5-安装-Supervisor"><a href="#5-安装-Supervisor" class="headerlink" title="5. 安装 Supervisor"></a>5. 安装 Supervisor</h2><p>Supervisor 是一个用于 Linux 操作系统的进程监视器。如果 Horizon 进程被退出或终止，Supervisor 将自动重启你的 Horizon 进程。如果要在 Ubuntu 上安装 Supervisor，你可以使用以下命令。如果你不使用 Ubuntu，也可以使用操作系统的包管理器安装 Supervisor：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install supervisor</span><br></pre></td></tr></table></figure><h2 id="6-配置-Supervisor"><a href="#6-配置-Supervisor" class="headerlink" title="6. 配置 Supervisor"></a>6. 配置 Supervisor</h2><p>Supervisor 配置文件通常存储在 &#x2F;etc&#x2F;supervisor&#x2F;conf.d 目录下。在此目录中，你可以创建任意数量的配置文件，这些配置文件会告诉 supervisor 如何监视你的进程。例如，让我们创建一个 horizon.conf 文件，它启动并监视一个 horizon 进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[program:horizon]</span><br><span class="line">process_name=%(program_name)s</span><br><span class="line">directory=/data/wwwroot/yanji.wkarrow.top</span><br><span class="line">command=/usr/local/php/bin/php artisan horizon</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=root</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout_logfile=/data/wwwroot/yanji.wkarrow.top/horizon.log</span><br><span class="line">stopwaitsecs=3600</span><br></pre></td></tr></table></figure><p>注意：要确保 stopwaitsecs 的值大于运行时间最长的任务所消耗的秒数。否则，Supervisor 可能会在工作完成前终止任务。<br>注意：编辑文件之前，请使用 root 权限进行操作，否则无法保存（针对 homestead 环境下的操作）</p><h2 id="7-启动-Supervisor"><a href="#7-启动-Supervisor" class="headerlink" title="7. 启动 Supervisor"></a>7. 启动 Supervisor</h2><p>在将新代码部署到服务器时，你需要终止 Horizon 主进程，以便进程监视器重新启动它并接收代码的更改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan horizon:terminate</span><br></pre></td></tr></table></figure><p>创建了配置文件后，可以使用以下命令更新 Supervisor 配置并启动进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo supervisorctl reread</span><br><span class="line"></span><br><span class="line">sudo supervisorctl update</span><br><span class="line"></span><br><span class="line">sudo supervisorctl start horizon</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>又一次更换博客系统辣</title>
      <link href="/2022/11/24/50.%20%E5%8F%88%E4%B8%80%E6%AC%A1%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E8%BE%A3/"/>
      <url>/2022/11/24/50.%20%E5%8F%88%E4%B8%80%E6%AC%A1%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E8%BE%A3/</url>
      
        <content type="html"><![CDATA[<p>当你看到这个文章的时候，我已经从 hexo 换回到 typecho 了，最近发现作者开始更新，版本到 1.2.0 ，普大喜奔🫡</p><p>我花了点时间把之前的博客迁移到了 typecho，以后就用它啦</p><p>另外，最近抢了一台腾讯云的轻量云服务器，333元3年，2C2G 配置，感觉完全可以做本站及其其他博客站等需要长期部署不太动的东西，所以借此机会把我的站点搬到新服务器上，原来的老服务器性能更好，我等给他重装一下，专用于部署自己的测试商业项目，实现了个人生活与工作需要的服务器分离。</p><p>哦对了，新房子现在家具都到了，最近收拾一下，跑跑味，结一下尾，明年小家电一买，哎嘿，我和我对象就以火箭般的速度光速入住我的小窝</p><p>总之就是好耶！</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel blade 简明示例</title>
      <link href="/2022/11/24/49.%20laravel%20blade%20%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/"/>
      <url>/2022/11/24/49.%20laravel%20blade%20%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>简单捯饬一下 laravel 的 blade 使用方法</p><span id="more"></span><p>总之就是，主页面可用：</p><ol><li><code>@yield(&#39;content&#39;)</code> 表示这里后面子页面可以用 <code>@section(&#39;content&#39;) xxxx @endsection</code> 调用；</li><li><code>@include(&#39;layouts._header&#39;)</code> 表示我引用其他的 blade 页面模块到这里。</li></ol><p>子页面可以用：</p><ol><li><code>@extends(&#39;layouts.app&#39;)</code> 表示我要使用这个 blade 模板页面，并在后面对模板传参；</li><li><code>@section(&#39;title&#39;, $user-&gt;name . &#39; 的个人中心&#39;)</code> 表示子页面对 <code>app.blade.php</code> 的一个叫 title 的 yield 传递参数。</li></ol><p>具体代码示例如下：</p><p>主页面 <code>app.balde.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;&#123;&#123; str_replace(&#x27;_&#x27;, &#x27;-&#x27;, app()-&gt;getLocale()) &#125;&#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compuiatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;@yield(&#x27;title&#x27;, &#x27;LaraBBS&#x27;) - laravel 进阶教程&lt;/title&gt;</span><br><span class="line">    &lt;!-- CSRF Token --&gt;</span><br><span class="line">    &lt;meta name=&quot;csrf-token&quot; content=&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;!-- CSS / JS --&gt;</span><br><span class="line">    @vite([&#x27;resources/js/app.js&#x27;])</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot; class=&quot;&#123;&#123; route_class() &#125;&#125;-page&quot;&gt;</span><br><span class="line">        @include(&#x27;layouts._header&#x27;)</span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">            @include(&#x27;shared._messages&#x27;)</span><br><span class="line">            @yield(&#x27;content&#x27;)</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        @include(&#x27;layouts._footer&#x27;)</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>子页面 <code>show.blade.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@extends(&#x27;layouts.app&#x27;)</span><br><span class="line"></span><br><span class="line">@section(&#x27;title&#x27;, $user-&gt;name . &#x27; 的个人中心&#x27;)</span><br><span class="line"></span><br><span class="line">@section(&#x27;content&#x27;)</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;col-lg-3 col-md-3 hidden-sm hidden-xs user-info&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;card &quot;&gt;</span><br><span class="line">                &lt;img class=&quot;card-img-top&quot;</span><br><span class="line">                    src=&quot;https://cdn.learnku.com/uploads/images/201709/20/1/PtDKbASVcz.png?imageView2/1/w/600/h/600&quot;</span><br><span class="line">                    alt=&quot;&#123;&#123; $user-&gt;name &#125;&#125;&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;h5&gt;&lt;strong&gt;个人简介&lt;/strong&gt;&lt;/h5&gt;</span><br><span class="line">                    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. &lt;/p&gt;</span><br><span class="line">                    &lt;hr&gt;</span><br><span class="line">                    &lt;h5&gt;&lt;strong&gt;注册于&lt;/strong&gt;&lt;/h5&gt;</span><br><span class="line">                    &lt;p&gt;January 01 1901&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col-lg-9 col-md-9 col-sm-12 col-xs-12&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;card &quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;h1 class=&quot;mb-0&quot; style=&quot;font-size:22px;&quot;&gt;&#123;&#123; $user-&gt;name &#125;&#125; &lt;small&gt;&#123;&#123; $user-&gt;email &#125;&#125;&lt;/small&gt;&lt;/h1&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">            &#123;&#123;-- 用户发布的内容 --&#125;&#125;</span><br><span class="line">            &lt;div class=&quot;card &quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    暂无数据 ~_~</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">@stop</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blade </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 事件系统简明示例</title>
      <link href="/2022/11/24/48.%20laravel%20%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/"/>
      <url>/2022/11/24/48.%20laravel%20%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>简单对 laravel 事件系统做一些说明</p><span id="more"></span><p>laravel 的事件提供了一个简单的观察者实现，能够订阅和监听应用中发生的各种事件。事件类保存在 app&#x2F;Events 目录中，而这些事件的的监听器则被保存在 app&#x2F;Listeners 目录下。这些目录只有当你使用 Artisan 命令来生成事件和监听器时才会被自动创建。</p><p>事件机制是一种很好的应用解耦方式，因为一个事件可以拥有多个互不依赖的监听器。例如，如果你希望每次订单发货时向用户发送一个 Slack 通知。你可以简单地发起一个 OrderShipped 事件，让监听器接收之后转化成一个 Slack 通知，这样你就可以不用把订单的业务代码跟 Slack 通知的代码耦合在一起了。</p><h2 id="生成一个事件类"><a href="#生成一个事件类" class="headerlink" title="生成一个事件类"></a>生成一个事件类</h2><p>比如通过 artisan 命令生成一个 UserLogin 事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:event UserLogin</span><br></pre></td></tr></table></figure><p>在 app&#x2F;Events 中就会自动生成一个 UserLogin.php 文件，内容不多，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Events;</span><br><span class="line"></span><br><span class="line">use Illuminate\Broadcasting\Channel;</span><br><span class="line">use Illuminate\Queue\SerializesModels;</span><br><span class="line">use Illuminate\Broadcasting\PrivateChannel;</span><br><span class="line">use Illuminate\Broadcasting\PresenceChannel;</span><br><span class="line">use Illuminate\Broadcasting\InteractsWithSockets;</span><br><span class="line">use Illuminate\Contracts\Broadcasting\ShouldBroadcast;</span><br><span class="line"></span><br><span class="line">class UserLogin</span><br><span class="line">&#123;</span><br><span class="line">    use InteractsWithSockets, SerializesModels;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create a new event instance.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        //</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get the channels the event should broadcast on.</span><br><span class="line">     *</span><br><span class="line">     * @return Channel|array</span><br><span class="line">     */</span><br><span class="line">    public function broadcastOn()</span><br><span class="line">    &#123;</span><br><span class="line">        return new PrivateChannel(&#x27;channel-name&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义监听器"><a href="#定义监听器" class="headerlink" title="定义监听器"></a>定义监听器</h2><p>一个事件可以被一个或多个监听器监听，也就是观察者模式，我们可以定义多个监听器，当这个事件发生，执行一系列逻辑。</p><p>在 EventServiceProvider 的 $listen 中可以定义事件和监听器，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">protected $listen = [</span><br><span class="line">    &#x27;App\Events\UserLogin&#x27; =&gt; [</span><br><span class="line">        &#x27;App\Lisenter\DoSomething1&#x27;,</span><br><span class="line">        &#x27;App\Lisenter\Dosomething2&#x27;,</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>然后执行 artisan 命令，就可以自动在 app&#x2F;Lisenter 目录生成监听器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan event::generate</span><br></pre></td></tr></table></figure><p>可以看到 app&#x2F;Lisenter 目录多了 DoSomething1.php 和 DoSomething2.php 两个文件，我们看看其中一个内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Lisenter;</span><br><span class="line"></span><br><span class="line">use App\Events\UserLogin;</span><br><span class="line">use Illuminate\Queue\InteractsWithQueue;</span><br><span class="line">use Illuminate\Contracts\Queue\ShouldQueue;</span><br><span class="line"></span><br><span class="line">class DoSomething1</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Create the event listener.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        //</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Handle the event.</span><br><span class="line">     *</span><br><span class="line">     * @param  UserLogin  $event</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function handle(UserLogin $event)</span><br><span class="line">    &#123;</span><br><span class="line">        info(&#x27;do something1&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个监听器的 handle 方法中我们打印一个日志来测试一下，如代码 handle 方法所示。</p><h2 id="分发和触发事件"><a href="#分发和触发事件" class="headerlink" title="分发和触发事件"></a>分发和触发事件</h2><p>我们在某个控制器的方法中来分发事件，也就是触发事件，看监听器是否正常工作。</p><p>就是一句话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event(new UserLogin());</span><br></pre></td></tr></table></figure><p>然后我们请求这个控制器，观察日志，发现打印了日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[2018-06-17 10:04:29] local.INFO: do something1</span><br><span class="line">[2018-06-17 10:04:29] local.INFO: do something2</span><br></pre></td></tr></table></figure><p>那么这个事件 - 监听机制就正常工作了。</p><h1 id="队列异步处理"><a href="#队列异步处理" class="headerlink" title="队列异步处理"></a>队列异步处理</h1><p>如果某个监听器需要执行的操作比较慢，可以放到消息队列进行异步处理。</p><p>比如把上面的 DoSomething1 改成需要放入队列的，只需要 implements ShoulQueue 接口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class DoSomething1 implements ShouldQueue</span><br></pre></td></tr></table></figure><p>也可以指定队列驱动，如下代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 任务应该发送到的队列的连接的名称</span><br><span class="line"> *</span><br><span class="line"> * @var string|null</span><br><span class="line"> */</span><br><span class="line">public $connection = &#x27;redis&#x27;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 任务应该发送到的队列的名称</span><br><span class="line"> *</span><br><span class="line"> * @var string|null</span><br><span class="line"> */</span><br><span class="line">public $queue = &#x27;listeners&#x27;;</span><br></pre></td></tr></table></figure><p>我们再次执行控制器方法。</p><p>日志里没有打印 do something1，只有 do something2，但是在 redis 队列里发现了一个名为 queues:default 的列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;job&quot;:&quot;Illuminate\\Events\\CallQueuedHandler@call&quot;,&quot;data&quot;:&#123;&quot;class&quot;:&quot;App\\Listener\\DoSomething1&quot;,&quot;method&quot;:&quot;handle&quot;,&quot;data&quot;:&quot;a:1:&#123;i:0;O:20:\&quot;App\\Events\\UserLogin\&quot;:1:&#123;s:6:\&quot;socket\&quot;;N;&#125;&#125;&quot;&#125;,&quot;id&quot;:&quot;3D7VDUwueYGtUvsazicWsifwWQxnnLID&quot;,&quot;attempts&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>这个时候需要使用 php artisan queue:work 执行队列任务，才是真正执行 DoSomething1 这个监听器的 handle 方法。</p>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>检测服务端口的方法</title>
      <link href="/2022/11/24/46.%20%E6%A3%80%E6%B5%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%A3%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2022/11/24/46.%20%E6%A3%80%E6%B5%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%A3%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>通过以下方法，可查询 win 或 linux 系统中各种服务的端口是多少，方便加入到 zabbix 监管平台中</p><h2 id="1-Linux-系统"><a href="#1-Linux-系统" class="headerlink" title="1. Linux 系统"></a>1. Linux 系统</h2><h3 id="1-1-查询-etc-services-找端口"><a href="#1-1-查询-etc-services-找端口" class="headerlink" title="1.1 查询 &#x2F;etc&#x2F;services 找端口"></a>1.1 查询 &#x2F;etc&#x2F;services 找端口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/services | grep postgres</span><br><span class="line"> </span><br><span class="line">postgres 5432/tcp postgresql # POSTGRES</span><br><span class="line"> </span><br><span class="line">postgres 5432/udp postgresql # POSTGRES</span><br></pre></td></tr></table></figure><p>注意：如果用户没有配置services的话，这个方法就无效。</p><h3 id="1-2-netstat-命令查看"><a href="#1-2-netstat-命令查看" class="headerlink" title="1.2 netstat 命令查看"></a>1.2 netstat 命令查看</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># netstat -a | grep PGSQL</span><br><span class="line"> </span><br><span class="line">unix 2 [ ACC ] STREAM LISTENING 12693978 /tmp/.s.PGSQL.5432</span><br></pre></td></tr></table></figure><h2 id="2-Windows-系统"><a href="#2-Windows-系统" class="headerlink" title="2. Windows 系统"></a>2. Windows 系统</h2><p>待补充</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 端口查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 表单请求验证简明示例</title>
      <link href="/2022/11/24/47.%20laravel%20%E8%A1%A8%E5%8D%95%E8%AF%B7%E6%B1%82%E9%AA%8C%E8%AF%81%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/"/>
      <url>/2022/11/24/47.%20laravel%20%E8%A1%A8%E5%8D%95%E8%AF%B7%E6%B1%82%E9%AA%8C%E8%AF%81%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>简单写一下 laravel 表单请求验证使用方法</p><span id="more"></span><p>示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">use App\Http\Requests\UserRequest;</span><br><span class="line"></span><br><span class="line">class UsersController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line"></span><br><span class="line">    public function update(UserRequest $request, User $user)</span><br><span class="line">    &#123;</span><br><span class="line">        $user-&gt;update($request-&gt;all());</span><br><span class="line">        return redirect()-&gt;route(&#x27;users.show&#x27;, $user-&gt;id)-&gt;with(&#x27;success&#x27;, &#x27;个人资料更新成功！&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实我们将 update 方法中传的第一个参，从 Request 改成 UserRequest 就可以了，系统会在一开始就开始验证，过了再继续之后的步骤。而在此之前，我们需要生成表单请求验证：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:request UserRequest</span><br></pre></td></tr></table></figure><p>之后我们就可以去修改这个 UserRequest 文件了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http\Requests;</span><br><span class="line"></span><br><span class="line">use Illuminate\Foundation\Http\FormRequest;</span><br><span class="line">use Illuminate\Support\Facades\Auth;</span><br><span class="line"></span><br><span class="line">class UserRequest extends FormRequest</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Determine if the user is authorized to make this request.</span><br><span class="line">     *</span><br><span class="line">     * @return bool</span><br><span class="line">     */</span><br><span class="line">    public function authorize()</span><br><span class="line">    &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get the validation rules that apply to the request.</span><br><span class="line">     *</span><br><span class="line">     * @return array&lt;string, mixed&gt;</span><br><span class="line">     */</span><br><span class="line">    public function rules()</span><br><span class="line">    &#123;</span><br><span class="line">        return [</span><br><span class="line">            &#x27;name&#x27; =&gt; &#x27;required|between:3,25|regex:/^[A-Za-z0-9\-\_]+$/|unique:users,name,&#x27; . Auth::id(),</span><br><span class="line">            &#x27;email&#x27; =&gt; &#x27;required|email&#x27;,</span><br><span class="line">            &#x27;introduction&#x27; =&gt; &#x27;max:80&#x27;,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function messages()</span><br><span class="line">    &#123;</span><br><span class="line">        return [</span><br><span class="line">            &#x27;name.unique&#x27; =&gt; &#x27;用户名已被占用，请重新填写&#x27;,</span><br><span class="line">            &#x27;name.regex&#x27; =&gt; &#x27;用户名只支持英文、数字、横杠和下划线。&#x27;,</span><br><span class="line">            &#x27;name.between&#x27; =&gt; &#x27;用户名必须介于 3 - 25 个字符之间。&#x27;,</span><br><span class="line">            &#x27;name.required&#x27; =&gt; &#x27;用户名不能为空。&#x27;,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 表单验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 swap 占用过高的问题</title>
      <link href="/2022/09/15/45.%20%E8%A7%A3%E5%86%B3%20swap%20%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/09/15/45.%20%E8%A7%A3%E5%86%B3%20swap%20%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>公司某项目有 2 个机子的 swap 占满了，监控他们的 zabbix 平台一直提示高占用，于是开始着手解决一下这个问题。</p><p>首先我们释放 swap 存储的文件导内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Swapoff –a</span><br></pre></td></tr></table></figure><p>接下来我们将需要新建一个更大的swap交换空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /var</span><br><span class="line">sudo mkdir swap</span><br><span class="line">sudo dd if=/dev/zero of=swapfile bs=1024 count=4000000</span><br><span class="line">sudo mkswap swapfile</span><br></pre></td></tr></table></figure><p>之后添加自动挂载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/fstab</span><br><span class="line"></span><br><span class="line">最后添加如下信息</span><br><span class="line"></span><br><span class="line">/var/swapfile   swap  swap  defaults  0  0</span><br></pre></td></tr></table></figure><p>至此操作结束</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sshpass 中使用 awk 的坑</title>
      <link href="/2022/08/30/43.%20sshpass%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20awk%20%E7%9A%84%E5%9D%91/"/>
      <url>/2022/08/30/43.%20sshpass%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20awk%20%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>之前在使用ssh远程执行命令，当使用到awk的时候总是报错，而sed和grep都没有问题，以为awk不支持远程执行。最近经过测试找到了解决此问题的方法。</p><p>最近编写公司项目的自动化运维脚本的时候，想在 sshpass 中使用 awk，本机上直接执行无问题，但是在 sshpass 下却一直报语法错误，其原因并非两者不兼容，而是语法问题。</p><span id="more"></span><p>原语句：<code>free -m | sed -n &#39;2p&#39; | awk &#39;&#123;print &quot;Mem used is &quot;$3/$2*100&#125;&#39;</code></p><p>想在 sshpass 中执行正确，就应该把 <code>&amp;</code> 转义，在其前面加上 <code>\</code> 即可，最终结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sshpass -p Password ssh root@192.168.1.1 &quot;free -m | sed -n &#x27;2p&#x27; | awk &#x27;&#123;print &quot;Mem used is &quot;\$3/\$2*100&#125;&#x27;&quot; &gt;&gt;test.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sshppass </tag>
            
            <tag> awk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 net time 实现内网时间同步</title>
      <link href="/2022/08/30/44.%20%E4%BD%BF%E7%94%A8%20net%20time%20%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/"/>
      <url>/2022/08/30/44.%20%E4%BD%BF%E7%94%A8%20net%20time%20%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<p>公司某项目有 8 个 windows 7 工控机，这些机子经常时间彼此不统一，我计划让他们定期同步数据中心的一台服务器的时间，做到彼此之间的时间统一</p><span id="more"></span><h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><p>首先，能用 ntp 最好，当然，在这种环境下我们的工控机 ping 不到数据中心的 ntp 服务器，那么我们退而求其次，同步一台可以使用 ntp 保证时间一致的服务器上的时间，也算是间接解决这个问题了，我们叫这台服务器为 A，工控机为 B。</p><h2 id="二、具体流程"><a href="#二、具体流程" class="headerlink" title="二、具体流程"></a>二、具体流程</h2><p>首先我们保障 B 能 ping 通 A ，网能通是一切的前提。</p><p>然后我们在 B 上用管理员方式打开 CMD，首先用 <code>net use</code> 建立于 A 的连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net use \\10.1.112.99 &quot;password&quot; /user:&quot;admin&quot;</span><br></pre></td></tr></table></figure><p>IP 换成那个 A 主机的，账号密码也是 A 的</p><p>至此我们建立了与 A 的连接，之后我们就可以使用 <code>net time</code> 来同步时间，具体为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net time \\10.1.112.99 /set /y</span><br></pre></td></tr></table></figure><p>至此时间就同步好了，我们把这个两行指令加入计划任务，即可实现定时执行。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> net time </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 GIT 中 使用 GPG 签名</title>
      <link href="/2022/07/26/42.%20%E5%9C%A8%20GIT%20%E4%B8%AD%20%E4%BD%BF%E7%94%A8%20GPG%20%E7%AD%BE%E5%90%8D/"/>
      <url>/2022/07/26/42.%20%E5%9C%A8%20GIT%20%E4%B8%AD%20%E4%BD%BF%E7%94%A8%20GPG%20%E7%AD%BE%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p>本文将介绍如何在 coding 中使用 GPG 签名加密你的每次 commit，来保证代码提交的真实性</p><span id="more"></span><h2 id="1-电脑安装-GPG-组件"><a href="#1-电脑安装-GPG-组件" class="headerlink" title="1. 电脑安装 GPG 组件"></a>1. 电脑安装 GPG 组件</h2><p>这里我选择的是 gpg4win ，直接去官网下载安装即可</p><h2 id="2-新建密钥对"><a href="#2-新建密钥对" class="headerlink" title="2. 新建密钥对"></a>2. 新建密钥对</h2><p>新建一个密钥对，填写你的姓名和邮箱，这里的邮箱填写的是你 coding 的邮箱，一路下一步即可</p><h2 id="3-配置-gpg-信息到-coding-中"><a href="#3-配置-gpg-信息到-coding-中" class="headerlink" title="3. 配置 gpg 信息到 coding 中"></a>3. 配置 gpg 信息到 coding 中</h2><p>转到项目上，打开终端，首先确认私钥代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --list-secret-keys --keyid-format LONG &quot;your_email&quot;</span><br></pre></td></tr></table></figure><p>复制以 sec 开头的 GPG 密钥 ID。以下示例中，复制 4AEA00A342C24CA3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sec   ed25519/4AEA00A342C24CA3 2021-09-14 [SC]</span><br><span class="line">      6DE3507E82DEB6E8828FAAC34AEA00A342C24BD4</span><br><span class="line">uid                 [ 绝对 ] your_name &quot;your_email&quot;</span><br><span class="line">ssb   cv25519/812B586FD245B560 2021-09-14 [E]</span><br></pre></td></tr></table></figure><p>利用复制的 ID 导出该 ID 的公钥（以上述 ID 为例）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --armor --export 4AEA00A342C24CA3</span><br></pre></td></tr></table></figure><p>生成公钥之后，可将其添加至你的 CODING 账户。</p><h2 id="4-配置-gpg-信息到本地-git-中"><a href="#4-配置-gpg-信息到本地-git-中" class="headerlink" title="4. 配置 gpg 信息到本地 git 中"></a>4. 配置 gpg 信息到本地 git 中</h2>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gpg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Target Class does not exists 解决方案</title>
      <link href="/2022/04/26/41.%20Target%20Class%20does%20not%20exists%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2022/04/26/41.%20Target%20Class%20does%20not%20exists%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="问题情况"><a href="#问题情况" class="headerlink" title="问题情况"></a>问题情况</h2><p>在路由里写了一个 API 路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Route::prefix(&#x27;v1&#x27;)-&gt;namespace(&#x27;Api&#x27;)-&gt;name(&#x27;api.v1.&#x27;)-&gt;group(function () &#123;</span><br><span class="line">    // 短信验证码</span><br><span class="line">    Route::post(&#x27;verificationCodes&#x27;, [VerificationCodesController::class, &#x27;store&#x27;])</span><br><span class="line">        -&gt;name(&#x27;verificationCodes.store&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>控制器如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controllers\Api;</span><br><span class="line"></span><br><span class="line">use Illuminate\Http\Request;</span><br><span class="line"></span><br><span class="line">class VerificationCodesController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public function store()</span><br><span class="line">    &#123;</span><br><span class="line">        return response()-&gt;json([&#x27;test_message&#x27; =&gt; &#x27;store verification code&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Postman 以 post 方式访问 <a href="http://larabbs.test/api/v1/verificationCodes%EF%BC%8C%E6%8A%A5%E9%94%99%EF%BC%9A">http://larabbs.test/api/v1/verificationCodes，报错：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Target Class XXXXXXXXX does not exists</span><br></pre></td></tr></table></figure><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h2><p>抛开先入为主的思想，我们一条一条的排查：</p><ol><li>php artisan cache:clear</li><li>检查命名空间大小写</li><li>是否有路由组，路由组是否声明了命名空间？</li><li>在同样的位置注册另一个路由地址，使用其他控制器，是否生效？</li><li>注释关于 SearchController 的所有相关代码，项目是否正常运行？</li><li>把 api.php 路由文件的内容全部删除，项目是否正常运行？</li></ol>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 定时任务配置方式</title>
      <link href="/2022/04/14/40.%20Laravel%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/04/14/40.%20Laravel%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建一个自定义的-Command"><a href="#1-创建一个自定义的-Command" class="headerlink" title="1. 创建一个自定义的 Command"></a>1. 创建一个自定义的 Command</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:command WarrantyRefresh</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="2-编辑-WarrantyRefresh-php-文件（app-Console-Commands-WarrantyRefresh-php）"><a href="#2-编辑-WarrantyRefresh-php-文件（app-Console-Commands-WarrantyRefresh-php）" class="headerlink" title="2. 编辑 WarrantyRefresh.php 文件（app&#x2F;Console&#x2F;Commands&#x2F;WarrantyRefresh.php）"></a>2. 编辑 WarrantyRefresh.php 文件（app&#x2F;Console&#x2F;Commands&#x2F;WarrantyRefresh.php）</h2><p>​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Console\Commands;</span><br><span class="line"></span><br><span class="line">use App\Admin\Controllers\Api\StaticFun;</span><br><span class="line">use App\Models\Asset;</span><br><span class="line">use Illuminate\Console\Command;</span><br><span class="line">use Illuminate\Support\Facades\Log;</span><br><span class="line"></span><br><span class="line">class WarrantyRefresh extends Command</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * The name and signature of the console command.</span><br><span class="line">     *</span><br><span class="line">     * @var string</span><br><span class="line">     */</span><br><span class="line">    protected $signature = &#x27;command:warrantyRefresh&#x27;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * The console command description.</span><br><span class="line">     *</span><br><span class="line">     * @var string</span><br><span class="line">     */</span><br><span class="line">    protected $description = &#x27;刷新资产质保时间为最新状态&#x27;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create a new command instance.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        parent::__construct();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Execute the console command.</span><br><span class="line">     *</span><br><span class="line">     * @return int</span><br><span class="line">     */</span><br><span class="line">    public function handle()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;info(now() . &quot; Start Refresh Asset Warranty Remain&quot;);</span><br><span class="line">        // 拿到全部资产信息</span><br><span class="line">        $assets = Asset::all();</span><br><span class="line"></span><br><span class="line">        // 创建进度条</span><br><span class="line">        $bar = $this-&gt;output-&gt;createProgressBar(count($assets));</span><br><span class="line"></span><br><span class="line">        // 开始循环计算资产剩余质保时间并更新</span><br><span class="line">        foreach ($assets as $key =&gt; $value) &#123;</span><br><span class="line">            // 计算</span><br><span class="line">            $warranty_info = StaticFun::get2DateInfo($value-&gt;warranty_start, $value-&gt;warranty_end);</span><br><span class="line">            // 拿取</span><br><span class="line">            $warranty_remain = $warranty_info[&#x27;warranty_remain&#x27;];</span><br><span class="line">            // 更新写入</span><br><span class="line">            $asset = Asset::find($value-&gt;id);</span><br><span class="line">            $asset-&gt;warranty_remain = $warranty_remain;</span><br><span class="line">            $asset-&gt;save();</span><br><span class="line"></span><br><span class="line">            // 进度条+1</span><br><span class="line">            $bar-&gt;advance();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // 进度条结束</span><br><span class="line">        $bar-&gt;finish();</span><br><span class="line">        </span><br><span class="line">        $this-&gt;info(&quot;\n&quot; . now() . &quot; Finish Refresh √ \n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-修改kernel-php"><a href="#3-修改kernel-php" class="headerlink" title="3.修改kernel.php"></a>3.修改kernel.php</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Console;</span><br><span class="line"></span><br><span class="line">use Illuminate\Console\Scheduling\Schedule;</span><br><span class="line">use Illuminate\Foundation\Console\Kernel as ConsoleKernel;</span><br><span class="line"></span><br><span class="line">class Kernel extends ConsoleKernel</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Define the application&#x27;s command schedule.</span><br><span class="line">     *</span><br><span class="line">     * @param  \Illuminate\Console\Scheduling\Schedule  $schedule</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    protected function schedule(Schedule $schedule)</span><br><span class="line">    &#123;</span><br><span class="line">        // 每天0点刷新资产剩余质保日期</span><br><span class="line">        $schedule-&gt;command(&#x27;command:warrantyRefresh&#x27;)-&gt;daily();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Register the commands for the application.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    protected function commands()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;load(__DIR__ . &#x27;/Commands&#x27;);</span><br><span class="line"></span><br><span class="line">        require base_path(&#x27;routes/console.php&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-执行定时任务"><a href="#4-执行定时任务" class="headerlink" title="4.执行定时任务"></a>4.执行定时任务</h2><p>手动执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan command:WarrantyRefresh</span><br></pre></td></tr></table></figure><p>服务器自动执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.编辑定时任务：</span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line">2.php多版本可以将php改为版本的绝对路径，项目路径</span><br><span class="line"> * * * * * php /www/wwwroot/yanji/artisan schedule:run &gt;&gt; /www/wwwroot/yanji/CronReord.txt 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">3.CentOS 7 重启 cron 服务</span><br><span class="line">systemctl restart crond.service </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 无法安装 fileinfo 的一种解决思路</title>
      <link href="/2022/03/22/39.%20PHP%20%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85%20fileinfo%20%E7%9A%84%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/"/>
      <url>/2022/03/22/39.%20PHP%20%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85%20fileinfo%20%E7%9A%84%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>最近拿到我司数据中心给的一台 8C16G 的虚机，预装 centos 7.9.2009 最新版本，使用 oneinstack 一键安装 lnmp 运行环境，硬是没给我装上 fileinfo 扩展，导致我的 laravel 8 项目中读取文件的各类操作均报错，这个问题还没找到解决方案。如下是我个人的一种解决思路，供大家参考</p><span id="more"></span><h1 id="系统环境介绍"><a href="#系统环境介绍" class="headerlink" title="系统环境介绍"></a>系统环境介绍</h1><ul><li>centos 7.9.2009 最小化安装 （使用 <code>cat /etc/redhat-release</code> 指令便可查看当前你的曹祖系统具体的版本）</li><li>oneinstack 2022-03-14 版本</li><li>nginx 1.20.2</li><li>mysql 8.0</li><li>php 8.1.3</li><li>php 扩展：zendguardloader,ioncube,sourceguardian,imagick,fileinfo,imap,ldap,phalcon,yaf,redis,memcached,mongodb,swoole（因为机器性能强劲，随便造，注意，这里安装前我选择了 fileinfo，虽然最后自动模式下没装上）</li></ul><p>可以看出，我这里能新则新，截止发稿时，我用的都是最新的版本，想的就是体验新的技术，而我们的问题则是在 php 8.1.3 下装 fileinfo 出的</p><h1 id="网友们的思路"><a href="#网友们的思路" class="headerlink" title="网友们的思路"></a>网友们的思路</h1><p>大家的思路无非就两种</p><ol><li><p>思路一：内存太小。编译 fileinfo 需要吃系统硬件资源，内存小于 1G 的很难编译通过，所以升配或者添加swap空间就可解决问题</p></li><li><p>思路二：适配问题。当我们不存在硬件瓶颈的时候，提示报错，这里的问题绝大部分是再编译过程中使用 std&#x3D;c99 选项来重新编译 <code>make &amp;&amp; make install</code>，这样就可以通过</p></li></ol><p>以上两种方式相信自己搜索过的同学都知道该怎么处理</p><p>但这以上的问题对我来说均不是问题，我遇到了思路二的问题 + 一个c语言指针的问题，后者的错误是我不想去修改的，毕竟根本跟我代码没什么关系的事情，纯粹就是 php 或者 fileinfo 的问题，不如交给他们的开发者去研究修复，但是不改没法用 fileinfo 的功能，而且网上都没有我说的这个问题</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>解决方案很无脑：<strong>找一个 php 8.1 版本的、编译通过的 fileinfo.so 文件，放到系统里，就什么问题都解决了</strong></p><p>文件下载好，放到 oneinstack 默认的扩展存放位置 <code>/usr/local/php/lib/php/extensions/no-debug-non-zts-20210902/</code> 中，然后再回到 <code>php.ini</code>，将 <code>extension=fileinfo</code> 前面的 # 删掉，重启 php 服务 <code>service php-fpm restart</code>，即可</p><p>这时候我们使用 <code>php -m</code> 就可以看到 fileinfo 就在其中，解决问题！</p><p>毕竟我们费劲编译到最后的目的就是生成这个 fileinfo.so，好像这个解决方案有点投机取巧，但是在是研究一整天无果后，这是最让我安心的方式了，爷累了</p><p>追求最新的技术注定要面对这样需要自己折腾的问题，适配啊、不兼容啊、没文档啊等等，但这次问题解决的过程缺会让你提升很多</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fileinfo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS Code 使用公钥配合 Remote SSH 登录远程服务器</title>
      <link href="/2022/03/02/38.%20VS%20Code%20%E4%BD%BF%E7%94%A8%E5%85%AC%E9%92%A5%E9%85%8D%E5%90%88%20Remote%20SSH%20%E7%99%BB%E5%BD%95%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/03/02/38.%20VS%20Code%20%E4%BD%BF%E7%94%A8%E5%85%AC%E9%92%A5%E9%85%8D%E5%90%88%20Remote%20SSH%20%E7%99%BB%E5%BD%95%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>为了随时随地的使用不同设备链接同一个开发环境，也因为电脑赢弱的性能带不动开发环境，我决定使用远端开发的思路，于是就有了如何免密访问服务器的方案</p><span id="more"></span><h1 id="1-生成公钥私钥"><a href="#1-生成公钥私钥" class="headerlink" title="1.生成公钥私钥"></a>1.生成公钥私钥</h1><p><code>ssh-keygen -t rsa</code> 生成密钥，想安全级别更高 <code>ssh-keygen -b 4096 -t rsa</code></p><p>其中，生成的公钥保存在 <code>.ssh/id_rsa</code> ,私钥在 <code>.ssh/id_rsa.pub</code></p><h1 id="2-上传公钥到远程服务器"><a href="#2-上传公钥到远程服务器" class="headerlink" title="2.上传公钥到远程服务器"></a>2.上传公钥到远程服务器</h1><p>执行 <code>vim /etc/ssh/sshd_config</code> ，确保以下三项是这个样子的，没有的可以自己加进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>然后 <code>service sshd restart</code> 重启 ssh 服务</p><p>在本地打开 git bash 输入 <code>ssh-copy-id user@host</code>，该指令将实现公钥上传到远程服务器的 .ssh&#x2F;authorized_keys 的功能</p><p>至此，本地电脑访问远程服务器就不需要密码了</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vs code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（更新中）从零开始搭建 laravel Sail 开发环境</title>
      <link href="/2022/03/01/37.%20%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%20Laravel%20Sail%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/03/01/37.%20%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%20Laravel%20Sail%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>之前的 laravel 开发环境均为 windows + homestead，一直都用得挺好没问题，但由于 Windows 11 的稳定性越来越好，并且内置的 WSL 也更新到了第二代，再加上 laravel 官方也将推荐的统一开发环境换成了 laravel Sail，啥也不说了，本着终生学习的态度，是时候放弃虚机，拥抱 docker 了。</p><p>通过几天的实际体验，给我最大的感受就是快，方方面面的快，环境启停迅速，配置也快，页面响应的也快，没别的，巴适的很。同时在 homestead 做的一切事情，在 docker 下也全能做到，完美</p><p>在开始之前，我们需要检查如下几点是否已经做到</p><ul><li>Windows 10 or 11，并升级到系统最新版本</li><li>受够虚机缓慢的相应和繁琐的配置</li><li>热与学习新技术，不局限于当下</li><li>爱折腾的心</li></ul><p>发稿时，我当前版本环境为</p><ul><li>windows 11 22H2</li><li>docker 4.19.0</li><li>laravel 10</li></ul><p>ok，让我们正式开始配置之旅吧，很简单</p><h2 id="1-启用-wsl2"><a href="#1-启用-wsl2" class="headerlink" title="1. 启用 wsl2"></a>1. 启用 wsl2</h2><p>按 <code>Win + R</code> 。输入指令 <code>appwiz.cpl</code> 回车。</p><p>在弹出窗的左侧点击 <code>启动或关闭 Windows 功能</code> ，在弹出窗内勾选 <code>适用于 Linux 的 Windows 子系统</code>、<code>Hyper-V</code> 和 <code>虚拟机平台</code> 。</p><p>点击确定电脑会及自动安装，期间根据提示会有几次重启。</p><p>重启完后，打开终端应用 <code>Windows Terminal</code> （以管理员方式运行），接下来我们需要设置 WSL 版本为 WSL2 ，并对系统进行更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br><span class="line">wsl --update</span><br></pre></td></tr></table></figure><p>当然，关于更新这块，你也可以打开电脑设置中的 Windows更新，点击检查更新即可对 wsl 进行更新</p><h2 id="2-安装-Ubuntu"><a href="#2-安装-Ubuntu" class="headerlink" title="2. 安装 Ubuntu"></a>2. 安装 Ubuntu</h2><p>当前我们的 Ubuntu TLS 版本为 22.04，我们在 Windows Terminal 中继续操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --list --online    // 列出所有可安装的 linux 版本</span><br><span class="line">wsl --install -d Ubuntu-22.04    // 这行指令会安装 Ubuntu-22.04。该指令可能会提示网络错误，因为需要访问 ``https://raw.githubusercontent.com/microsoft/WSL/master/distributions/DistributionInfo.json`` 这个资源，请科学上网后重试该指令</span><br></pre></td></tr></table></figure><p>系统安装完毕后会自动启动，进入 ubuntu 界面，等待初始化完毕后，需要设置一个 linux 账号，为了下文演示，我设置的账号密码为 <code>wangkai Admin@123</code></p><p>完成后便可进入熟悉的命令行，关闭即可。以下是具体的执行效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\djsyw&gt; wsl --list --online</span><br><span class="line">以下是可安装的有效分发的列表。</span><br><span class="line">使用 &#x27;wsl.exe --install &lt;Distro&gt;&#x27; 安装。</span><br><span class="line"></span><br><span class="line">NAME                                   FRIENDLY NAME</span><br><span class="line">Ubuntu                                 Ubuntu</span><br><span class="line">Debian                                 Debian GNU/Linux</span><br><span class="line">kali-linux                             Kali Linux Rolling</span><br><span class="line">Ubuntu-18.04                           Ubuntu 18.04 LTS</span><br><span class="line">Ubuntu-20.04                           Ubuntu 20.04 LTS</span><br><span class="line">Ubuntu-22.04                           Ubuntu 22.04 LTS</span><br><span class="line">OracleLinux_8_5                        Oracle Linux 8.5</span><br><span class="line">OracleLinux_7_9                        Oracle Linux 7.9</span><br><span class="line">SUSE-Linux-Enterprise-Server-15-SP4    SUSE Linux Enterprise Server 15 SP4</span><br><span class="line">openSUSE-Leap-15.4                     openSUSE Leap 15.4</span><br><span class="line">openSUSE-Tumbleweed                    openSUSE Tumbleweed</span><br><span class="line"></span><br><span class="line">PS C:\Users\djsyw&gt; wsl --install -d Ubuntu-22.04</span><br><span class="line">正在安装: Ubuntu 22.04 LTS</span><br><span class="line">已安装 Ubuntu 22.04 LTS。</span><br><span class="line">正在启动 Ubuntu 22.04 LTS...</span><br><span class="line">Installing, this may take a few minutes...</span><br><span class="line">Please create a default UNIX user account. The username does not need to match your Windows username.</span><br><span class="line">For more information visit: https://aka.ms/wslusers</span><br><span class="line">Enter new UNIX username: wangkai</span><br><span class="line">New password:</span><br><span class="line">Retype new password:</span><br><span class="line">passwd: password updated successfully</span><br><span class="line">Installation successful!</span><br><span class="line">To run a command as administrator (user &quot;root&quot;), use &quot;sudo &lt;command&gt;&quot;.</span><br><span class="line">See &quot;man sudo_root&quot; for details.</span><br><span class="line"></span><br><span class="line">Welcome to Ubuntu 22.04.2 LTS (GNU/Linux 5.15.90.1-microsoft-standard-WSL2 x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This message is shown once a day. To disable it please create the</span><br><span class="line">/home/wangkai/.hushlogin file.</span><br><span class="line">wangkai@Surface-Pro-7:~$</span><br></pre></td></tr></table></figure><p>以上安装 ubuntu 的步骤，也可以在应用商店直接搜索安装，也是一样的，相比指令更加直观。</p><h2 id="3-安装-docker"><a href="#3-安装-docker" class="headerlink" title="3. 安装 docker"></a>3. 安装 docker</h2><p>前往 [Docker 官网][1] 下载最新的 Docker Desktop ，下载可能需要注册个免费账号，下载完成后打开安装包，一直下一步即可。</p><p>安装完毕会提示注销一下电脑，根据提示操作即可</p><h2 id="4-配置-docker"><a href="#4-配置-docker" class="headerlink" title="4. 配置 docker"></a>4. 配置 docker</h2><p>打开 docker 后，选择上方的齿轮（即设置）- Docker Engine，在右侧我们需要填写一下 docker 仓库的加速镜像，就是下方代码的 registry-mirrors 这块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;builder&quot;: &#123;</span><br><span class="line">    &quot;gc&quot;: &#123;</span><br><span class="line">      &quot;defaultKeepStorage&quot;: &quot;20GB&quot;,</span><br><span class="line">      &quot;enabled&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;experimental&quot;: false,</span><br><span class="line">  &quot;features&quot;: &#123;</span><br><span class="line">    &quot;buildkit&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://hub-mirror.c.163.com&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后点击 Apply &amp; Restart ，进行重启，至此我们的 docker 配置就完事儿了。</p><p>若你能够魔法上网，这一大步你啥也不用配置，官方的就是最好的，镜像会有几率出问题，我遇到很多次了。</p><h1 id="5-创建测试项目"><a href="#5-创建测试项目" class="headerlink" title="5. 创建测试项目"></a>5. 创建测试项目</h1><p>为了解决 linux 子系统与 windows 之间文件传输缓慢的问题，我们的代码直接放在linux中，不要放在 windows 里，我们打开 vs code，安装 remote - WSL 扩展，完成后点击窗口左下角，选择 new WSL window，vs code 会下载必要的数据，完成后，在左侧选择打开文件夹，我默认代码放在 &#x2F;home&#x2F;wangkai 的家目录中，点击确定即可</p><p>在左侧右键新建 code 文件夹，并对其右键，选择在集成终端中打开，在命令行中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://laravel.build/example-app | bash</span><br></pre></td></tr></table></figure><p>接下来就会自动安装代码到本地</p><h1 id="6-部署已有项目（已适配docker）并启动"><a href="#6-部署已有项目（已适配docker）并启动" class="headerlink" title="6. 部署已有项目（已适配docker）并启动"></a>6. 部署已有项目（已适配docker）并启动</h1><p>更多情况下，我们的工程项目一般不是在 docker 环境跑的，基本都是在 lnmp 的环境下开发和部署（win 环境？异端！烧了！），比如我们经常使用的“本地 homestead 开发 + 线上 lnmp 部署”思路。下面我们就切换我们的开发方式，修改为“本地 docker 开发+线上 docker or lnmp 环境部署”的思路。</p><p>首先我们先在 &#x2F;home&#x2F;wangkai 目录下新建一个名为 code 的目录，我们之后项目代码都放在这。这里我多说一些为啥这样操作，我们把代码放在 linux 中，而非放在 windows 中，目的就是解决了这两个系统数据传输的缓慢问题，这一点在我们使用 homestead 环境的时候尤其明显，用过的都知道，homestead 是吧 virtualbox 的 linux 虚机的一个目录 与 windows 的一个文件夹做了同步，你在任意一个系统中操作的代码都会同步到另一端，这期间就牵扯到跨系统，固然牵扯到跨系统带来的读写缓慢，而这里我们的一切都在 linux 中操作，你的代码、数据库、redis、nginx 都在 Linux<br>中，不与 windows 做交互，速度自然高。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/wangkai</span><br><span class="line">mkdir code</span><br></pre></td></tr></table></figure><p>然后我们再从远端 git 仓库 clone 下一份全新的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/code</span><br><span class="line">git clone git@github.com:NightingaleWK/yanjiv2.git yanjiv2</span><br></pre></td></tr></table></figure><p>注意，这里我使用的是 ssh-key 的方式拉的代码到本地，你也可以使用 https 的方式，只不过需要每次都输入账号密码，用 ssh-key 的方法是实现了免密，比较方便。关于如何实现 ssh-key 的方式操作 git，请自行百度或者等我佛系更新一下。</p><p>之后我们复制一份 .env 出来，并根据实际修改其中的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">cd yanjiv2</span><br><span class="line">cp .env.example .env</span><br><span class="line">vim .env</span><br><span class="line"></span><br><span class="line">然后开始你的修改就行了，修改完毕保存退出 .env，下面是修改的例子</span><br><span class="line"></span><br><span class="line">APP_NAME=yanjiv2</span><br><span class="line">APP_ENV=local</span><br><span class="line">APP_KEY=</span><br><span class="line">APP_DEBUG=true</span><br><span class="line">APP_URL=http://localhost</span><br><span class="line"></span><br><span class="line">LOG_CHANNEL=stack</span><br><span class="line">LOG_DEPRECATIONS_CHANNEL=null</span><br><span class="line">LOG_LEVEL=debug</span><br><span class="line"></span><br><span class="line">DB_CONNECTION=mysql</span><br><span class="line">DB_HOST=mysql</span><br><span class="line">DB_PORT=3306</span><br><span class="line">DB_DATABASE=yanjiv2</span><br><span class="line">DB_USERNAME=sail</span><br><span class="line">DB_PASSWORD=password</span><br><span class="line"></span><br><span class="line">BROADCAST_DRIVER=log</span><br><span class="line">CACHE_DRIVER=file</span><br><span class="line">FILESYSTEM_DRIVER=local</span><br><span class="line">QUEUE_CONNECTION=sync</span><br><span class="line">SESSION_DRIVER=file</span><br><span class="line">SESSION_LIFETIME=120</span><br><span class="line"></span><br><span class="line">MEMCACHED_HOST=127.0.0.1</span><br><span class="line"></span><br><span class="line">REDIS_HOST=127.0.0.1</span><br><span class="line">REDIS_PASSWORD=null</span><br><span class="line">REDIS_PORT=6379</span><br><span class="line"></span><br><span class="line">MAIL_MAILER=smtp</span><br><span class="line">MAIL_HOST=mailhog</span><br><span class="line">MAIL_PORT=1025</span><br><span class="line">MAIL_USERNAME=null</span><br><span class="line">MAIL_PASSWORD=null</span><br><span class="line">MAIL_ENCRYPTION=null</span><br><span class="line">MAIL_FROM_ADDRESS=null</span><br><span class="line">MAIL_FROM_NAME=&quot;$&#123;APP_NAME&#125;&quot;</span><br><span class="line"></span><br><span class="line">AWS_ACCESS_KEY_ID=</span><br><span class="line">AWS_SECRET_ACCESS_KEY=</span><br><span class="line">AWS_DEFAULT_REGION=us-east-1</span><br><span class="line">AWS_BUCKET=</span><br><span class="line">AWS_USE_PATH_STYLE_ENDPOINT=false</span><br><span class="line"></span><br><span class="line">PUSHER_APP_ID=</span><br><span class="line">PUSHER_APP_KEY=</span><br><span class="line">PUSHER_APP_SECRET=</span><br><span class="line">PUSHER_APP_CLUSTER=mt1</span><br><span class="line"></span><br><span class="line">MIX_PUSHER_APP_KEY=&quot;$&#123;PUSHER_APP_KEY&#125;&quot;</span><br><span class="line">MIX_PUSHER_APP_CLUSTER=&quot;$&#123;PUSHER_APP_CLUSTER&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 环境是HTTPS环境，则为 true，否则请填写 false</span><br><span class="line">ADMIN_HTTPS=false</span><br><span class="line"></span><br><span class="line"># 环境若为windows，则为 true，否则请填写 false。这里影响维修工单导出时图片的显示</span><br><span class="line">MAINTENANCE_EXPORT_DEV_MODE=false</span><br></pre></td></tr></table></figure><p>然后我们在 ubunut 中，跳转到项目根目录，执行如下代码来运行 composer install 指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">    -u &quot;$(id -u):$(id -g)&quot; \</span><br><span class="line">    -v &quot;$(pwd):/var/www/html&quot; \</span><br><span class="line">    -w /var/www/html \</span><br><span class="line">    laravelsail/php82-composer:latest \</span><br><span class="line">    composer install --ignore-platform-reqs</span><br></pre></td></tr></table></figure><p>这样我们就可以在 ubuntu 没装 composer 的情况下运行composer命令，这个命令使用一个包含 PHP 与 Composer 的小型 Docker 容器进行应用程序依赖的安装。</p><p>当你使用 laravelsail&#x2F;phpXX-composer 镜像时，你应该选择和你的应用程序所用环境相同的 PHP 版本（74、80、81 或 82）</p><p>默认情况下，Sail 命令使用 vendor&#x2F;bin&#x2F;sail 脚本调用，该脚本已包含在所有新建的 laravel 应用程序中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./vendor/bin/sail up</span><br></pre></td></tr></table></figure><p>但与其重复的输入 vendor&#x2F;bin&#x2F;sail 来执行 Sail 命令，你可能会希望配置一个 Shell 别名方便你更容易的执行 Sail 命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias sail=&#x27;[ -f sail ] &amp;&amp; sh sail || sh vendor/bin/sail&#x27;</span><br></pre></td></tr></table></figure><p>为了确保这一点始终可用，你可以把它添加到你的主目录下的 shell 配置文件中，如 ~&#x2F;.zshrc 或 ~&#x2F;.bashrc ，然后重新启动你的 shell。</p><p>一旦配置了 shell 别名，你可以通过简单地输入 sail 来执行 Sail 命令。本文接下来的示例都假定你已经配置了此别名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sail up</span><br></pre></td></tr></table></figure><p>具体执行效果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line">wangkai@PRECISION-7920:~$ cd code/yanjiv2/</span><br><span class="line">wangkai@PRECISION-7920:~/code/yanjiv2$ sail up</span><br><span class="line">[+] Running 65/7</span><br><span class="line"> ✔ redis 6 layers [⣿⣿⣿⣿⣿⣿]      0B/0B      Pulled                                                         25.3s</span><br><span class="line"> ✔ mailpit 2 layers [⣿⣿]      0B/0B      Pulled                                                           44.8s</span><br><span class="line"> ! laravel.test Warning                                                                                    2.5s</span><br><span class="line"> ✔ memcached 5 layers [⣿⣿⣿⣿⣿]      0B/0B      Pulled                                                      52.5s</span><br><span class="line"> ✔ selenium 33 layers [⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿]      0B/0B      Pulled                         146.5s</span><br><span class="line"> ✔ meilisearch 5 layers [⣿⣿⣿⣿⣿]      0B/0B      Pulled                                                    58.0s</span><br><span class="line"> ✔ mysql 7 layers [⣿⣿⣿⣿⣿⣿⣿]      0B/0B      Pulled                                                        60.4s</span><br><span class="line">[+] Building 568.7s (16/16) FINISHED</span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile                                                                                                                                                                                                   0.1s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 2.74kB                                                                                                                                                                                                                 0.0s</span><br><span class="line"> =&gt; [internal] load .dockerignore                                                                                                                                                                                                                      0.1s</span><br><span class="line"> =&gt; =&gt; transferring context: 2B                                                                                                                                                                                                                        0.0s</span><br><span class="line"> =&gt; [internal] load metadata for docker.io/library/ubuntu:22.04                                                                                                                                                                                        2.9s</span><br><span class="line"> =&gt; [internal] load build context                                                                                                                                                                                                                      0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 907B                                                                                                                                                                                                                      0.0s</span><br><span class="line"> =&gt; [ 1/11] FROM docker.io/library/ubuntu:22.04@sha256:9dc05cf19a5745c33b9327dba850480dae80310972dea9b05052162e7c7f2763                                                                                                                                7.1s</span><br><span class="line"> =&gt; =&gt; resolve docker.io/library/ubuntu:22.04@sha256:9dc05cf19a5745c33b9327dba850480dae80310972dea9b05052162e7c7f2763                                                                                                                                  0.0s</span><br><span class="line"> =&gt; =&gt; sha256:9dc05cf19a5745c33b9327dba850480dae80310972dea9b05052162e7c7f2763 1.20kB / 1.20kB                                                                                                                                                         0.0s</span><br><span class="line"> =&gt; =&gt; sha256:965fbcae990b0467ed5657caceaec165018ef44a4d2d46c7cdea80a9dff0d1ea 529B / 529B                                                                                                                                                             0.0s</span><br><span class="line"> =&gt; =&gt; sha256:6b7dfa7e8fdbe18ad425dd965a1049d984f31cf0ad57fa6d5377cca355e65f03 1.46kB / 1.46kB                                                                                                                                                         0.0s</span><br><span class="line"> =&gt; =&gt; sha256:6e3729cf69e0ce2de9e779575a1fec8b7fb5efdfa822829290ab6d5d1bc3e797 30.43MB / 30.43MB                                                                                                                                                       6.2s</span><br><span class="line"> =&gt; =&gt; extracting sha256:6e3729cf69e0ce2de9e779575a1fec8b7fb5efdfa822829290ab6d5d1bc3e797                                                                                                                                                              0.7s</span><br><span class="line"> =&gt; [ 2/11] WORKDIR /var/www/html                                                                                                                                                                                                                      1.5s</span><br><span class="line"> =&gt; [ 3/11] RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime &amp;&amp; echo UTC &gt; /etc/timezone                                                                                                                                                             0.8s</span><br><span class="line"> =&gt; [ 4/11] RUN apt-get update     &amp;&amp; apt-get install -y gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python2 dnsutils librsvg2-bin     &amp;&amp; curl -sS &#x27;https://keyserver.ubuntu.com/pks/lookup?op=get&amp;sear  542.9s</span><br><span class="line"> =&gt; [ 5/11] RUN setcap &quot;cap_net_bind_service=+ep&quot; /usr/bin/php8.2                                                                                                                                                                                      0.7s</span><br><span class="line"> =&gt; [ 6/11] RUN groupadd --force -g 1000 sail                                                                                                                                                                                                          0.6s</span><br><span class="line"> =&gt; [ 7/11] RUN useradd -ms /bin/bash --no-user-group -g 1000 -u 1337 sail                                                                                                                                                                             0.7s</span><br><span class="line"> =&gt; [ 8/11] COPY start-container /usr/local/bin/start-container                                                                                                                                                                                        0.1s</span><br><span class="line"> =&gt; [ 9/11] COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf                                                                                                                                                                              0.1s</span><br><span class="line"> =&gt; [10/11] COPY php.ini /etc/php/8.2/cli/conf.d/99-sail.ini                                                                                                                                                                                           0.1s</span><br><span class="line"> =&gt; [11/11] RUN chmod +x /usr/local/bin/start-container                                                                                                                                                                                                0.7s</span><br><span class="line"> =&gt; exporting to image                                                                                                                                                                                                                                10.5s</span><br><span class="line"> =&gt; =&gt; exporting layers                                                                                                                                                                                                                               10.5s</span><br><span class="line"> =&gt; =&gt; writing image sha256:ba56461e171b7ca24bba5c554ab4fa9af1dfee46f15e432132b6999b94bd07b4                                                                                                                                                           0.0s</span><br><span class="line"> =&gt; =&gt; naming to sail-8.2/app                                                                                                                                                                                                                          0.0s</span><br><span class="line">[+] Running 11/11</span><br><span class="line"> ✔ Network yanjiv2_sail               Created                                                                                                                                                                                                          0.1s</span><br><span class="line"> ✔ Volume &quot;yanjiv2_sail-meilisearch&quot;  Created                                                                                                                                                                                                          0.0s</span><br><span class="line"> ✔ Volume &quot;yanjiv2_sail-mysql&quot;        Created                                                                                                                                                                                                          0.0s</span><br><span class="line"> ✔ Volume &quot;yanjiv2_sail-redis&quot;        Created                                                                                                                                                                                                          0.0s</span><br><span class="line"> ✔ Container yanjiv2-mysql-1          Created                                                                                                                                                                                                          0.2s</span><br><span class="line"> ✔ Container yanjiv2-selenium-1       Created                                                                                                                                                                                                          0.2s</span><br><span class="line"> ✔ Container yanjiv2-redis-1          Created                                                                                                                                                                                                          0.2s</span><br><span class="line"> ✔ Container yanjiv2-memcached-1      Created                                                                                                                                                                                                          0.2s</span><br><span class="line"> ✔ Container yanjiv2-meilisearch-1    Created                                                                                                                                                                                                          0.2s</span><br><span class="line"> ✔ Container yanjiv2-mailpit-1        Created                                                                                                                                                                                                          0.2s</span><br><span class="line"> ✔ Container yanjiv2-laravel.test-1   Created                                                                                                                                                                                                          0.1s</span><br><span class="line">Attaching to yanjiv2-laravel.test-1, yanjiv2-mailpit-1, yanjiv2-meilisearch-1, yanjiv2-memcached-1, yanjiv2-mysql-1, yanjiv2-redis-1, yanjiv2-selenium-1</span><br><span class="line">yanjiv2-selenium-1      | 2023-05-05 06:47:12,672 INFO Included extra file &quot;/etc/supervisor/conf.d/selenium.conf&quot; during parsing</span><br><span class="line">yanjiv2-selenium-1      | 2023-05-05 06:47:12,676 INFO RPC interface &#x27;supervisor&#x27; initialized</span><br><span class="line">yanjiv2-selenium-1      | 2023-05-05 06:47:12,677 CRIT Server &#x27;unix_http_server&#x27; running without any HTTP authentication checking</span><br><span class="line">yanjiv2-selenium-1      | 2023-05-05 06:47:12,677 INFO supervisord started with pid 8</span><br><span class="line">yanjiv2-redis-1         | 1:C 05 May 2023 06:47:12.892 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">yanjiv2-redis-1         | 1:C 05 May 2023 06:47:12.892 # Redis version=7.0.11, bits=64, commit=00000000, modified=0, pid=1, just started</span><br><span class="line">yanjiv2-redis-1         | 1:C 05 May 2023 06:47:12.892 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span><br><span class="line">yanjiv2-redis-1         | 1:M 05 May 2023 06:47:12.893 * monotonic clock: POSIX clock_gettime</span><br><span class="line">yanjiv2-redis-1         | 1:M 05 May 2023 06:47:12.893 * Running mode=standalone, port=6379.</span><br><span class="line">yanjiv2-redis-1         | 1:M 05 May 2023 06:47:12.893 # Server initialized</span><br><span class="line">yanjiv2-redis-1         | 1:M 05 May 2023 06:47:12.893 # WARNING Memory overcommit must be enabled! Without it, a background save or replication may fail under low memory condition. Being disabled, it can can also cause failures without low memory condition, see https://github.com/jemalloc/jemalloc/issues/1328. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.</span><br><span class="line">yanjiv2-redis-1         | 1:M 05 May 2023 06:47:12.894 * Ready to accept connections</span><br><span class="line">yanjiv2-mysql-1         | [Entrypoint] MySQL Docker Image 8.0.32-1.2.11-server</span><br><span class="line">yanjiv2-mailpit-1       | INFO[2023/05/05 06:47:13] [smtpd] starting on 0.0.0.0:1025</span><br><span class="line">yanjiv2-mailpit-1       | INFO[2023/05/05 06:47:13] [http] starting server on http://0.0.0.0:8025/</span><br><span class="line">yanjiv2-mysql-1         | [Entrypoint] Initializing database</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:13.388634Z 0 [Warning] [MY-011068] [Server] The syntax &#x27;--skip-host-cache&#x27; is deprecated and will be removed in a future release. Please use SET GLOBAL host_cache_size=0 instead.</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:13.388730Z 0 [System] [MY-013169] [Server] /usr/sbin/mysqld (mysqld 8.0.32) initializing of server in progress as process 17</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:13.399393Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span><br><span class="line">yanjiv2-selenium-1      | 2023-05-05 06:47:13,681 INFO spawned: &#x27;xvfb&#x27; with pid 10</span><br><span class="line">yanjiv2-selenium-1      | 2023-05-05 06:47:13,683 INFO spawned: &#x27;vnc&#x27; with pid 11</span><br><span class="line">yanjiv2-selenium-1      | 2023-05-05 06:47:13,686 INFO spawned: &#x27;novnc&#x27; with pid 13</span><br><span class="line">yanjiv2-selenium-1      | 2023-05-05 06:47:13,691 INFO spawned: &#x27;selenium-standalone&#x27; with pid 18</span><br><span class="line">yanjiv2-selenium-1      | Setting up SE_NODE_GRID_URL...</span><br><span class="line">yanjiv2-selenium-1      | 2023-05-05 06:47:13,705 INFO success: xvfb entered RUNNING state, process has stayed up for &gt; than 0 seconds (startsecs)</span><br><span class="line">yanjiv2-selenium-1      | 2023-05-05 06:47:13,705 INFO success: vnc entered RUNNING state, process has stayed up for &gt; than 0 seconds (startsecs)</span><br><span class="line">yanjiv2-selenium-1      | 2023-05-05 06:47:13,705 INFO success: novnc entered RUNNING state, process has stayed up for &gt; than 0 seconds (startsecs)</span><br><span class="line">yanjiv2-selenium-1      | 2023-05-05 06:47:13,705 INFO success: selenium-standalone entered RUNNING state, process has stayed up for &gt; than 0 seconds (startsecs)</span><br><span class="line">yanjiv2-selenium-1      | Selenium Grid Standalone configuration:</span><br><span class="line">yanjiv2-selenium-1      | [network]</span><br><span class="line">yanjiv2-selenium-1      | relax-checks = true</span><br><span class="line">yanjiv2-selenium-1      |</span><br><span class="line">yanjiv2-selenium-1      | [node]</span><br><span class="line">yanjiv2-selenium-1      | session-timeout = &quot;300&quot;</span><br><span class="line">yanjiv2-selenium-1      | override-max-sessions = false</span><br><span class="line">yanjiv2-selenium-1      | detect-drivers = false</span><br><span class="line">yanjiv2-selenium-1      | drain-after-session-count = 0</span><br><span class="line">yanjiv2-selenium-1      | max-sessions = 1</span><br><span class="line">yanjiv2-selenium-1      |</span><br><span class="line">yanjiv2-selenium-1      | [[node.driver-configuration]]</span><br><span class="line">yanjiv2-selenium-1      | display-name = &quot;chrome&quot;</span><br><span class="line">yanjiv2-selenium-1      | stereotype = &#x27;&#123;&quot;browserName&quot;: &quot;chrome&quot;, &quot;browserVersion&quot;: &quot;112.0&quot;, &quot;platformName&quot;: &quot;Linux&quot;&#125;&#x27;</span><br><span class="line">yanjiv2-selenium-1      | max-sessions = 1</span><br><span class="line">yanjiv2-selenium-1      |</span><br><span class="line">yanjiv2-selenium-1      | Starting Selenium Grid Standalone...</span><br><span class="line">yanjiv2-selenium-1      | Tracing is disabled</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:14.006754Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span><br><span class="line">yanjiv2-selenium-1      | 06:47:14.251 INFO [LoggingOptions.configureLogEncoding] - Using the system default encoding</span><br><span class="line">yanjiv2-selenium-1      | 06:47:14.258 INFO [OpenTelemetryTracer.createTracer] - Using OpenTelemetry for tracing</span><br><span class="line">yanjiv2-laravel.test-1  | 2023-05-05 06:47:14,290 INFO Set uid to user 0 succeeded</span><br><span class="line">yanjiv2-laravel.test-1  | 2023-05-05 06:47:14,292 INFO supervisord started with pid 1</span><br><span class="line">yanjiv2-selenium-1      | 06:47:15.076 INFO [NodeOptions.getSessionFactories] - Detected 20 available processors</span><br><span class="line">yanjiv2-selenium-1      | 06:47:15.134 INFO [NodeOptions.report] - Adding chrome for &#123;&quot;browserVersion&quot;: &quot;112.0&quot;,&quot;se:noVncPort&quot;: 7900,&quot;browserName&quot;: &quot;chrome&quot;,&quot;platformName&quot;: &quot;LINUX&quot;,&quot;se:vncEnabled&quot;: true&#125; 1 times (Host)</span><br><span class="line">yanjiv2-selenium-1      | 06:47:15.153 INFO [Node.&lt;init&gt;] - Binding additional locator mechanisms: relative</span><br><span class="line">yanjiv2-selenium-1      | 06:47:15.176 INFO [GridModel.setAvailability] - Switching Node 9fac02ef-1d70-409d-8b15-a74e93fb0f25 (uri: http://172.18.0.2:4444) from DOWN to UP</span><br><span class="line">yanjiv2-selenium-1      | 06:47:15.177 INFO [LocalDistributor.add] - Added node 9fac02ef-1d70-409d-8b15-a74e93fb0f25 at http://172.18.0.2:4444. Health check every 120s</span><br><span class="line">yanjiv2-laravel.test-1  | 2023-05-05 06:47:15,295 INFO spawned: &#x27;php&#x27; with pid 16</span><br><span class="line">yanjiv2-meilisearch-1   |</span><br><span class="line">yanjiv2-meilisearch-1   | 888b     d888          d8b 888 d8b                                            888</span><br><span class="line">yanjiv2-meilisearch-1   | 8888b   d8888          Y8P 888 Y8P                                            888</span><br><span class="line">yanjiv2-meilisearch-1   | 88888b.d88888              888                                                888</span><br><span class="line">yanjiv2-meilisearch-1   | 888Y88888P888  .d88b.  888 888 888 .d8888b   .d88b.   8888b.  888d888 .d8888b 88888b.</span><br><span class="line">yanjiv2-meilisearch-1   | 888 Y888P 888 d8P  Y8b 888 888 888 88K      d8P  Y8b     &quot;88b 888P&quot;  d88P&quot;    888 &quot;88b</span><br><span class="line">yanjiv2-meilisearch-1   | 888  Y8P  888 88888888 888 888 888 &quot;Y8888b. 88888888 .d888888 888    888      888  888</span><br><span class="line">yanjiv2-meilisearch-1   | 888   &quot;   888 Y8b.     888 888 888      X88 Y8b.     888  888 888    Y88b.    888  888</span><br><span class="line">yanjiv2-meilisearch-1   | 888       888  &quot;Y8888  888 888 888  88888P&#x27;  &quot;Y8888  &quot;Y888888 888     &quot;Y8888P 888  888</span><br><span class="line">yanjiv2-meilisearch-1   |</span><br><span class="line">yanjiv2-meilisearch-1   | Config file path:     &quot;none&quot;</span><br><span class="line">yanjiv2-meilisearch-1   | Database path:                &quot;./data.ms&quot;</span><br><span class="line">yanjiv2-meilisearch-1   | Server listening on:  &quot;http://0.0.0.0:7700&quot;</span><br><span class="line">yanjiv2-meilisearch-1   | Environment:          &quot;development&quot;</span><br><span class="line">yanjiv2-meilisearch-1   | Commit SHA:           &quot;4b953d62fbab81278324e71b4037eb06355dd49a&quot;</span><br><span class="line">yanjiv2-meilisearch-1   | Commit date:          &quot;2023-04-13T16:24:16+00:00&quot;</span><br><span class="line">yanjiv2-meilisearch-1   | Package version:      &quot;1.1.1&quot;</span><br><span class="line">yanjiv2-meilisearch-1   |</span><br><span class="line">yanjiv2-meilisearch-1   | Thank you for using Meilisearch!</span><br><span class="line">yanjiv2-meilisearch-1   |</span><br><span class="line">yanjiv2-meilisearch-1   |</span><br><span class="line">yanjiv2-meilisearch-1   | We collect anonymized analytics to improve our product and your experience. To learn more, including how to turn off analytics, visit our dedicated documentation page: https://docs.meilisearch.com/learn/what_is_meilisearch/telemetry.html</span><br><span class="line">yanjiv2-meilisearch-1   |</span><br><span class="line">yanjiv2-meilisearch-1   | Anonymous telemetry:  &quot;Enabled&quot;</span><br><span class="line">yanjiv2-meilisearch-1   | Instance UID:         &quot;073aa49c-374d-4af8-bb0c-5e0b8ef95b38&quot;</span><br><span class="line">yanjiv2-meilisearch-1   |</span><br><span class="line">yanjiv2-meilisearch-1   |</span><br><span class="line">yanjiv2-meilisearch-1   |</span><br><span class="line">yanjiv2-meilisearch-1   |  No master key was found. The server will accept unidentified requests.</span><br><span class="line">yanjiv2-meilisearch-1   |</span><br><span class="line">yanjiv2-meilisearch-1   |  A master key of at least 16 bytes will be required when switching to a production environment.</span><br><span class="line">yanjiv2-meilisearch-1   |</span><br><span class="line">yanjiv2-meilisearch-1   |</span><br><span class="line">yanjiv2-meilisearch-1   | We generated a new secure master key for you (you can safely use this token):</span><br><span class="line">yanjiv2-meilisearch-1   |</span><br><span class="line">yanjiv2-meilisearch-1   | &gt;&gt; --master-key XVIX1t9QZsTQN6nz7uSS8Y71qPUIdohggUxIWeCR8gg &lt;&lt;</span><br><span class="line">yanjiv2-meilisearch-1   |</span><br><span class="line">yanjiv2-meilisearch-1   | Restart Meilisearch with the argument above to use this new and secure master key.</span><br><span class="line">yanjiv2-meilisearch-1   |</span><br><span class="line">yanjiv2-meilisearch-1   | Documentation:                https://docs.meilisearch.com</span><br><span class="line">yanjiv2-meilisearch-1   | Source code:          https://github.com/meilisearch/meilisearch</span><br><span class="line">yanjiv2-meilisearch-1   | Contact:              https://docs.meilisearch.com/resources/contact.html</span><br><span class="line">yanjiv2-meilisearch-1   |</span><br><span class="line">yanjiv2-meilisearch-1   | [2023-05-05T06:47:15Z INFO  actix_server::builder] Starting 10 workers</span><br><span class="line">yanjiv2-meilisearch-1   | [2023-05-05T06:47:15Z INFO  actix_server::server] Actix runtime found; starting in Actix runtime</span><br><span class="line">yanjiv2-selenium-1      | 06:47:15.381 INFO [Standalone.execute] - Started Selenium Standalone 4.9.0 (revision d7057100a6): http://172.18.0.2:4444</span><br><span class="line">yanjiv2-laravel.test-1  | Starting laravel development server: http://0.0.0.0:80</span><br><span class="line">yanjiv2-laravel.test-1  | [Fri May  5 06:47:15 2023] PHP 8.2.5 Development Server (http://0.0.0.0:80) started</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:16.298633Z 6 [Warning] [MY-010453] [Server] root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option.</span><br><span class="line">yanjiv2-laravel.test-1  | 2023-05-05 06:47:17,205 INFO success: php entered RUNNING state, process has stayed up for &gt; than 1 seconds (startsecs)</span><br><span class="line">yanjiv2-mysql-1         | [Entrypoint] Database initialized</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:21.867567Z 0 [Warning] [MY-011068] [Server] The syntax &#x27;--skip-host-cache&#x27; is deprecated and will be removed in a future release. Please use SET GLOBAL host_cache_size=0 instead.</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:21.869445Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.0.32) starting as process 60</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:21.903451Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:22.074419Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:22.447280Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:22.447388Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:22.494594Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Socket: /var/run/mysqld/mysqlx.sock</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:22.494863Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: &#x27;8.0.32&#x27;  socket: &#x27;/var/lib/mysql/mysql.sock&#x27;  port: 0  MySQL Community Server - GPL.</span><br><span class="line">yanjiv2-mysql-1         | Warning: Unable to load &#x27;/usr/share/zoneinfo/iso3166.tab&#x27; as time zone. Skipping it.</span><br><span class="line">yanjiv2-mysql-1         | Warning: Unable to load &#x27;/usr/share/zoneinfo/leapseconds&#x27; as time zone. Skipping it.</span><br><span class="line">yanjiv2-mysql-1         | Warning: Unable to load &#x27;/usr/share/zoneinfo/tzdata.zi&#x27; as time zone. Skipping it.</span><br><span class="line">yanjiv2-mysql-1         | Warning: Unable to load &#x27;/usr/share/zoneinfo/zone.tab&#x27; as time zone. Skipping it.</span><br><span class="line">yanjiv2-mysql-1         | Warning: Unable to load &#x27;/usr/share/zoneinfo/zone1970.tab&#x27; as time zone. Skipping it.</span><br><span class="line">yanjiv2-mysql-1         |</span><br><span class="line">yanjiv2-mysql-1         | [Entrypoint] running /docker-entrypoint-initdb.d/10-create-testing-database.sh</span><br><span class="line">yanjiv2-mysql-1         | mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">yanjiv2-mysql-1         |</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:25.076164Z 15 [System] [MY-013172] [Server] Received SHUTDOWN from user root. Shutting down mysqld (Version: 8.0.32).</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:26.390283Z 0 [System] [MY-010910] [Server] /usr/sbin/mysqld: Shutdown complete (mysqld 8.0.32)  MySQL Community Server - GPL.</span><br><span class="line">yanjiv2-mysql-1         | [Entrypoint] Server shut down</span><br><span class="line">yanjiv2-mysql-1         |</span><br><span class="line">yanjiv2-mysql-1         | [Entrypoint] MySQL init process done. Ready for start up.</span><br><span class="line">yanjiv2-mysql-1         |</span><br><span class="line">yanjiv2-mysql-1         | [Entrypoint] Starting MySQL 8.0.32-1.2.11-server</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:27.300132Z 0 [Warning] [MY-011068] [Server] The syntax &#x27;--skip-host-cache&#x27; is deprecated and will be removed in a future release. Please use SET GLOBAL host_cache_size=0 instead.</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:27.301672Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.0.32) starting as process 1</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:27.316952Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:27.452872Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:27.736549Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:27.736619Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:27.770036Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: &#x27;::&#x27; port: 33060, socket: /var/run/mysqld/mysqlx.sock</span><br><span class="line">yanjiv2-mysql-1         | 2023-05-05T06:47:27.770200Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: &#x27;8.0.32&#x27;  socket: &#x27;/var/lib/mysql/mysql.sock&#x27;  port: 3306  MySQL Community Server - GPL.</span><br><span class="line">yanjiv2-laravel.test-1  | [Fri May  5 06:47:35 2023] 172.18.0.1:44704 Accepted</span><br><span class="line">yanjiv2-laravel.test-1  | [Fri May  5 06:47:35 2023] 172.18.0.1:44704 Closing</span><br><span class="line">yanjiv2-laravel.test-1  | [Fri May  5 06:47:35 2023] 172.18.0.1:44708 Accepted</span><br><span class="line">yanjiv2-laravel.test-1  | [Fri May  5 06:47:35 2023] 172.18.0.1:44708 Closing</span><br><span class="line">yanjiv2-laravel.test-1  | [Fri May  5 06:47:35 2023] 172.18.0.1:44716 Accepted</span><br><span class="line">yanjiv2-laravel.test-1  | [Fri May  5 06:47:35 2023] 172.18.0.1:44716 Closing</span><br><span class="line">yanjiv2-laravel.test-1  | [Fri May  5 06:47:35 2023] 172.18.0.1:44730 Accepted</span><br><span class="line">yanjiv2-laravel.test-1  | [Fri May  5 06:47:35 2023] 172.18.0.1:44730 Closing</span><br><span class="line">yanjiv2-laravel.test-1  | [Fri May  5 06:47:36 2023] 172.18.0.1:44744 Accepted</span><br><span class="line">yanjiv2-laravel.test-1  | [Fri May  5 06:47:36 2023] 172.18.0.1:44744 Closing</span><br><span class="line">yanjiv2-laravel.test-1  | [Fri May  5 06:47:36 2023] 172.18.0.1:44750 Accepted</span><br><span class="line">yanjiv2-laravel.test-1  | [Fri May  5 06:47:36 2023] 172.18.0.1:44750 [200]: GET /favicon.ico</span><br><span class="line">yanjiv2-laravel.test-1  | [Fri May  5 06:47:36 2023] 172.18.0.1:44750 Closing</span><br><span class="line">yanjiv2-meilisearch-1   | [2023-05-05T06:47:43Z INFO  actix_web::middleware::logger] 127.0.0.1 &quot;GET /health HTTP/1.1&quot; 200 22 &quot;-&quot; &quot;Wget&quot; 0.000301</span><br></pre></td></tr></table></figure><p>如果没出意外的话，现在服务应该起来了，访问一下 localhost 就可以看到熟悉的 laravel 欢迎界面了。</p><p>若提示“No application encryption key has been specified.”，点击报错页面的“Generate app key”，然后刷新一下就好了</p><p>之后就和正常继续部署项目一样，但是记得把每行指令的 php artisan 改为 sail artisan，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">php artisan migrate:refresh --seed</span><br><span class="line">// to</span><br><span class="line">sail artisan migrate:refresh --seed</span><br><span class="line"></span><br><span class="line">composer i</span><br><span class="line">// to</span><br><span class="line">sail composer i</span><br></pre></td></tr></table></figure><h1 id="7-部署已有项目（未适配-docker）并启动"><a href="#7-部署已有项目（未适配-docker）并启动" class="headerlink" title="7. 部署已有项目（未适配 docker）并启动"></a>7. 部署已有项目（未适配 docker）并启动</h1><p>更多情况下，我们的工程项目一般不是在 docker 环境跑的，基本都是在 lnmp 的环境下开发和部署（win 环境？异端！烧了！），比如我们经常使用的“本地 homestead 开发 + 线上 lnmp 部署”思路。下面我们就切换我们的开发方式，修改为“本地 docker 开发+线上 docker or lnmp 环境部署”的思路。</p><p>首先我们先在 &#x2F;home&#x2F;wangkai 目录下新建一个名为 code 的目录，我们之后项目代码都放在这。这里我多说一些为啥这样操作，我们把代码放在 linux 中，而非放在 windows 中，目的就是解决了这两个系统数据传输的缓慢问题，这一点在我们使用 homestead 环境的时候尤其明显，用过的都知道，homestead 是吧 virtualbox 的 linux 虚机的一个目录 与 windows 的一个文件夹做了同步，你在任意一个系统中操作的代码都会同步到另一端，这期间就牵扯到跨系统，固然牵扯到跨系统带来的读写缓慢，而这里我们的一切都在 linux 中操作，你的代码、数据库、redis、nginx 都在 Linux<br>中，不与 windows 做交互，速度自然高。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/wangkai</span><br><span class="line">mkdir code</span><br></pre></td></tr></table></figure><p>然后我们再从远端 git 仓库 clone 下一份全新的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/code</span><br><span class="line">git clone git@github.com:NightingaleWK/yanjiv2.git yanjiv2</span><br></pre></td></tr></table></figure><p>注意，这里我使用的是 ssh-key 的方式拉的代码到本地，你也可以使用 https 的方式，只不过需要每次都输入账号密码，用 ssh-key 的方法是实现了免密，比较方便。关于如何实现 ssh-key 的方式操作 git，请自行百度或者等我佛系更新一下。</p><p>之后我们复制一份 .env 出来，并根据实际修改其中的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">cd yanjiv2</span><br><span class="line">cp .env.example .env</span><br><span class="line">vim .env</span><br><span class="line"></span><br><span class="line">然后开始你的修改就行了，修改完毕保存退出 .env，下面是修改的例子</span><br><span class="line"></span><br><span class="line">APP_NAME=yanjiv2</span><br><span class="line">APP_ENV=local</span><br><span class="line">APP_KEY=</span><br><span class="line">APP_DEBUG=true</span><br><span class="line">APP_URL=http://localhost</span><br><span class="line"></span><br><span class="line">LOG_CHANNEL=stack</span><br><span class="line">LOG_DEPRECATIONS_CHANNEL=null</span><br><span class="line">LOG_LEVEL=debug</span><br><span class="line"></span><br><span class="line">DB_CONNECTION=mysql</span><br><span class="line">DB_HOST=127.0.0.1</span><br><span class="line">DB_PORT=3306</span><br><span class="line">DB_DATABASE=yanjiv2</span><br><span class="line">DB_USERNAME=yanjiv2</span><br><span class="line">DB_PASSWORD=yanjiv2</span><br><span class="line"></span><br><span class="line">BROADCAST_DRIVER=log</span><br><span class="line">CACHE_DRIVER=file</span><br><span class="line">FILESYSTEM_DRIVER=local</span><br><span class="line">QUEUE_CONNECTION=sync</span><br><span class="line">SESSION_DRIVER=file</span><br><span class="line">SESSION_LIFETIME=120</span><br><span class="line"></span><br><span class="line">MEMCACHED_HOST=127.0.0.1</span><br><span class="line"></span><br><span class="line">REDIS_HOST=127.0.0.1</span><br><span class="line">REDIS_PASSWORD=null</span><br><span class="line">REDIS_PORT=6379</span><br><span class="line"></span><br><span class="line">MAIL_MAILER=smtp</span><br><span class="line">MAIL_HOST=mailhog</span><br><span class="line">MAIL_PORT=1025</span><br><span class="line">MAIL_USERNAME=null</span><br><span class="line">MAIL_PASSWORD=null</span><br><span class="line">MAIL_ENCRYPTION=null</span><br><span class="line">MAIL_FROM_ADDRESS=null</span><br><span class="line">MAIL_FROM_NAME=&quot;$&#123;APP_NAME&#125;&quot;</span><br><span class="line"></span><br><span class="line">AWS_ACCESS_KEY_ID=</span><br><span class="line">AWS_SECRET_ACCESS_KEY=</span><br><span class="line">AWS_DEFAULT_REGION=us-east-1</span><br><span class="line">AWS_BUCKET=</span><br><span class="line">AWS_USE_PATH_STYLE_ENDPOINT=false</span><br><span class="line"></span><br><span class="line">PUSHER_APP_ID=</span><br><span class="line">PUSHER_APP_KEY=</span><br><span class="line">PUSHER_APP_SECRET=</span><br><span class="line">PUSHER_APP_CLUSTER=mt1</span><br><span class="line"></span><br><span class="line">MIX_PUSHER_APP_KEY=&quot;$&#123;PUSHER_APP_KEY&#125;&quot;</span><br><span class="line">MIX_PUSHER_APP_CLUSTER=&quot;$&#123;PUSHER_APP_CLUSTER&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 环境是HTTPS环境，则为 true，否则请填写 false</span><br><span class="line">ADMIN_HTTPS=false</span><br><span class="line"></span><br><span class="line"># 环境若为windows，则为 true，否则请填写 false。这里影响维修工单导出时图片的显示</span><br><span class="line">MAINTENANCE_EXPORT_DEV_MODE=false</span><br></pre></td></tr></table></figure><p>本小节未完待续…<br>  [1]: <a href="https://www.docker.com/">https://www.docker.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel sail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Pull 强制拉取步骤</title>
      <link href="/2021/12/21/36.%20Git%20Pull%20%E5%BC%BA%E5%88%B6%E6%8B%89%E5%8F%96%E6%AD%A5%E9%AA%A4/"/>
      <url>/2021/12/21/36.%20Git%20Pull%20%E5%BC%BA%E5%88%B6%E6%8B%89%E5%8F%96%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意:该命令直接放弃所有修改代码,并更新到版本库最新版本代码</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git fetch –all<br>git reset –hard origin&#x2F;main<br>git pull</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">合起来就是</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git fetch –all &amp;&amp; git reset –hard origin&#x2F;main &amp;&amp; git pull</p><pre><code>注意: ``git reset --hard origin/分支代码``, 一般都是主干,若有多期工程, 需自己更改</code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Coding 无密码推拉代码的方法</title>
      <link href="/2021/12/15/35.%20Coding%20%E6%97%A0%E5%AF%86%E7%A0%81%E6%8E%A8%E6%8B%89%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2021/12/15/35.%20Coding%20%E6%97%A0%E5%AF%86%E7%A0%81%E6%8E%A8%E6%8B%89%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 创建新的 SSH 私钥与公钥秘钥对，输入你的邮箱作为标签</span><br><span class="line">ssh-keygen -m PEM -t rsa -b 4096 -C &quot;your.email@example.com&quot;  </span><br><span class="line"></span><br><span class="line">// 推荐使用默认地址</span><br><span class="line">Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]  </span><br><span class="line"></span><br><span class="line">// 此处直接回车即可；若设置密码，则每次使用 SSH 方式推送代码时都会要求输入密码</span><br><span class="line">Enter passphrase (empty for no passphrase):  </span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="添加公钥"><a href="#添加公钥" class="headerlink" title="添加公钥"></a>添加公钥</h2><ol><li>打开上文中生成的秘钥对的地址（通常为 ~&#x2F;.ssh&#x2F;）找到后缀为 pub 的公钥文件，使用 cat 命令输出所有内容并复制。</li><li>登录 CODING，点击右上角个人头像进入「个人账户设置」-&gt;「SSH 公钥」页面，然后点击新建公钥按钮，粘贴复制的公钥全文。</li><li>完成后，在本地运行首次连接时的公钥认证命令： <code>ssh -T git@e.coding.net</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 项目常用指令</title>
      <link href="/2021/12/15/34.%20laravel%20%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2021/12/15/34.%20laravel%20%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Create-vhost"><a href="#Create-vhost" class="headerlink" title="Create vhost"></a>Create vhost</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/oneinstack</span><br><span class="line">./vhost.sh</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Git-clone"><a href="#Git-clone" class="headerlink" title="Git clone"></a>Git clone</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;url&gt; .</span><br></pre></td></tr></table></figure><h2 id="Create-Edit-env"><a href="#Create-Edit-env" class="headerlink" title="Create &amp; Edit .env"></a>Create &amp; Edit .env</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;project dir&gt;</span><br><span class="line">mv .env.example .env</span><br><span class="line">vim .env</span><br></pre></td></tr></table></figure><p>Then,edit it</p><p>Finally,create a app_key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan key:generate</span><br></pre></td></tr></table></figure><h2 id="Change-file-permission"><a href="#Change-file-permission" class="headerlink" title="Change file permission"></a>Change file permission</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 &lt;project dir&gt;</span><br><span class="line">chown -R www-data:www-data &lt;project dir&gt;</span><br><span class="line"></span><br><span class="line">cd &lt;project dir&gt;</span><br><span class="line">chgrp -R www storage bootstrap/cache</span><br><span class="line">chmod -R ug+rwx storage bootstrap/cache</span><br></pre></td></tr></table></figure><h2 id="Migration（For-Dcat-Admin）"><a href="#Migration（For-Dcat-Admin）" class="headerlink" title="Migration（For Dcat-Admin）"></a>Migration（For Dcat-Admin）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan migrate:refresh &amp;&amp; php artisan admin:install &amp;&amp; php artisan db:seed</span><br></pre></td></tr></table></figure><h2 id="vagrant"><a href="#vagrant" class="headerlink" title="vagrant"></a>vagrant</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vagrant init  初始化 vagrant</span><br><span class="line">vagrant up  启动 vagrant</span><br><span class="line">vagrant halt  关闭 vagrant</span><br><span class="line">vagrant ssh  通过 SSH 登录 vagrant（需要先启动 vagrant）</span><br><span class="line">vagrant provision  重新应用更改 vagrant 配置</span><br><span class="line">vagrant destroy  删除 vagrant</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>诚恳的道歉嗷 🫡</title>
      <link href="/2021/12/02/33.%20%E8%AF%9A%E6%81%B3%E7%9A%84%E9%81%93%E6%AD%89%E5%97%B7/"/>
      <url>/2021/12/02/33.%20%E8%AF%9A%E6%81%B3%E7%9A%84%E9%81%93%E6%AD%89%E5%97%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="1-错在哪？"><a href="#1-错在哪？" class="headerlink" title="1.错在哪？"></a>1.错在哪？</h2><p>客观上：享乐只考虑自己，不曾考虑他人；<br>主观上：自己只顾着</p><ul><li>自己开车公司到自己家、</li><li>处理西红柿木耳菠菜等食材、</li><li>做了一锅蔬菜汤并开始吃饭、</li><li>看着荒木老贼在今天bilibili首播的《JIOJIO的奇幻冒险：石之海》的一口气腹泻式的12集联播、首播、</li><li>并且考虑要不打会原神清清体力</li></ul><p>但是没考虑到</p><ul><li>下午早早下班自己家的、</li><li>吃完饭没人陪着玩的、</li><li>被窝里也没有啥好吃的、</li><li>独自一人躺在船上抱着手机盖着暖炕的、</li><li>刷淘宝抖音等刷到没内容可推荐的</li></ul><p>——包子还是一个没人陪的孩子，可怜弱小又无助，这就是对包子最大的虐待<br>本犯罪嫌疑人的犯罪证据确凿，作案动机主客观一致，数罪并罚，从重处置，宣判为无期徒刑</p><h2 id="2-怎么改？"><a href="#2-怎么改？" class="headerlink" title="2.怎么改？"></a>2.怎么改？</h2><ol><li><strong>加强自我学习</strong>。加强对理论知识的学习，通过互联网等工具，快速学习如何和包子相处，解决怎么处、怎么哄等一系列高艰难问题，虚心接受批评指责，通过他人的指导让自己不走弯路，知错就改；切实掌握相关高情商人必备的知识技巧，降低自己的直男特质，努力做到一个让包子满意的男朋友</li><li><strong>重视理论实践相结合</strong>。只说不做假把式，黑猫白猫抓得到老鼠的就是好猫。通过不断的试错，在试错中学习经验，不断探索和包子相处的独门绝技，并应用于实际生活，以错代学，不断进取，波浪式前进螺旋式上升的提高包子对我的好感和认可。用实际行动出真知，力做人民群众满意的男朋友</li><li><strong>发挥主观能动性</strong>。拒绝冷暴力，不多二传手，提倡捞过界的理念，自己在做好本职工作的前提下，主动关心关照宝宝，不能一有问题就摆烂，不能天天就会说“啊对对对，啊对对对”，要勇于冒险，敢于靠前，主动为宝宝多思考、勤关心，让暖男的形象深入人心</li><li><strong>回回头、出出汗、发发热、红红脸</strong>。在每天结束的时候，多反思今天做了什么，做的怎么样？是否是宝宝群众喜爱的事情？是否真正关心到了宝宝？多反思，勤思考，将问题拿到台面上曝曝光，将自己的负面实例作为下一次进步的阶梯，长回头看，在失败中找到成功的秘诀！</li></ol>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 道歉信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新建 laravel 项目常用指令</title>
      <link href="/2021/11/03/32.%20%E6%96%B0%E5%BB%BA%20laravel%20%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2021/11/03/32.%20%E6%96%B0%E5%BB%BA%20laravel%20%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装-virtual-box"><a href="#1-安装-virtual-box" class="headerlink" title="1. 安装 virtual box"></a>1. 安装 virtual box</h2><p>官网下载最新稳定版，安装</p><h2 id="2-安装-vagrant"><a href="#2-安装-vagrant" class="headerlink" title="2. 安装 vagrant"></a>2. 安装 vagrant</h2><p>官网下载最新稳定版，安装</p><h2 id="3-命令行安装-laravel-homestead-box"><a href="#3-命令行安装-laravel-homestead-box" class="headerlink" title="3. 命令行安装 laravel&#x2F;homestead box"></a>3. 命令行安装 laravel&#x2F;homestead box</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add laravel/homestead</span><br></pre></td></tr></table></figure><h2 id="4-在用户目录下新建-code-文件夹"><a href="#4-在用户目录下新建-code-文件夹" class="headerlink" title="4. 在用户目录下新建 code 文件夹"></a>4. 在用户目录下新建 <code>code</code> 文件夹</h2><p>项目以后放这里</p><h2 id="5-在用户目录下-git-clone-homestead-文件夹"><a href="#5-在用户目录下-git-clone-homestead-文件夹" class="headerlink" title="5. 在用户目录下 git clone homestead 文件夹"></a>5. 在用户目录下 git clone homestead 文件夹</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/laravel/homestead.git Homestead</span><br></pre></td></tr></table></figure><p>同时进入 Homestead 文件夹下双击 <code>init.bat</code> 进行初始化</p><h2 id="6-配置-homestead"><a href="#6-配置-homestead" class="headerlink" title="6. 配置 homestead"></a>6. 配置 homestead</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">ip: &quot;192.168.22.33&quot;</span><br><span class="line">memory: 4096</span><br><span class="line">cpus: 4</span><br><span class="line">provider: virtualbox</span><br><span class="line"></span><br><span class="line">authorize: ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">keys:</span><br><span class="line">    - ~/.ssh/id_rsa</span><br><span class="line">    - ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">folders:</span><br><span class="line">    - map: ~/code</span><br><span class="line">      to: /home/vagrant/code</span><br><span class="line"></span><br><span class="line">sites:</span><br><span class="line">    - map: weibo.test</span><br><span class="line">      to: /home/vagrant/code/weibo/public</span><br><span class="line">    - map: larabbs.test</span><br><span class="line">      to: /home/vagrant/code/larabbs/public</span><br><span class="line">    - map: yanji.test</span><br><span class="line">      to: /home/vagrant/code/yanji/public</span><br><span class="line">    - map: jianbing.test</span><br><span class="line">      to: /home/vagrant/code/jianbing/public</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">databases:</span><br><span class="line">    - weibo</span><br><span class="line">    - larabbs</span><br><span class="line">    - yanji</span><br><span class="line">    - jianbing</span><br><span class="line"></span><br><span class="line">features:</span><br><span class="line">    - mysql: true</span><br><span class="line">    - mariadb: false</span><br><span class="line">    - postgresql: false</span><br><span class="line">    - ohmyzsh: false</span><br><span class="line">    - webdriver: false</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">    - enabled:</span><br><span class="line">          - &quot;mysql&quot;</span><br><span class="line">#    - disabled:</span><br><span class="line">#        - &quot;postgresql@11-main&quot;</span><br><span class="line"></span><br><span class="line">#ports:</span><br><span class="line">#    - send: 33060 # MySQL/MariaDB</span><br><span class="line">#      to: 3306</span><br><span class="line">#    - send: 4040</span><br><span class="line">#      to: 4040</span><br><span class="line">#    - send: 54320 # PostgreSQL</span><br><span class="line">#      to: 5432</span><br><span class="line">#    - send: 8025 # Mailhog</span><br><span class="line">#      to: 8025</span><br><span class="line">#    - send: 9600</span><br><span class="line">#      to: 9600</span><br><span class="line">#    - send: 27017</span><br><span class="line">#      to: 27017</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-修改-host-文件"><a href="#7-修改-host-文件" class="headerlink" title="7. 修改 host 文件"></a>7. 修改 host 文件</h2><p>文件位于 C:\Windows\System32\drivers\etc\hosts ，使用 vs code 在文件尾部添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.22.33 homestead.app</span><br></pre></td></tr></table></figure><h2 id="8-启动-homestead"><a href="#8-启动-homestead" class="headerlink" title="8.启动 homestead"></a>8.启动 homestead</h2><p>在 Homestead 文件夹下，执行 <code>vagrant up</code>，其他常用指令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vagrant init  //初始化 vagrant</span><br><span class="line">vagrant up  //启动 vagrant</span><br><span class="line">vagrant halt  //关闭 vagrant</span><br><span class="line">vagrant ssh  //通过 SSH 登录 vagrant（需要先启动 vagrant）</span><br><span class="line">vagrant provision  //重新应用更改 vagrant 配置</span><br><span class="line">vagrant destroy   //删除 vagrant</span><br></pre></td></tr></table></figure><h2 id="9-克隆-larave-初始化项目"><a href="#9-克隆-larave-初始化项目" class="headerlink" title="9.克隆 larave 初始化项目"></a>9.克隆 larave 初始化项目</h2><p>在 linux 中，定位到 ~&#x2F;code 目录下，执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project laravel/laravel duanliu</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人开发服务器换新啦</title>
      <link href="/2021/09/22/31.%20%E4%B8%AA%E4%BA%BA%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8D%A2%E6%96%B0%E5%95%A6/"/>
      <url>/2021/09/22/31.%20%E4%B8%AA%E4%BA%BA%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8D%A2%E6%96%B0%E5%95%A6/</url>
      
        <content type="html"><![CDATA[<p>从大学最后一年到现在，阿里云一直陪伴我走过了风风雨雨，当时毕设部署在上面，自己的 web 应用做测试也在上面，虽然 1C2G 的配置真的拘谨，但是它给我带来的提升是无法衡量的，自从有了个人的服务器后，我才可以完成从开发到部署到运维的全链条学习实战，不管怎么说，感谢有你 ♥</p><p>可惜的是，当年服务器是用学生价格买的，一年就 100 多点，现在毕业了，到期续费得几大百元，这就难顶了，于是就萌生换服务器的想法</p><p>腾讯云可以申请轻量应用服务器，相比云服务器没啥区别。我现在个人就是两个需求。一个是我的 web 应用需要测试服务器，一个是我的这个站点（HEXO 框架）需要线上服务器，那么对性能要求就没那么大，看着便宜，一口气 3 百块钱买了三年，配置还是 1C2G 但是带宽从当时的 1M 小水管升级到 6M 小水管，好吧，好像还是那个鸟样</p><p>最近几天忙着配置环境，域名迁移，代码部署，服务器设备，现在基本上是告一段落了，工作上做的项目现在都能跑的很舒服，那就行了</p><p>总之干就完事儿了，在奋斗中不断前行，加油！</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERR_CONNECTION_TIMED_OUT 解决方法</title>
      <link href="/2021/09/13/30.%20ERR_CONNECTION_TIMED_OUT%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2021/09/13/30.%20ERR_CONNECTION_TIMED_OUT%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>平日正常访问的站点突然无法访问，提示<code>ERR_CONNECTION_TIMED_OUT</code>，排除服务端的问题后，不如排查一下本地的问题，我们可以清理浏览器各类缓存试试</p><p>若依旧存在问题，我们可以重置一下系统的网络环境，在<code>CMD</code>或者<code>PowerShell</code>下逐次运行以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /renew</span><br><span class="line">ipconfig /registerdns</span><br><span class="line">ipconfig /flushdns</span><br><span class="line">ipconfig /release</span><br></pre></td></tr></table></figure><p>问题即可解决</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 突然无法 push 的解决方法</title>
      <link href="/2021/09/06/29.%20Git%20%E7%AA%81%E7%84%B6%E6%97%A0%E6%B3%95%20push%20%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2021/09/06/29.%20Git%20%E7%AA%81%E7%84%B6%E6%97%A0%E6%B3%95%20push%20%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>当你明明用得好好的 git 突然无法推送，提示如下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vagrant@homestead:~/code/jianbing$ git push</span><br><span class="line">identity_sign: private key /home/vagrant/.ssh/id_rsa contents do not match public</span><br><span class="line">git@e.coding.net: Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><p>只需要重新进行一些配置即可恢复 push，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email your@example.com</span><br><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>然后就可以和往常一样的 git push 了</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决 ohmyzsh 读取 git 信息缓慢的问题</title>
      <link href="/2021/08/09/27.%20%E8%A7%A3%E5%86%B3%20ohmyzsh%20%E8%AF%BB%E5%8F%96%20git%20%E4%BF%A1%E6%81%AF%E7%BC%93%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2021/08/09/27.%20%E8%A7%A3%E5%86%B3%20ohmyzsh%20%E8%AF%BB%E5%8F%96%20git%20%E4%BF%A1%E6%81%AF%E7%BC%93%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在 oh-my-zsh 进入包含 git 仓库目录时，会变的比平时慢&#x2F;卡顿，原因是因为 oh-my-zsh 要获取 git 更新信息，设置 oh-my-zsh 不读取文件变化信息（在 git 项目目录执行下列命令）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --add oh-my-zsh.hide-dirty 1</span><br></pre></td></tr></table></figure><p>如果你还觉得慢，可以再设置 oh-my-zsh 不读取任何 git 信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --add oh-my-zsh.hide-status 1</span><br></pre></td></tr></table></figure><p>如果想恢复，设置成0就好</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oh-my-zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客升级流程</title>
      <link href="/2021/08/09/28.%20Hexo%20%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7%E6%B5%81%E7%A8%8B/"/>
      <url>/2021/08/09/28.%20Hexo%20%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>1、全局升级<code>hexo-cli</code>，先<code>hexo version</code>查看当前版本，然后<code>npm i hexo-cli -g</code>，再次<code>hexo version</code>查看是否升级成功。</p><p>2、使用<code>npm install -g npm-check</code>和<code>npm-check</code>，检查系统中的插件是否有升级的，可以看到自己前面都安装了那些插件</p><p>3、使用<code>npm install -g npm-upgrade</code>和<code>npm-upgrade</code>，升级系统中的插件</p><p>4、使用<code>npm update -g</code>和<code>npm update --save</code></p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dcat-Admin 主题色变更的避坑方法</title>
      <link href="/2021/08/03/25.%20Dcat-Admin%20%E4%B8%BB%E9%A2%98%E8%89%B2%E5%8F%98%E6%9B%B4%E7%9A%84%E9%81%BF%E5%9D%91%E6%96%B9%E6%B3%95/"/>
      <url>/2021/08/03/25.%20Dcat-Admin%20%E4%B8%BB%E9%A2%98%E8%89%B2%E5%8F%98%E6%9B%B4%E7%9A%84%E9%81%BF%E5%9D%91%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>官方文档里写了如何变变更主题色，文档如下：</p><p><a href="https://learnku.com/docs/dcat-admin/2.x/theme-and-color/8085#db3725">https://learnku.com/docs/dcat-admin/2.x/theme-and-color/8085#db3725</a></p><p>当我们使用 <code>homestead</code> 开发时，运行 <code>php artisan admin:minify orange --color fbbd08 --publish</code> 会报错，问题大约就是在 <code>windows</code> 上运行的 <code>homestead</code> 这样的 <code>linux</code> 系统，在建立软连接的时候会出错，故我这里改一下教程，按照这样的方式就可以编译通过，达到效果</p><h2 id="1-Windows-上的操作"><a href="#1-Windows-上的操作" class="headerlink" title="1. Windows 上的操作"></a>1. Windows 上的操作</h2><p>上官网下载 <code>Node.js</code> 并安装，找到项目文件所在位置，这里我按照默认的规范，位置在 <code>C:\Users\djsyw\code\MyProject</code> ，之后我们继续寻找 <code>dcat</code> 的包，在 <code>C:\Users\djsyw\code\MyProject\vendor\dcat\laravel-admin</code> 这里，我们在这里打开 <code>Terminal</code> 输入指令 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>完成后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>相对于在 <code>homestead</code> 里运行 <code>linux Mix</code> 前端工作流那繁琐操蛋的流程， <code>win</code>下就很舒心，至此准备工作结束，我们这些操作完成了在 <code>homestead</code> 上各种报错的环节，这里算是给他提前做好了</p><h2 id="2-homestead-上的操作"><a href="#2-homestead-上的操作" class="headerlink" title="2. homestead 上的操作"></a>2. homestead 上的操作</h2><p>定位到我们的项目根目录，直接按照教程走，执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan admin:minify orange --color fbbd08 --publish</span><br></pre></td></tr></table></figure><p>然后会有接下来的显示，这就没问题了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">➜  yanji git:(master) php artisan admin:minify cecBlue --color 004ea2 --publish</span><br><span class="line">[cecBlue][#004ea2] npm run production...</span><br><span class="line"></span><br><span class="line">&gt; prod</span><br><span class="line">&gt; npm run production</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; production</span><br><span class="line">&gt; cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js</span><br><span class="line"></span><br><span class="line">//这里有很多的 warning 忽略即可（反正没 ERR 就行）</span><br><span class="line"></span><br><span class="line">DONE  Compiled successfully in 27702ms2:32:20 AM</span><br><span class="line"></span><br><span class="line">Asset      Size  Chunks                          Chunk Names</span><br><span class="line">/resources/dist/adminlte/adminlte.js  29.4 KiB       0  [emitted]               /resources/dist/adminlte/adminlte</span><br><span class="line">/resources/dist/adminlte/adminlte.js.map  83.9 KiB       0  [emitted] [dev]         /resources/dist/adminlte/adminlte</span><br><span class="line">/resources/dist/dcat/css/nunito.css  9.83 KiB          [emitted]</span><br><span class="line">/resources/dist/dcat/extra/action.js  2.85 KiB       1  [emitted]               /resources/dist/dcat/extra/action</span><br><span class="line">/resources/dist/dcat/extra/action.js.map  10.6 KiB       1  [emitted] [dev]         /resources/dist/dcat/extra/action</span><br><span class="line">/resources/dist/dcat/extra/grid-extend.js  7.65 KiB       2  [emitted]               /resources/dist/dcat/extra/grid-extend</span><br><span class="line">/resources/dist/dcat/extra/grid-extend.js.map  24.7 KiB       2  [emitted] [dev]         /resources/dist/dcat/extra/grid-extend</span><br><span class="line">/resources/dist/dcat/extra/select-table.js  4.79 KiB       3  [emitted]               /resources/dist/dcat/extra/select-table</span><br><span class="line">/resources/dist/dcat/extra/select-table.js.map  18.3 KiB       3  [emitted] [dev]         /resources/dist/dcat/extra/select-table</span><br><span class="line">/resources/dist/dcat/extra/upload.js  24.9 KiB       4  [emitted]               /resources/dist/dcat/extra/upload</span><br><span class="line">/resources/dist/dcat/extra/upload.js.map  74.5 KiB       4  [emitted] [dev]         /resources/dist/dcat/extra/upload</span><br><span class="line">/resources/dist/dcat/js/dcat-app.js  99.1 KiB       5  [emitted]               /resources/dist/dcat/js/dcat-app</span><br><span class="line">/resources/dist/dcat/js/dcat-app.js.map   192 KiB       5  [emitted] [dev]         /resources/dist/dcat/js/dcat-app</span><br><span class="line">resources/dist/adminlte/adminlte-cecBlue.css   656 KiB       0  [emitted]        [big]  /resources/dist/adminlte/adminlte</span><br><span class="line">resources/dist/dcat/css/dcat-app-cecBlue.css    68 KiB       0  [emitted]               /resources/dist/adminlte/adminlte</span><br><span class="line">resources/dist/dcat/extra/markdown.css  1.72 KiB       0  [emitted]               /resources/dist/adminlte/adminlte</span><br><span class="line">resources/dist/dcat/extra/upload.css  6.34 KiB       0  [emitted]               /resources/dist/adminlte/adminlte</span><br><span class="line"></span><br><span class="line">Copied Directory [/vendor/dcat/laravel-admin/resources/dist] To [/public/vendor/dcat-admin]</span><br><span class="line">Publishing complete.</span><br></pre></td></tr></table></figure><p>之后按照教程就可以了</p>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dcat admin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git pull 后如何快速回滚</title>
      <link href="/2021/08/03/26.%20git%20pull%20%E5%90%8E%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%9B%9E%E6%BB%9A/"/>
      <url>/2021/08/03/26.%20git%20pull%20%E5%90%8E%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%9B%9E%E6%BB%9A/</url>
      
        <content type="html"><![CDATA[<p>在服务器执行 <code>git pull</code> 后发现生产环境报错，急需回滚到上一个安全版本，这时候我们需要运行 <code>git reflog</code> 命令查看你的历史变更记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@user www.xxx.com]# git reflog</span><br><span class="line">efb4b67 HEAD@&#123;0&#125;: pull: Fast-forward</span><br><span class="line">fb7675d HEAD@&#123;1&#125;: pull: Fast-forward</span><br><span class="line">77d8371 HEAD@&#123;2&#125;: pull: Fast-forward</span><br><span class="line">3fa69a3 HEAD@&#123;3&#125;: pull: Fast-forward</span><br><span class="line">fa72965 HEAD@&#123;4&#125;: pull: Fast-forward</span><br><span class="line">ffe128e HEAD@&#123;5&#125;: pull: Fast-forward</span><br><span class="line">c511308 HEAD@&#123;6&#125;: pull: Fast-forward</span><br><span class="line">ef21f31 HEAD@&#123;7&#125;: pull: Fast-forward</span><br><span class="line">8082a1b HEAD@&#123;8&#125;: pull: Fast-forward</span><br><span class="line">7551f60 HEAD@&#123;9&#125;: pull: Fast-forward</span><br><span class="line">0486156 HEAD@&#123;10&#125;: pull: Fast-forward</span><br><span class="line">2be1fb0 HEAD@&#123;11&#125;: pull: Fast-forward</span><br><span class="line">b3aec43 HEAD@&#123;12&#125;: pull: Fast-forward</span><br><span class="line">c3318a4 HEAD@&#123;13&#125;: pull: Fast-forward</span><br><span class="line">8ab54e1 HEAD@&#123;14&#125;: pull: Fast-forward</span><br><span class="line">966c7ae HEAD@&#123;15&#125;: pull: Fast-forward</span><br><span class="line">2e8a177 HEAD@&#123;16&#125;: pull: Fast-forward</span><br><span class="line">5800282 HEAD@&#123;17&#125;: pull: Fast-forward</span><br><span class="line">3e70800 HEAD@&#123;18&#125;: pull: Fast-forward</span><br><span class="line">e4f45d9 HEAD@&#123;19&#125;: pull: Fast-forward</span><br><span class="line">9069d11 HEAD@&#123;20&#125;: pull: Fast-forward</span><br><span class="line">8b45ce5 HEAD@&#123;21&#125;: pull: Fast-forward</span><br><span class="line">95a2d13 HEAD@&#123;22&#125;: pull: Fast-forward</span><br><span class="line">d6ac3b6 HEAD@&#123;23&#125;: reset: moving to origin/master</span><br><span class="line">99213c9 HEAD@&#123;24&#125;: pull: Fast-forward</span><br><span class="line">d9b90ca HEAD@&#123;25&#125;: reset: moving to origin/master</span><br><span class="line">d7258c4 HEAD@&#123;26&#125;: clone: from https://e.coding.net/xxxxxxxxxxxxxxxxxxxxxx.git</span><br></pre></td></tr></table></figure><p>最上面的那条记录就是问题的那次，我们需要回滚到上一次，即 <code>fb7675d</code> 这里，输入如下指令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard fb7675d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我开发用到的各种技术参数</title>
      <link href="/2021/06/08/21.%20%E6%88%91%E5%BC%80%E5%8F%91%E7%94%A8%E5%88%B0%E7%9A%84%E5%90%84%E7%A7%8D%E6%8A%80%E6%9C%AF%E5%8F%82%E6%95%B0/"/>
      <url>/2021/06/08/21.%20%E6%88%91%E5%BC%80%E5%8F%91%E7%94%A8%E5%88%B0%E7%9A%84%E5%90%84%E7%A7%8D%E6%8A%80%E6%9C%AF%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p> 开发环境</p><ul><li>homestead V12.3</li><li>Settler v11.3.0 (Ubuntu 20.04)</li><li>Ubuntu LTS 20.04</li><li>PHP 8.0.1 (cli)  </li><li>mysql  Ver 8.0.23-0ubuntu0.20.04.1 for Linux on x86_64 ((Ubuntu))</li><li>nginx 1.18.0 (Ubuntu)</li></ul><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><ul><li>Visual Studio Code 1.56.2</li><li>Navicat Premium 15（15.0.25）</li><li>Oracle VM VirtualBox 6.1.22 r144080 (Qt5.6.2)</li><li>Github Desktiop Version 2.8.2 (x64)</li><li>Termius 7.12.0（Windows store version）</li></ul><h1 id="浏览器调试"><a href="#浏览器调试" class="headerlink" title="浏览器调试"></a>浏览器调试</h1><ul><li>Google Chrome 91.0.4472.77（正式版本）（64 位）</li><li>Microsoft Edge 91.0.864.41 （官方内部版本）（64 位）</li><li>360极速浏览器 13.0.2250.0</li><li>IE 21H1</li></ul><h1 id="技术版本"><a href="#技术版本" class="headerlink" title="技术版本"></a>技术版本</h1><ul><li>laravel 8</li><li>Dcat Admin 2</li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>laravel 项目 Homestead 开发环境的搭建</title>
      <link href="/2021/06/08/22.%20Laravel%20%E9%A1%B9%E7%9B%AE%20Homestead%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/06/08/22.%20Laravel%20%E9%A1%B9%E7%9B%AE%20Homestead%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="做好准备"><a href="#做好准备" class="headerlink" title="做好准备"></a>做好准备</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Homestead &amp;&amp; vagrant up</span><br><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure><p>在虚拟机中进入 <code>code</code> 文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/code</span><br></pre></td></tr></table></figure><h1 id="Composer-加速"><a href="#Composer-加速" class="headerlink" title="Composer 加速"></a>Composer 加速</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure><h1 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project laravel/laravel yourapp</span><br></pre></td></tr></table></figure><h1 id="修改-Hosts"><a href="#修改-Hosts" class="headerlink" title="修改 Hosts"></a>修改 Hosts</h1><p>首先找到 <code>Hosts</code> 文件，<code>Windows</code> 下是在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:/Windows/System32/Drivers/etc/hosts</span><br></pre></td></tr></table></figure><p>文件成功打开后，在 <code>hosts</code> 文件最后面新增下面一行以完成设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.10.10   yourapp.test</span><br></pre></td></tr></table></figure><h1 id="新增站点"><a href="#新增站点" class="headerlink" title="新增站点"></a>新增站点</h1><p>进入 homestead 的根目录，找到 <code>Homestead.yaml</code> 并打开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">ip: &quot;192.168.10.10&quot;</span><br><span class="line">memory: 2048</span><br><span class="line">cpus: 2</span><br><span class="line">provider: virtualbox</span><br><span class="line"></span><br><span class="line">authorize: ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">keys:</span><br><span class="line">    - ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">folders:</span><br><span class="line">    - map: ~/Code</span><br><span class="line">      to: /home/vagrant/Code</span><br><span class="line"></span><br><span class="line">sites:</span><br><span class="line">    - map: homestead.test</span><br><span class="line">      to: /home/vagrant/Code/laravel/public</span><br><span class="line">    - map: yourapp.test #  &lt;--- 这里</span><br><span class="line">      to: /home/vagrant/Code/yourapp/public #  &lt;--- 这里</span><br><span class="line"></span><br><span class="line">databases:</span><br><span class="line">    - homestead</span><br><span class="line">    - yourapp #  &lt;--- 这里</span><br><span class="line"></span><br><span class="line">variables:</span><br><span class="line">    - key: APP_ENV</span><br><span class="line">      value: local</span><br><span class="line"></span><br><span class="line">features:</span><br><span class="line">    - mysql: true</span><br><span class="line"></span><br><span class="line"># blackfire:</span><br><span class="line">#     - id: foo</span><br><span class="line">#       token: bar</span><br><span class="line">#       client-id: foo</span><br><span class="line">#       client-token: bar</span><br><span class="line"></span><br><span class="line"># ports:</span><br><span class="line">#     - send: 93000</span><br><span class="line">#       to: 9300</span><br><span class="line">#     - send: 7777</span><br><span class="line">#       to: 777</span><br><span class="line">#       protocol: udp</span><br></pre></td></tr></table></figure><p>这里主要设置了 <code>sites</code> 和 <code>databases</code> 两项。 <code>sites</code> 会将域名 <code>larabbs.test</code> 映射到虚拟机的 <code>/home/vagrant/Code/yourapp/public</code> 文件夹上，而 <code>databases</code> 则为新创建的项目指定数据库名</p><h1 id="重启虚拟机"><a href="#重启虚拟机" class="headerlink" title="重启虚拟机"></a>重启虚拟机</h1><p>对 <code>Homestead.yaml</code> 文件进行了更改之后，需要运行下面命令来使其更改生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Homestead</span><br><span class="line">vagrant provision</span><br><span class="line">vagrant reload</span><br></pre></td></tr></table></figure><h1 id="env-修改"><a href="#env-修改" class="headerlink" title=".env 修改"></a>.env 修改</h1><p>我们还需要对应用根目录下的 <code>.env</code> 文件进行设置，为应用指定数据库名称 <code>yourapp</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">APP_NAME=yourapp</span><br><span class="line">APP_ENV=local</span><br><span class="line">APP_KEY=your_app_key</span><br><span class="line">APP_DEBUG=true</span><br><span class="line">APP_URL=http://yourapp.test</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">DB_DATABASE=yourapp</span><br><span class="line">DB_USERNAME=homestead</span><br><span class="line">DB_PASSWORD=secret</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><h1 id="统一代码风格"><a href="#统一代码风格" class="headerlink" title="统一代码风格"></a>统一代码风格</h1><p>对项目的 <code>.editorconfig</code> 进行统一修改。这是为了保证我们的代码风格一致，以避免引起不必要的歧义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf-8</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = true</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 4</span><br><span class="line">trim_trailing_whitespace = true</span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">trim_trailing_whitespace = false</span><br><span class="line"></span><br><span class="line">[*.&#123;yml,yaml&#125;]</span><br><span class="line">indent_size = 2</span><br><span class="line"></span><br><span class="line">[*.&#123;js,html,blade.php,css,scss,vue&#125;]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br></pre></td></tr></table></figure><h1 id="访问应用"><a href="#访问应用" class="headerlink" title="访问应用"></a>访问应用</h1><p>在 Chrome 浏览器中打开 <code>yourapp.test</code> 即可</p><h1 id="git-版本控制"><a href="#git-版本控制" class="headerlink" title="git 版本控制"></a>git 版本控制</h1><p>线上建立好仓库后，记住 ssh 方式连接的代码仓库名，在虚机的项目根目录下输入如下指令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &quot;初始化项目&quot;</span><br><span class="line">git remote add origin git@e.coding.net:nightingalewk/yanji/yanji.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h1 id="git-分支的使用"><a href="#git-分支的使用" class="headerlink" title="git 分支的使用"></a>git 分支的使用</h1><p>分支使用时，首先执行如下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git checkout -b static-pages</span><br></pre></td></tr></table></figure><p>当写完一阶段的代码时，需要合并到主分支，需要如下操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m &quot;完成静态页面的建立&quot;</span><br><span class="line">git checkout master</span><br><span class="line">git merge static-pages</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h1 id="启用-Bootstrap"><a href="#启用-Bootstrap" class="headerlink" title="启用 Bootstrap"></a>启用 Bootstrap</h1><p>项目中使用 Bootstrap 前端框架，需要先执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">composer require laravel/ui --dev</span><br><span class="line">php artisan ui bootstrap</span><br></pre></td></tr></table></figure><p>开始安装之前，我们需要设置安装器来使用国内的淘宝镜像加速，加速镜像的原理是使用国内的 CDN 来下载所需代码包，会更加顺畅</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry=https://registry.npm.taobao.org</span><br><span class="line">yarn config set registry &#x27;https://registry.npm.taobao.org&#x27;</span><br></pre></td></tr></table></figure><p>使用用 Yarn 对扩展包进行安装，请在项目根目录下运行以下命令进行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SASS_BINARY_SITE=http://npm.taobao.org/mirrors/node-sass yarn --no-bin-links</span><br><span class="line">yarn add cross-env --no-bin-links</span><br></pre></td></tr></table></figure><h1 id="开发常用指令"><a href="#开发常用指令" class="headerlink" title="开发常用指令"></a>开发常用指令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//清理各类缓存</span><br><span class="line">php artisan cache:clear &amp;&amp; php artisan config:clear &amp;&amp; php artisan route:clear &amp;&amp; php artisan view:clear</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> homestead </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 项目部署到服务器的流程</title>
      <link href="/2021/06/08/23.%20Laravel%20%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%B5%81%E7%A8%8B/"/>
      <url>/2021/06/08/23.%20Laravel%20%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="新建虚拟站点"><a href="#新建虚拟站点" class="headerlink" title="新建虚拟站点"></a>新建虚拟站点</h1><p>进入到 oneinstack 根目录，输入 <code>./vhost</code> 新建虚拟主机，在开始之前首先申请好指向本测试服务器的域名，ssl 证书可使用 oneinstack 自动生成并自动续期，一路完成后会有如下提示即可</p><p>&#x2F;&#x2F; #######################################################################<br>&#x2F;&#x2F; #       OneinStack for CentOS&#x2F;RedHat 6+ Debian 8+ and Ubuntu 14+      #<br>&#x2F;&#x2F; #       For more information please visit <a href="https://oneinstack.com/">https://oneinstack.com</a>      #<br>&#x2F;&#x2F; #######################################################################<br>&#x2F;&#x2F; Your domain:                  yanji.wkarrow.top<br>&#x2F;&#x2F; Virtualhost conf:             &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;vhost&#x2F;yanji.wkarrow.top.conf<br>&#x2F;&#x2F; Directory of:                 &#x2F;data&#x2F;wwwroot&#x2F;yanji.wkarrow.top<br>&#x2F;&#x2F; Rewrite rule:                 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;rewrite&#x2F;laravel.conf<br>&#x2F;&#x2F; Let’s Encrypt SSL Certificate:&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;ssl&#x2F;yanji.wkarrow.top.crt<br>&#x2F;&#x2F; SSL Private Key:              &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;ssl&#x2F;yanji.wkarrow.top.key</p><h1 id="git-clone-拷贝线上仓库数据到本地"><a href="#git-clone-拷贝线上仓库数据到本地" class="headerlink" title="git clone 拷贝线上仓库数据到本地"></a>git clone 拷贝线上仓库数据到本地</h1><p>cd 到 <code>/date/wwwroot/yanji.wkarrow.top</code> 目录中，执行<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">composer update</span><br><span class="line">php artisan key:generate</span><br></pre></td></tr></table></figure></p><h1 id="修改-env-文件"><a href="#修改-env-文件" class="headerlink" title="修改 .env 文件"></a>修改 .env 文件</h1><p>在项目根目录下执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp .env.example .env</span><br></pre></td></tr></table></figure><p>之后 <code>vim .env</code> 配置站点数据</p><h1 id="修改站点权限"><a href="#修改站点权限" class="headerlink" title="修改站点权限"></a>修改站点权限</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 yanji.wkarrow.top</span><br><span class="line">chown -R www-data:www-data yanji.wkarrow.top</span><br><span class="line"></span><br><span class="line">cd yanji,wkarrow.top</span><br><span class="line">chgrp -R www storage bootstrap/cache</span><br><span class="line">chmod -R ug+rwx storage bootstrap/cache</span><br></pre></td></tr></table></figure><h1 id="修改-nginx-配置"><a href="#修改-nginx-配置" class="headerlink" title="修改 nginx 配置"></a>修改 nginx 配置</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/conf/vhost</span><br><span class="line">vim yanji.wkarrow.top.conf</span><br><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p>前往 oneinstack 自带的 phpMyAdmin 新建一个名为“岩脊”数据库</p><h1 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan migrate</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码部署 </tag>
            
            <tag> oneinstack </tag>
            
            <tag> lnmp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 项目在服务器上的更新</title>
      <link href="/2021/06/08/24.%20Laravel%20%E9%A1%B9%E7%9B%AE%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E6%9B%B4%E6%96%B0/"/>
      <url>/2021/06/08/24.%20Laravel%20%E9%A1%B9%E7%9B%AE%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>代码更新时会经常遇到服务器数据变动导致无法 git pull ，需要强行覆盖并重新进行参数配置，具体如下</p><h1 id="强制覆盖"><a href="#强制覆盖" class="headerlink" title="强制覆盖"></a>强制覆盖</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master </span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h1 id="修改-config-配置文件"><a href="#修改-config-配置文件" class="headerlink" title="修改 config 配置文件"></a>修改 config 配置文件</h1><p>&#x2F;data&#x2F;wwwroot&#x2F;yanji.wkarrow.top&#x2F;config&#x2F;admin.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"> &#x27;https&#x27; =&gt; env(&#x27;ADMIN_HTTPS&#x27;, ture),</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>之后重启 nginx 服务并清理缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br><span class="line">//清理各类缓存</span><br><span class="line">php artisan cache:clear &amp;&amp; php artisan config:clear &amp;&amp; php artisan route:clear &amp;&amp; php artisan view:clear</span><br></pre></td></tr></table></figure><h1 id="数据库迁移并填充"><a href="#数据库迁移并填充" class="headerlink" title="数据库迁移并填充"></a>数据库迁移并填充</h1><p>若有需要可以执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php artisan migrate:regresh --seed</span><br><span class="line">php artisan admin:install</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oneinstack </tag>
            
            <tag> lnmp </tag>
            
            <tag> 代码更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十三香小龙虾</title>
      <link href="/2021/05/18/20.%20%E5%8D%81%E4%B8%89%E9%A6%99%E5%B0%8F%E9%BE%99%E8%99%BE/"/>
      <url>/2021/05/18/20.%20%E5%8D%81%E4%B8%89%E9%A6%99%E5%B0%8F%E9%BE%99%E8%99%BE/</url>
      
        <content type="html"><![CDATA[<p>有时间得试试麻辣的，先拿五香的开刀</p><ol><li>首先将小龙虾处理好<ul><li>洗刷，把腹部赃物刷洗干净，全部洗完开始清水清洗，至少洗7次</li><li>清理食囊，虾头45°剪掉，挑出食囊，虾线建议吃的时候清理虾线</li></ul></li><li>其他准备<ul><li>干辣椒 30g 清洗一遍，洗好切段，热水浸泡</li><li>葱白切段</li><li>50g 大蒜切粒</li><li>50g 姜切粒</li><li>15g 豆瓣酱</li></ul></li><li>制作<ul><li>加油，姜蒜小火爆香，加入豆瓣酱炒香炒出红油</li><li>下小龙虾，大火爆香</li><li>10g 酱油加入，继续翻炒</li><li>加入开水和啤酒没过小龙虾</li><li>下辣椒干和辣椒水</li><li>下 5g 十三香，5g 蚝油，2g 白糖</li><li>大火烧开烧浓稠，之后加入葱段</li><li>出锅前再下 5g 十三香</li></ul></li><li>其他<ul><li>放凉后加入冰箱一晚上，第二天拿出来开火继续收汁味道更香更入味</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 海鲜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蛋挞</title>
      <link href="/2021/05/03/19.%20%E8%9B%8B%E6%8C%9E/"/>
      <url>/2021/05/03/19.%20%E8%9B%8B%E6%8C%9E/</url>
      
        <content type="html"><![CDATA[<p>我的蛋挞的用量基本上会出14个左右的蛋挞</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul><li>鸡蛋两个打散，再加入20g细砂糖、150g淡奶油、70g纯牛奶，然后搅拌均匀，可以过筛一下</li><li>蛋挞皮倒入蛋挞液</li><li>烤箱上下190°预热5分钟，然后将蛋挞放入烤箱开烤，在190°的温度下烤制20min，具体需要看自己的烤箱脾气</li><li>搞定！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 甜品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西红柿土豆丁浓汤</title>
      <link href="/2021/02/21/18.%20%E8%A5%BF%E7%BA%A2%E6%9F%BF%E5%9C%9F%E8%B1%86%E4%B8%81%E6%B5%93%E6%B1%A4/"/>
      <url>/2021/02/21/18.%20%E8%A5%BF%E7%BA%A2%E6%9F%BF%E5%9C%9F%E8%B1%86%E4%B8%81%E6%B5%93%E6%B1%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="食材"><a href="#食材" class="headerlink" title="食材"></a>食材</h2><ul><li>西红柿</li><li>土豆</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul><li>西红柿和土豆切丁</li><li>起锅烧油，放入西红柿，翻炒至软烂</li><li>倒入土豆继续翻炒数下</li><li>加水没过食材，加入生抽和盐</li><li>大火煮沸，转中小火炖 5 分钟</li><li>出锅前撒入些许鸡精，完成</li></ul>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秘制特色鸡蛋</title>
      <link href="/2021/02/21/17.%20%E7%A7%98%E5%88%B6%E7%89%B9%E8%89%B2%E9%B8%A1%E8%9B%8B/"/>
      <url>/2021/02/21/17.%20%E7%A7%98%E5%88%B6%E7%89%B9%E8%89%B2%E9%B8%A1%E8%9B%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="食材"><a href="#食材" class="headerlink" title="食材"></a>食材</h2><ul><li>鸡蛋</li><li>葱末</li><li>香菜末</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul><li>鸡蛋打散，加入葱末</li><li>调制秘制酱汁<ul><li>生抽 一勺</li><li>蚝油 一勺</li><li>淀粉 一勺</li><li>胡椒粉 少许</li><li>白糖 少许</li><li>食盐 少许</li><li>凉水 少许，以冲开上述调料</li></ul></li><li>起锅烧油，炒鸡蛋，炒熟炒散后倒入酱汁，大火收汁</li><li>出锅前撒入香菜</li></ul><p>主打一个拌面搭档，或者配合炫米饭也是极好的 😊</p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热菜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑椒意面</title>
      <link href="/2021/02/20/16.%20%E9%BB%91%E6%A4%92%E6%84%8F%E9%9D%A2/"/>
      <url>/2021/02/20/16.%20%E9%BB%91%E6%A4%92%E6%84%8F%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="食材"><a href="#食材" class="headerlink" title="食材"></a>食材</h2><ul><li>洋葱丁</li><li>意面</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul><li>意面放入沸水中煮熟，煮面过程中加半勺盐，捞出后加入食用油防止粘连</li><li>起锅烧油，下入洋葱丁煸炒，倒入一勺酱油、些许黑胡椒和黑胡椒酱</li><li>加入意面继续拌匀</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>可以加入一些蔬菜丁和洋葱一起炒</p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主食 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>咖喱鸡块</title>
      <link href="/2021/02/18/15.%20%E5%92%96%E5%96%B1%E9%B8%A1%E5%9D%97/"/>
      <url>/2021/02/18/15.%20%E5%92%96%E5%96%B1%E9%B8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="食材"><a href="#食材" class="headerlink" title="食材"></a>食材</h2><ul><li>鸡身上的肉</li><li>土豆块</li><li>洋葱丁</li><li>香菇丁</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul><li>鸡块切丁，一勺生抽、一勺料酒、一勺淀粉、黑胡椒适量，腌制 10 分钟</li><li>土豆、香菇和洋葱切丁，之后土豆泡水</li><li>起锅烧油，煎一下鸡块，变色后放洋葱煸炒，再放入土豆香菇煸炒</li><li>加水没过食材，加入咖喱块、两勺生抽、一勺蚝油、一勺白糖、一勺十三香，大火烧开，小火炖 10 分钟</li><li>出锅前加一勺食盐</li></ul>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主食 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 基础学习笔记</title>
      <link href="/2021/02/01/14.%20java%20%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/02/01/14.%20java%20%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-系统环境配置"><a href="#1-系统环境配置" class="headerlink" title="1.系统环境配置"></a>1.系统环境配置</h2><p>共需要添加两个地方，分别为</p><ul><li>JAVA_HOME。需要设置为 jdk 的安装目录，如 <code>C:\Program Files\Java\jdk-11.0.10</code></li><li>PATH。为其新增一个变量 <code>%JAVA_HOME%\bin</code></li></ul><h2 id="2-常用-DOS-指令"><a href="#2-常用-DOS-指令" class="headerlink" title="2.常用 DOS 指令"></a>2.常用 DOS 指令</h2><ul><li>dir</li><li>cd</li></ul><h2 id="3-常量"><a href="#3-常量" class="headerlink" title="3.常量"></a>3.常量</h2><p>字符串、字符、整数、小数、布尔、空</p><h2 id="4-计算机存储单元"><a href="#4-计算机存储单元" class="headerlink" title="4.计算机存储单元"></a>4.计算机存储单元</h2><p>1 B（ 字节 ） &#x3D; 8 bit （ 比特位 ）</p><h2 id="5-数据类型"><a href="#5-数据类型" class="headerlink" title="5.数据类型"></a>5.数据类型</h2><ul><li>基本数据类型<ul><li>数值型<ul><li>整数 <ul><li>byte 1</li><li>short 2</li><li>int 4 ( 默认 )</li><li>long 8</li></ul></li><li>浮点数 <ul><li>float 4</li><li>double 8 （ 默认 ）</li></ul></li><li>字符 <ul><li>char 2</li></ul></li></ul></li><li>非数值型<ul><li>布尔<ul><li>boolean 1</li></ul></li></ul></li></ul></li><li>引用数据类型<ul><li>类 class</li><li>接口 interface</li><li>数组 []</li></ul></li></ul><p>防止 long 太大，在数后面加个 L 即可，同理，float 是加 F，对于 float 还有其他的格式 <code>float b = (float) 13.14;</code> 也可以</p><h2 id="6-标识符"><a href="#6-标识符" class="headerlink" title="6.标识符"></a>6.标识符</h2><p>由 <strong>数字、字母、下划线和美元符号</strong> 组成，遵循</p><ul><li><strong>数字</strong> 不当开头</li><li><strong>关键字</strong> 不用，（关键字在系统里全是小写，Class 就可以当标识符）</li><li><strong>大小写</strong> 区分</li></ul><p>命名规范：</p><ul><li>小驼峰。如 <code>myStudentCount</code></li><li>大驼峰。如 <code>MyStudentCount</code>，当仅为一个单词时，首字母大写，如 <code>Fuck</code></li></ul><p>小驼峰用于 <strong>方法和变量</strong>，大驼峰用于 <strong>类</strong></p><h2 id="7-类型转换"><a href="#7-类型转换" class="headerlink" title="7.类型转换"></a>7.类型转换</h2><h3 id="7-1-自动类型转换"><a href="#7-1-自动类型转换" class="headerlink" title="7.1 自动类型转换"></a>7.1 自动类型转换</h3><p>小范围换大范围</p><p>( ( byte -&gt; short ) or char ) -&gt; int -&gt; long -&gt; float -&gt; double</p><h3 id="7-2-强制类型转换"><a href="#7-2-强制类型转换" class="headerlink" title="7.2 强制类型转换"></a>7.2 强制类型转换</h3><p>大范围换小范围，上面的流程图反过来即可，如<br><code>int k = (int)88.88</code> ，浮点转整数时，小数点后会抹去，数据丢失，不建议使用</p><h2 id="8-运算符"><a href="#8-运算符" class="headerlink" title="8.运算符"></a>8.运算符</h2><h3 id="8-1-赋值运算符"><a href="#8-1-赋值运算符" class="headerlink" title="8.1 赋值运算符"></a>8.1 赋值运算符</h3><ul><li>逻辑与 &amp;</li><li>逻辑或 |</li><li>逻辑异或 ^ 例如，a^b，ab 结果不同为 true ，否则为 false</li><li>逻辑非 ！</li><li>短路与  &amp;&amp;</li><li>短路非  ||</li></ul><p>&amp;&amp; 和 &amp; 和区别：运算符左右两边，经过判断均为 false，逻辑与和短路与均可报 false，但是逻辑与是执行了左右两边并对其进行比较得到的 false，而3短路与是只比较了左侧的城里，右侧的压根没看，直接看着左面是 false 就直接短路整个语句，输出 false</p><ul><li>短路与是左边为 false 直接不执行了，左边为真则右边执行</li><li>短路或是左边为 true 直接不执行了，左边为假则右边执行</li></ul><h3 id="8-2-三元运算符"><a href="#8-2-三元运算符" class="headerlink" title="8.2 三元运算符"></a>8.2 三元运算符</h3><p>a &gt; b ? a : b</p><p>关系表达式 ？ 表达式1 ： 表达式2</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B 站上传视频防压参数</title>
      <link href="/2021/01/21/13.%20B%20%E7%AB%99%E4%B8%8A%E4%BC%A0%E8%A7%86%E9%A2%91%E9%98%B2%E5%8E%8B%E5%8F%82%E6%95%B0/"/>
      <url>/2021/01/21/13.%20B%20%E7%AB%99%E4%B8%8A%E4%BC%A0%E8%A7%86%E9%A2%91%E9%98%B2%E5%8E%8B%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>使用的是 PR ，这里只记录导出时的参数，自用防忘</p><h2 id="导出设置"><a href="#导出设置" class="headerlink" title="导出设置"></a>导出设置</h2><ul><li>格式：H264</li></ul><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><ul><li>宽度：1920</li><li>高度：1080</li><li>帧速率：60</li><li>√ 以最大深度渲染</li><li>比特率编码：VBR，2次</li><li>目标比特率：19</li><li>最大比特率：50</li><li>关键帧距离：72</li></ul><h2 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h2><ul><li>采样率：44100 Hz</li><li>比特率：320</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>√ 使用最高渲染质量</li><li>bilibili 上传助手的单个文件最大 4 GB<br>以上参数注意修改，其他保持默认</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pr </tag>
            
            <tag> bilibili </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>番茄肉酱意面</title>
      <link href="/2021/01/17/12.%20%E7%95%AA%E8%8C%84%E8%82%89%E9%85%B1%E6%84%8F%E9%9D%A2/"/>
      <url>/2021/01/17/12.%20%E7%95%AA%E8%8C%84%E8%82%89%E9%85%B1%E6%84%8F%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="食材"><a href="#食材" class="headerlink" title="食材"></a>食材</h2><ul><li><strong>洋葱</strong> 切小块</li><li><strong>番茄</strong> 切块（如果是熟透的，可以不用去皮）</li><li><strong>肉末</strong> 加姜片和料酒腌制 10 分钟</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul><li>意面<ul><li>放入沸水中煮熟，煮面过程中加半勺盐，捞出后加入食用油防止粘连</li></ul></li><li>肉酱<ul><li>锅中热油放入洋葱，炒至变软后加入肉末翻炒至变色</li><li>加 1 勺生抽调味，加入番茄炒至炒至变软</li><li>加入酱料（3 勺番茄酱，1 勺盐，适量黑胡椒），小火熬制</li></ul></li><li>酱汁熬至糊状，加入意面拌匀，每一根面条要裹满酱汁，要用小火搅拌</li><li>出锅摆盘！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主食 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静电导致电脑无法开机问题记录</title>
      <link href="/2020/12/08/11.%20%E9%9D%99%E7%94%B5%E5%AF%BC%E8%87%B4%E7%94%B5%E8%84%91%E6%97%A0%E6%B3%95%E5%BC%80%E6%9C%BA%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/12/08/11.%20%E9%9D%99%E7%94%B5%E5%AF%BC%E8%87%B4%E7%94%B5%E8%84%91%E6%97%A0%E6%B3%95%E5%BC%80%E6%9C%BA%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>今天早上起床开机，电脑运行，但是显示器无画面，体现为无信号传输到显示器上，通过控制变量法排除问题，最终预估是显卡或者主板的事情，故保修 Dell 售后，其后电脑断电放置一边等待明天上门的更换</p><p>随后一段时间，工程师来电让我再测试一次，结果电脑居然顺利的开机并显示画面</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>冬季干燥，地暖高温，导致室内湿度低温度高，很容易产生静电，以致电脑无法开机</p><p>冬季在屋子里注意适度温度，打开加湿器保证室内湿度，防止静电对电子元件的干扰和损伤</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑维修 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 部署阿里云服务器教程</title>
      <link href="/2020/11/30/10.%20Hexo%20%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2020/11/30/10.%20Hexo%20%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>我个人的网站都是部署在 Coding pages 服务上，免费够用还方便，之后呢， Coding 被腾讯云收编了，我心思应该不会对我有啥影响吧，而且我还心思 Coding 的静态服务应该在腾讯云的加持下，体验应该更进一步</p><p>但是，<strong>腾讯云不讲武德，来，骗，来，偷袭，我一个老 Coding 用户</strong>，具体做法就是提示我 Coding 的免费静态网站服务现在需要强制升级到腾讯云静态网页服务，问题就在于后者是 <strong>收费</strong> 的，其实是一些 CDN 流量和存储空间等未来存在收费的可能性</p><p>这就很操蛋了，反正你腾讯云这给我花里胡哨的，那么👴说撤就撤，立刻将 Hexo 部署到我的私有服务器上，不和你逼逼赖赖的，多一事不如少一事，省心</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>我说一下我的服务器环境：阿里云的 ECS 服务器，Ubuntu 18.04，使用 Oneinstack 部署了 LNMP 环境，并且为我的网站建立了一个虚拟主机，Hexo 生成的静态文件也就放在这个虚拟主机里，并使用网址访问，全站强制转 HTTPS</p><p>根据官方文档来就行，具体如下 <a href="https://hexo.io/zh-cn/docs/one-command-deployment">https://hexo.io/zh-cn/docs/one-command-deployment</a></p><p>其中，这里我选择的部署方式是 <strong>SFTP</strong>，我只把我的配置文件贴一下，方便日后查阅</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: sftp</span><br><span class="line">  host: 10.10.10.10  //远端服务器 IP</span><br><span class="line">  user: MaBaoGuo</span><br><span class="line">  pass: MaBaoGuo666</span><br><span class="line">  remotePath: /data/wwwroot/www.mabaoguo.com</span><br><span class="line">  port: 22</span><br></pre></td></tr></table></figure><p>我省略了一些文档里的键值，用不上，我这样就可以用，没问题</p><p>之后再本地执行 <code>hexo clean &amp;&amp; hexo g -d</code> 即可将站点推送到服务器上</p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wordpress 必装插件</title>
      <link href="/2020/11/25/9.%20Wordpress%20%E5%BF%85%E8%A3%85%E6%8F%92%E4%BB%B6/"/>
      <url>/2020/11/25/9.%20Wordpress%20%E5%BF%85%E8%A3%85%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>对 Wordpress 的使用过程中，总结了一套我认为比较不错，建站必装的插件，在此仅提供非常必须的插件列表，那些满足个人需求的我就没必要整理了</p><ul><li><a href="https://wp-china.org/"><strong>WP-China-Yes</strong></a> - 将你的 WordPress 接入本土生态体系中，这将为你提供一个更贴近中国人使用习惯的 WordPress</li></ul><p>没错，<strong>就一个</strong></p><p>我对 Worpdress 的使用，是从原生到复杂，最终回归原生，插件多了就是慢，影响性能，并且各种插件给你的选择太多，会扰乱你的想法，让本来很简单的事情复杂，让单纯的写作变得失去本心（这也是我逃离 WP，拥抱 hexo 的原因😀）</p><p>我需要的，只是解决 WP 本土使用上因网络问题造成的缓慢问题，只要解决这个，我就可以舒适的体验 WP 为我提供的全部功能，进而满足我的需求，那就够了</p><p>学会“做减法”，会让你又一个更清晰的思维，去专心做对的事情</p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“ 再给我十秒吧，托克 ”</title>
      <link href="/2020/11/23/8.%20%E2%80%9C%20%E5%86%8D%E7%BB%99%E6%88%91%E5%8D%81%E7%A7%92%E5%90%A7%EF%BC%8C%E6%89%98%E5%85%8B%20%E2%80%9D/"/>
      <url>/2020/11/23/8.%20%E2%80%9C%20%E5%86%8D%E7%BB%99%E6%88%91%E5%8D%81%E7%A7%92%E5%90%A7%EF%BC%8C%E6%89%98%E5%85%8B%20%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“ 再给我十秒吧，托克，我还没藏好 ”</p><p>“ 哥哥又耍赖，好吧，最后十秒 … ”</p><p>* 公子苦笑</p></blockquote><p><a href="https://cdn.blog.wkarrow.top/posts/TartagliaScreenShot.jpg"><img src="https://cdn.blog.wkarrow.top/posts/TartagliaScreenShot.jpg"></a></p><p>温暖的家人，亲切的朋友，忠实的手下，狠辣的敌人，他做好了每一个角色</p><p>就冲着这十秒，我把留给钟离的大保底果断的给了达达利亚！</p><p>主线任务中公子就是一个个性鲜明、强的一批的反派，而在魔神任务中，身为”玩具推销员”的他为自己的家人献上了一切，强烈对比下的那份无暇无私的爱，给我直接整泪目了😭</p><p>把反派角色刻画的如此深刻到位，mhy 真有你的啊，又骗我掏钱抽池，👴认了</p><p><strong>至冬国最厉害的玩具销售员，冲鸭！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> screen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Cloudreve 自建网盘的注意点</title>
      <link href="/2020/11/20/6.%20%E7%94%A8%20Cloudreve%20%E8%87%AA%E5%BB%BA%E7%BD%91%E7%9B%98%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
      <url>/2020/11/20/6.%20%E7%94%A8%20Cloudreve%20%E8%87%AA%E5%BB%BA%E7%BD%91%E7%9B%98%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>自建一个不限速、无限容量、无客户端、流程可控的在线云盘很有必要，有时候自己跨设备传个东西，和朋友分享几个小文件，自建盘高速且方便</p><p>我是用的是 Cloudreve 框架，配合七牛云存储来实现的</p><p>其中有几个注意点需要说一下</p><h2 id="1-反向代理白屏"><a href="#1-反向代理白屏" class="headerlink" title="1. 反向代理白屏"></a>1. 反向代理白屏</h2><p>原本 Cloudreve （以下称 CR）自己的使用逻辑是访问服务器 IP 和端口来访问可视化管理面板，但是我想使用 oneinstack 创建一个虚拟主机来，并分配一个二级域名访问我的 CR ，于是这就需要修改一下站点的 nginx 配置文件 </p><p>官方文档写的很明白，加上给的一段话即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_pass http://127.0.0.1:5212;</span><br><span class="line"></span><br><span class="line">    # 如果您要使用本地存储策略，请将下一行注释符删除，并更改大小为理论最大文件尺寸</span><br><span class="line">    # client_max_body_size 20000m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 oneinstack 自己默认创建的配置文件中含有大量已生成的 location 配置，不删除这些默认的信息会与我们后加的内容冲突导致访问网址白屏，我们只需删除那些自带的 location 配置即可</p><h2 id="2-反向代理访问缓慢"><a href="#2-反向代理访问缓慢" class="headerlink" title="2. 反向代理访问缓慢"></a>2. 反向代理访问缓慢</h2><p>上方代码中有一段是 <code>proxy_pass http://127.0.0.1:5212</code> ，我自己下意识的将 <code>127.0.0.1</code> 改为了 <code>47.100.100.100</code> 即我的服务器公网 IP（安全起见，这个 IP 是我编的 😋） ，此修改是没必要的，这样会徒增访问时间，保持原样即可，务必注意</p><h2 id="3-Oneinstack-中-Nginx-默认的-conf-位置"><a href="#3-Oneinstack-中-Nginx-默认的-conf-位置" class="headerlink" title="3. Oneinstack 中 Nginx 默认的 conf 位置"></a>3. Oneinstack 中 Nginx 默认的 conf 位置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/conf/vhost</span><br></pre></td></tr></table></figure><p>最后，按照官网的指南手册和网友的攻略可轻松快速的搭建一个属于自己的网盘，故不再重复叙述</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloudreve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 “WordPress 需要访问您网页服务器的权限” 问题</title>
      <link href="/2020/11/20/5.%20%E8%A7%A3%E5%86%B3%20%E2%80%9CWordPress%20%E9%9C%80%E8%A6%81%E8%AE%BF%E9%97%AE%E6%82%A8%E7%BD%91%E9%A1%B5%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%9D%83%E9%99%90%E2%80%9D%20%E9%97%AE%E9%A2%98/"/>
      <url>/2020/11/20/5.%20%E8%A7%A3%E5%86%B3%20%E2%80%9CWordPress%20%E9%9C%80%E8%A6%81%E8%AE%BF%E9%97%AE%E6%82%A8%E7%BD%91%E9%A1%B5%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%9D%83%E9%99%90%E2%80%9D%20%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>解决初次安装 wordpress 报错：“要执行请求的操作，WordPress需要访问您网页服务器的权限。 请输入您的 FTP 登录凭据以继续。 如果您忘记了您的登录凭据（如用户名、密码），请联系您的网站托管商。”的问题</p><p>问题的本质为服务器的相关权限问题，赋予正确的权限即可，只需如下两行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 755 site.website.top/</span><br><span class="line">chown -R www site.website.top/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Screen 安装与使用</title>
      <link href="/2020/11/20/7.%20Screen%20%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/11/20/7.%20Screen%20%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>为了保证使用 oneinstack 安装 lnmp 环境稳定不中断，使用 screen 指令可保证安装进程全程在线，不会因为本地 shell 关闭而终止，接下来就简单的记录一下我的实战经验</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install screen   //For ubuntu 20.04</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-创建会话"><a href="#1-创建会话" class="headerlink" title="1.创建会话"></a>1.创建会话</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S lnmp</span><br></pre></td></tr></table></figure><p>离开时，只需要按下 <code>ctrl</code> 并依次按下 <code>a</code> 和 <code>d</code> 即可，会话会继续在后台运行，不受干扰</p><h3 id="2-恢复会话"><a href="#2-恢复会话" class="headerlink" title="2.恢复会话"></a>2.恢复会话</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r lnmp</span><br></pre></td></tr></table></figure><p>这样就可显示处于后台的会话</p><h2 id="示例：安装-lnmp-环境"><a href="#示例：安装-lnmp-环境" class="headerlink" title="示例：安装 lnmp 环境"></a>示例：安装 lnmp 环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//新建名为 lnmp 的会话</span><br><span class="line">screen -S lnmp</span><br><span class="line"></span><br><span class="line">开始自动化安装 lnmp</span><br><span class="line">wget -c http://mirrors.linuxeye.com/oneinstack-full.tar.gz &amp;&amp; tar xzf oneinstack-full.tar.gz &amp;&amp; ./oneinstack/install.sh --nginx_option 1 --php_option 9 --phpcache_option 1 --php_extensions imagick,fileinfo,imap,ldap,phalcon,yaf,redis,memcached,memcache,mongodb,swoole --phpmyadmin  --db_option 1 --dbinstallmethod 1 --dbrootpwd Asdf9741 --pureftpd  --redis  --memcached  --reboot </span><br><span class="line"></span><br><span class="line">//离开并将会话后台进行</span><br><span class="line">ctrl + a d</span><br><span class="line"></span><br><span class="line">//查看后台会话</span><br><span class="line">screen -r lnmp</span><br></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://oneinstack.com/auto/">Oneinstack 官网</a></li><li><a href="https://zhuanlan.zhihu.com/p/26683968">【知乎】Screen命令安装使用教程（By：魏艾斯博客）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> screen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Personal PAC list</title>
      <link href="/2020/11/16/4.%20Personal%20PAC%20list/"/>
      <url>/2020/11/16/4.%20Personal%20PAC%20list/</url>
      
        <content type="html"><![CDATA[<p>我自己总结整理的 PAC 清单，在这里记录一下，以备不时之需</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">justmysocks.net,</span><br><span class="line">wallhaven.cc,</span><br><span class="line">alphacoders.com,</span><br><span class="line">pixiv.net,</span><br><span class="line">alphacoders.com,</span><br><span class="line">nexusmods.com,</span><br><span class="line">iwara.tv,</span><br><span class="line">rule34.xxx,</span><br><span class="line">pixiv.net,</span><br><span class="line">pximg.net,</span><br><span class="line">steamcommunity.com,</span><br><span class="line">fontawesome.com,</span><br><span class="line">ichr.me,</span><br><span class="line">github.com,</span><br><span class="line">e-hentai.org,</span><br><span class="line">nightlifeporn.com,</span><br><span class="line">zchan.moe,</span><br><span class="line">alphacoders.com,</span><br><span class="line">dribbble.com,</span><br><span class="line">manypixels.co,</span><br><span class="line">minecraft.net,</span><br><span class="line">winscp.net</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAC 清单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今天中午做啥梦了 002</title>
      <link href="/2020/11/06/3.%20%E4%BB%8A%E5%A4%A9%E4%B8%AD%E5%8D%88%E5%81%9A%E5%95%A5%E6%A2%A6%E4%BA%86%20002/"/>
      <url>/2020/11/06/3.%20%E4%BB%8A%E5%A4%A9%E4%B8%AD%E5%8D%88%E5%81%9A%E5%95%A5%E6%A2%A6%E4%BA%86%20002/</url>
      
        <content type="html"><![CDATA[<p>首先，我认为我最近中午睡觉难醒和频繁做梦，很大程度是平日学习压力的问题，距离考研还有50来天，自己静下心心思了一会，确实逼得我中午睡觉偏向于这样的悲相</p><p>然后，今天中午果不其然的又做梦了，而且也起晚了</p><p>梦里都是我初中的梦，日常的上学琐事，我都服了我自己了，平常都不记得的事情，梦里给演的让我拍案叫绝，太真实太有意思了</p><p>梦里我记得我：</p><ul><li>上课迟到</li><li>下了想去买可乐，但是走去发现那个地方已经没商店了，改在了教室的跟前，即导致我上课晚了还让我跑了一大圈，累的要死</li><li>这里面，我下课之后过是回到自己和其他同学租的房子，也是奇奇怪怪的事情，我和一个亚非裔的漂亮的小姐姐关系甚好，甚至发生了不可描述的事情</li></ul><p>其实还有很多，但是你知道，醒来后很难再去刻意的回忆出来的</p><p>最后，最离谱的就是。一次上课，物理课，老师走进来，准备用电子白板上课，开机发现电脑坏了，当时镜头切换到班级人员配置表上，移到表格里我所在的这一行并显示这我是班级的技术委员（别问，问就是魔幻现实主义），我起身去讲台看看电脑咋回事儿，就开始修了起来</p><p>15 分钟后，班主任进来了，最操蛋的事情发生了。这个班主任是我之前工作单位上的老板，我都觉得虽然梦里的我可能平凡的把一切事情习以为常，但是梦外的我靠着意思理智，对着发生的事情，不断地卧槽了起来，班主任居然再梦里又给我下达任务，我在负责分析项目需求并准备安排人手开干，梦外的我应该是看不下去了，把我叫醒了</p><p>哎，3 点了，本来心思2点就起，今天下午的学习时间 -1 Hours</p><blockquote><p>复习进度最近很糟糕，满脑子的放弃，现在的我只能是继续忍下去了，没崩溃到放弃真的是奇迹了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 梦境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今天中午做啥梦了 001</title>
      <link href="/2020/11/02/2.%20%E4%BB%8A%E5%A4%A9%E4%B8%AD%E5%8D%88%E5%81%9A%E5%95%A5%E6%A2%A6%E4%BA%86%20001/"/>
      <url>/2020/11/02/2.%20%E4%BB%8A%E5%A4%A9%E4%B8%AD%E5%8D%88%E5%81%9A%E5%95%A5%E6%A2%A6%E4%BA%86%20001/</url>
      
        <content type="html"><![CDATA[<p>今天中午又睡过头了，做了个梦</p><p>梦里我和我对象，在外地，找了个一般的三流旅馆，就像是汽车旅馆一样，一般到不能再一般了，期间住的得好好的，没啥事儿</p><p>有一天，两个小孩在咱们房间的门口撬门，后来知道是两个小孩也定了一个房间，但是因为走错走到咱们屋子门口刷卡进不来，就心思强行扒门进来，结果一个小孩的手被卡住了，当时咱俩在屋子里，我一看，急忙从里们把门解锁打开，我着急直接一下子把门推开了，小孩获救了，但是店主说我这么急干啥，他在外面心思让我先解锁之后听他指挥慢慢开门，我特么上去就特么急了，我说孩子虽然熊，但是手被挤了我有能力开门我特么不开听你这逼逼赖赖的？于是就跟他争辩了一波，这算是结下梁子了</p><p>之后店家动不动的就给我使绊子，各种关于小事儿的恶心，我也是保持这最大的克制，遵循 <strong>有理有利有节</strong> 的原则和他制衡</p><p>最后住的一天，店家以及膈应的我洗个澡得间间断断洗三次才洗完，洗完我心思再睡一会的就走。睡的过程中，我偶然看到店主偷偷摸摸进来打了我家猫一巴掌，力度不大，就像是怂逼做事儿有贼心没贼胆一样，打完怂的一批，我看见了一下子就他妈飞扑过去，单手握住店主两个手腕，用力一只手就是砰砰砰的打脸，打得他鼻青脸肿的，期间我大喊， <strong>“他妈的，敢打我的猫”</strong> ，“我的猫是你他妈敢打的！”第一句应该是现实中看《让子弹飞》里黄老爷的名言“他妈的，敢杀我的马”</p><p>当时气的一下子就醒了，一看是做梦，就知道自己睡过了，爬起来洗洗脸，就把事情记录了一下</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 梦境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客迁移</title>
      <link href="/2020/10/03/1.%20%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
      <url>/2020/10/03/1.%20%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<p>从今天开始，我的博客站将全面从 wordpress 转移到 hexo 上，佛系的迁移吧，慢慢来，我倒是不着急。</p><p>因为 wordpress 的国内体验实在是越来越差，后台反应慢、更新不可能、功能臃肿我用不到，花里胡哨的固然有好处，可视化编辑器确实很香，但是用了快2年，不想再折腾了，于是就选择 hexo 了</p><p><del>而且最大的优势就是我可以把站点部署在 Coding 平台，然后开启静态页面服务，也就是不用再花钱买服务器了，我只要解析个自己的域名，配置配置就搞定，舒心</del> （ 2020.11.30 Coding 的静态网站服务强制转移到腾讯云并收费了，不讲武德，当前站点现已部署到个人阿里云服务器上 ）</p><p>转来转去，博客吧，我还是想回归写作的本质，排除一切繁杂，保留最原始的初心</p><p>该玩的骚操作都玩过之后，就只剩下回归初心了</p><blockquote><p>回归写作、回归思考、回归独立</p></blockquote><ul><li>2017-08-11，买了人生中第一台云服务器，阿里云的，开始自己部署 wordpress 玩博客，同时，也开启了我的码农生涯。</li><li>2020-10-03，从 Wordpress 迁移到 Hexo，因为 wp 实在是太慢了，真不如静态页面来的速度。</li><li>2021-09-22，5 年的阿里云服务器到期了，转入腾讯云。</li><li>2022-11-24，Hexo 转 typecho。因为作者把版本诈尸般的更新到 1.2.0，想体验。</li><li>2023-11-07，typecho 转 Hexo。因为这么多年了，折腾不动了。整个静态网站部署到 github pages 上养老就行了。</li><li>2024-01-15，Hexo 转微信公众号。</li></ul><p>一开始，按月学生价白嫖服务器，经常升级系统，LNMP 环境换了又换，各种东西装了又装，各种插件试了又试，生命不息，折腾不止。</p><p>再后来，工作后的业余时间与极客热情慢慢减少，博客对我来说逐渐趋向于一个放在手边的“笔记本”，自己的工作经验和常用手册就放在博客里，我需要的慢慢就是一个稳定，可靠的环境，来沉淀我的记忆。所以不再折腾 wp，用上了急速、可靠、便捷的 Hexo，编辑方式也从 wp 的古腾堡，改为了 markdown。</p><p>最后，服务器已经不能只作为自己的兴趣爱好了，工作上的测试项目需要不断变动我的服务器，这种不确定性与博客稳定的环境需求产生了很大的矛盾，于是我索性直接把站点部署到 github pages 服务上，哪怕外网慢一点，不稳定一点，每次部署都要重新配置 dns 信息，那也愿意，至少我的文章，会一直留在 github，一定不会随我而消失。</p><p>现在，为什么我换成公众号了呢？因为我最重要的需求，也就是我的“笔记本”，经常在没有科学上网的情况下，无法访问，这违背了我对博客最基本的要求。既然公众号也是文章的归宿，微信的体量，我相信也不会说倒就倒，那我不如把我的“笔记本”放在这里。</p><p>不追求格式，不需要效果，不在乎外表，只需要一个忠实记录着我人生轨迹的工具。</p><p>至于为什么不用 MSDN、博客园？算了吧，太 low 了，我现在天天问 chatgp、翻官方文档，也不会去看 MSDN 的无营养文章了，浪费生命。</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 迁移 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
