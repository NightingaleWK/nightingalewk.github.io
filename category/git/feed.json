{
    "version": "https://jsonfeed.org/version/1",
    "title": "雪漫城的风宅 • All posts by \"git\" category",
    "description": "この世界は好都合に未完成 だから知りたいんだ —— チ。-地球の運動について-",
    "home_page_url": "https://nightingalewk.cn",
    "items": [
        {
            "id": "https://nightingalewk.cn/2025/06/26/75.%20%E5%A6%82%E4%BD%95%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E7%8B%AC%E7%AB%8B%E7%9A%84%20Git%20%E4%BB%93%E5%BA%93%EF%BC%88Monorepo%20%E5%AE%9E%E8%B7%B5%EF%BC%89/",
            "url": "https://nightingalewk.cn/2025/06/26/75.%20%E5%A6%82%E4%BD%95%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E7%8B%AC%E7%AB%8B%E7%9A%84%20Git%20%E4%BB%93%E5%BA%93%EF%BC%88Monorepo%20%E5%AE%9E%E8%B7%B5%EF%BC%89/",
            "title": "如何合并两个独立的 Git 仓库（Monorepo 实践）",
            "date_published": "2025-06-26T02:00:00.000Z",
            "content_html": "<p>本文是一份将两个完全独立、无关联历史的 Git 仓库合并到一个新仓库（Monorepo）的完整操作指南。我们将把每个旧仓库的内容及其完整提交历史，迁移到新仓库的不同子目录中。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"核心思路\"><a href=\"#核心思路\" class=\"headerlink\" title=\"核心思路\"></a>核心思路</h2><p>我们的目标是创建一个全新的仓库 <code>sushang-combined</code>，并将 <code>sushang-v1</code> 和 <code>sushang-v2</code> 两个仓库的所有内容和历史记录，分别完整地移入 <code>sushang-combined</code> 下的 <code>sushang-v1/</code> 和 <code>sushang-v2/</code> 子目录中。</p>\n<h2 id=\"第一阶段：环境准备\"><a href=\"#第一阶段：环境准备\" class=\"headerlink\" title=\"第一阶段：环境准备\"></a>第一阶段：环境准备</h2><p>首先，创建工作区，并克隆所有需要的仓库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 创建一个专门的工作目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> git-merge-project &amp;&amp; <span class=\"built_in\">cd</span> git-merge-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 克隆你的两个源仓库 (请替换为你的实际URL)</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> &lt;URL_for_sushang-v1&gt;</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> &lt;URL_for_sushang-v2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 创建并初始化最终要合并到的目标仓库</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> sushang-combined</span><br><span class=\"line\"><span class=\"built_in\">cd</span> sushang-combined</span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二阶段：重构源仓库\"><a href=\"#第二阶段：重构源仓库\" class=\"headerlink\" title=\"第二阶段：重构源仓库\"></a>第二阶段：重构源仓库</h2><p>此阶段是关键。我们需要在每个源仓库中，将所有文件移入一个与仓库同名的子目录。<strong>这个过程需要对 <code>sushang-v1</code> 和 <code>sushang-v2</code> 分别执行一次。</strong></p>\n<p>下面以 <code>sushang-v1</code> 为例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 进入 sushang-v1 的本地克隆目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../sushang-v1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 创建子目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> sushang-v1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 将所有文件和目录移动到新子目录中</span></span><br><span class=\"line\"><span class=\"comment\"># 使用 git mv 至关重要，它能让 Git 追踪文件移动，保留历史记录！</span></span><br><span class=\"line\"><span class=\"comment\"># -k 标志会忽略移动过程中可能出现的无关紧要的错误</span></span><br><span class=\"line\">git <span class=\"built_in\">mv</span> -k * sushang-v1/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 单独处理以点开头的隐藏文件（如 .gitignore, .github 等）</span></span><br><span class=\"line\">git <span class=\"built_in\">mv</span> .gitignore sushang-v1/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 提交这次结构调整</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;chore: Restructure repository for monorepo merge&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>请返回上一级目录，对 <code>sushang-v2</code> 仓库重复上述 1-5 步。</strong></p>\n<h2 id=\"第三阶段：执行合并\"><a href=\"#第三阶段：执行合并\" class=\"headerlink\" title=\"第三阶段：执行合并\"></a>第三阶段：执行合并</h2><p>现在，所有准备工作就绪，可以开始真正的合并操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 返回合并目标仓库</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../sushang-combined</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 合并 sushang-v1</span></span><br><span class=\"line\"><span class=\"comment\">#    将本地重构后的 sushang-v1 仓库添加为名为 v1 的远程源</span></span><br><span class=\"line\">git remote add v1 ../sushang-v1</span><br><span class=\"line\"><span class=\"comment\">#    从 v1 拉取所有历史数据</span></span><br><span class=\"line\">git fetch v1</span><br><span class=\"line\"><span class=\"comment\">#    合并 v1 的主分支，--allow-unrelated-histories 是关键！</span></span><br><span class=\"line\">git merge v1/main --allow-unrelated-histories -m <span class=\"string\">&quot;feat: Merge sushang-v1 history&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 合并 sushang-v2</span></span><br><span class=\"line\"><span class=\"comment\">#    以同样的方式添加并合并 v2</span></span><br><span class=\"line\">git remote add v2 ../sushang-v2</span><br><span class=\"line\">git fetch v2</span><br><span class=\"line\">git merge v2/main --allow-unrelated-histories -m <span class=\"string\">&quot;feat: Merge sushang-v2 history&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 验证结果</span></span><br><span class=\"line\"><span class=\"comment\">#    执行 ls，应能看到 sushang-v1 和 sushang-v2 两个目录</span></span><br><span class=\"line\"><span class=\"comment\">#    执行 git log --graph --oneline --all 查看合并后的历史图谱</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -la</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第四阶段：发布到-GitHub\"><a href=\"#第四阶段：发布到-GitHub\" class=\"headerlink\" title=\"第四阶段：发布到 GitHub\"></a>第四阶段：发布到 GitHub</h2><p>将本地合并好的新仓库推送到远程。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 在 GitHub 上创建一个新的、空的仓库，例如 sushang-combined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 在本地 sushang-combined 目录中，关联到你刚创建的远程仓库</span></span><br><span class=\"line\">git remote add origin &lt;URL_for_new_github_repo&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 将本地的完整历史推送到 GitHub</span></span><br><span class=\"line\"><span class=\"comment\">#    -u 选项会建立本地 main 分支与远程 origin/main 分支的追踪关系</span></span><br><span class=\"line\">git push -u origin main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. (可选) 清理本地的临时远程源</span></span><br><span class=\"line\">git remote <span class=\"built_in\">rm</span> v1</span><br><span class=\"line\">git remote <span class=\"built_in\">rm</span> v2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第五阶段：归档旧仓库\"><a href=\"#第五阶段：归档旧仓库\" class=\"headerlink\" title=\"第五阶段：归档旧仓库\"></a>第五阶段：归档旧仓库</h2><p>为了避免混淆，并完整保留 Issues、Pull Requests 等宝贵信息，最佳实践是<strong>归档</strong>（Archive）而不是删除旧仓库。</p>\n<p>对 <code>sushang-v1</code> 和 <code>sushang-v2</code> 在 GitHub 上的仓库，分别执行以下操作：</p>\n<ol>\n<li><strong>更新仓库描述</strong>：在仓库主页点击 “Edit”，修改描述，明确指出项目已归档，并提供新仓库 <code>sushang-combined</code> 的链接。例如：“**[ARCHIVED]** Development continues at [link to sushang-combined].”</li>\n<li><strong>更新 README</strong>：在 <code>README.md</code> 文件顶部添加醒目通知，引导访问者前往新仓库。</li>\n<li><strong>执行归档</strong>：<ul>\n<li>进入仓库的 <code>Settings</code> 页面。</li>\n<li>滚动到底部的 <code>Danger Zone</code>（危险区域）。</li>\n<li>点击 <code>Archive this repository</code>（归档此仓库）。</li>\n<li>按提示输入仓库名称进行确认。</li>\n</ul>\n</li>\n</ol>\n<p>至此，您已成功将两个独立仓库完整地合并为一个，并完成了所有后续整理工作。</p>\n",
            "tags": [
                "Git",
                "Monorepo",
                "DevOps"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2023/07/06/58.%20git%20%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%9C%E7%AB%AF%202%20%E4%B8%AA%E4%BB%93%E5%BA%93/",
            "url": "https://nightingalewk.cn/2023/07/06/58.%20git%20%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%9C%E7%AB%AF%202%20%E4%B8%AA%E4%BB%93%E5%BA%93/",
            "title": "git 同时推送本地代码到远端 2 个仓库",
            "date_published": "2023-07-06T00:36:00.000Z",
            "content_html": "<p>本地代码执行如下命令，可将代码同时提交到 github 和 coding 两个平台：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m &quot;初始化项目&quot;</span><br><span class=\"line\">git branch -M main</span><br><span class=\"line\">git remote add origin git@github.com:NightingaleWK/jiepade.git</span><br><span class=\"line\">git remote set-url --add origin git@e.coding.net:nightingalewk/jiepade/v1.git</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://nightingalewk.cn/2023/03/28/55.%20%E8%A7%A3%E5%86%B3%20.gitignore%20%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/",
            "url": "https://nightingalewk.cn/2023/03/28/55.%20%E8%A7%A3%E5%86%B3%20.gitignore%20%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/",
            "title": "解决 .gitignore 无效的问题",
            "date_published": "2023-03-28T00:38:00.000Z",
            "content_html": "<p>首先确定好需要忽略的文件或文件夹，并加入到 .gitignore 中，然后执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached .</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;update .gitignore&quot;</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>若你的另一台机子也需要更新代码，那么他在 git pull 的时候，.gitignore 中你刚才添加的文件和文件夹都会删除，记得重新生成或新建上。</p>\n",
            "tags": [
                "debug"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2022/07/26/42.%20%E5%9C%A8%20GIT%20%E4%B8%AD%20%E4%BD%BF%E7%94%A8%20GPG%20%E7%AD%BE%E5%90%8D/",
            "url": "https://nightingalewk.cn/2022/07/26/42.%20%E5%9C%A8%20GIT%20%E4%B8%AD%20%E4%BD%BF%E7%94%A8%20GPG%20%E7%AD%BE%E5%90%8D/",
            "title": "在 GIT 中 使用 GPG 签名",
            "date_published": "2022-07-26T09:45:00.000Z",
            "content_html": "<p>本文将介绍如何在 coding 中使用 GPG 签名加密你的每次 commit，来保证代码提交的真实性</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-电脑安装-GPG-组件\"><a href=\"#1-电脑安装-GPG-组件\" class=\"headerlink\" title=\"1. 电脑安装 GPG 组件\"></a>1. 电脑安装 GPG 组件</h2><p>这里我选择的是 gpg4win ，直接去官网下载安装即可</p>\n<h2 id=\"2-新建密钥对\"><a href=\"#2-新建密钥对\" class=\"headerlink\" title=\"2. 新建密钥对\"></a>2. 新建密钥对</h2><p>新建一个密钥对，填写你的姓名和邮箱，这里的邮箱填写的是你 coding 的邮箱，一路下一步即可</p>\n<h2 id=\"3-配置-gpg-信息到-coding-中\"><a href=\"#3-配置-gpg-信息到-coding-中\" class=\"headerlink\" title=\"3. 配置 gpg 信息到 coding 中\"></a>3. 配置 gpg 信息到 coding 中</h2><p>转到项目上，打开终端，首先确认私钥代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --list-secret-keys --keyid-format LONG &quot;your_email&quot;</span><br></pre></td></tr></table></figure>\n<p>复制以 sec 开头的 GPG 密钥 ID。以下示例中，复制 4AEA00A342C24CA3：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sec   ed25519/4AEA00A342C24CA3 2021-09-14 [SC]</span><br><span class=\"line\">      6DE3507E82DEB6E8828FAAC34AEA00A342C24BD4</span><br><span class=\"line\">uid                 [ 绝对 ] your_name &quot;your_email&quot;</span><br><span class=\"line\">ssb   cv25519/812B586FD245B560 2021-09-14 [E]</span><br></pre></td></tr></table></figure>\n<p>利用复制的 ID 导出该 ID 的公钥（以上述 ID 为例）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --armor --export 4AEA00A342C24CA3</span><br></pre></td></tr></table></figure>\n<p>生成公钥之后，可将其添加至你的 CODING 账户。</p>\n<h2 id=\"4-配置-gpg-信息到本地-git-中\"><a href=\"#4-配置-gpg-信息到本地-git-中\" class=\"headerlink\" title=\"4. 配置 gpg 信息到本地 git 中\"></a>4. 配置 gpg 信息到本地 git 中</h2>",
            "tags": [
                "gpg"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2021/12/21/36.%20Git%20Pull%20%E5%BC%BA%E5%88%B6%E6%8B%89%E5%8F%96%E6%AD%A5%E9%AA%A4/",
            "url": "https://nightingalewk.cn/2021/12/21/36.%20Git%20Pull%20%E5%BC%BA%E5%88%B6%E6%8B%89%E5%8F%96%E6%AD%A5%E9%AA%A4/",
            "title": "Git Pull 强制拉取步骤",
            "date_published": "2021-12-21T04:21:00.000Z",
            "content_html": "<h2 id=\"生成公钥\"><a href=\"#生成公钥\" class=\"headerlink\" title=\"生成公钥\"></a>生成公钥</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意:该命令直接放弃所有修改代码,并更新到版本库最新版本代码</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>git fetch –all<br>git reset –hard origin&#x2F;main<br>git pull</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--more--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">合起来就是</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>git fetch –all &amp;&amp; git reset –hard origin&#x2F;main &amp;&amp; git pull</p>\n<pre><code>\n注意: ``git reset --hard origin/分支代码``, 一般都是主干,若有多期工程, 需自己更改\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://nightingalewk.cn/2021/12/15/35.%20Coding%20%E6%97%A0%E5%AF%86%E7%A0%81%E6%8E%A8%E6%8B%89%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95/",
            "url": "https://nightingalewk.cn/2021/12/15/35.%20Coding%20%E6%97%A0%E5%AF%86%E7%A0%81%E6%8E%A8%E6%8B%89%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95/",
            "title": "Coding 无密码推拉代码的方法",
            "date_published": "2021-12-15T05:00:00.000Z",
            "content_html": "<h2 id=\"生成公钥\"><a href=\"#生成公钥\" class=\"headerlink\" title=\"生成公钥\"></a>生成公钥</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建新的 SSH 私钥与公钥秘钥对，输入你的邮箱作为标签</span><br><span class=\"line\">ssh-keygen -m PEM -t rsa -b 4096 -C &quot;your.email@example.com&quot;  </span><br><span class=\"line\"></span><br><span class=\"line\">// 推荐使用默认地址</span><br><span class=\"line\">Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]  </span><br><span class=\"line\"></span><br><span class=\"line\">// 此处直接回车即可；若设置密码，则每次使用 SSH 方式推送代码时都会要求输入密码</span><br><span class=\"line\">Enter passphrase (empty for no passphrase):  </span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h2 id=\"添加公钥\"><a href=\"#添加公钥\" class=\"headerlink\" title=\"添加公钥\"></a>添加公钥</h2><ol>\n<li>打开上文中生成的秘钥对的地址（通常为 ~&#x2F;.ssh&#x2F;）找到后缀为 pub 的公钥文件，使用 cat 命令输出所有内容并复制。</li>\n<li>登录 CODING，点击右上角个人头像进入「个人账户设置」-&gt;「SSH 公钥」页面，然后点击新建公钥按钮，粘贴复制的公钥全文。</li>\n<li>完成后，在本地运行首次连接时的公钥认证命令： <code>ssh -T git@e.coding.net</code></li>\n</ol>\n",
            "tags": [
                "免密"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2021/09/06/29.%20Git%20%E7%AA%81%E7%84%B6%E6%97%A0%E6%B3%95%20push%20%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/",
            "url": "https://nightingalewk.cn/2021/09/06/29.%20Git%20%E7%AA%81%E7%84%B6%E6%97%A0%E6%B3%95%20push%20%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/",
            "title": "Git 突然无法 push 的解决方法",
            "date_published": "2021-09-06T04:00:00.000Z",
            "content_html": "<p>当你明明用得好好的 git 突然无法推送，提示如下信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant@homestead:~/code/jianbing$ git push</span><br><span class=\"line\">identity_sign: private key /home/vagrant/.ssh/id_rsa contents do not match public</span><br><span class=\"line\">git@e.coding.net: Permission denied (publickey).</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br></pre></td></tr></table></figure>\n\n<p>只需要重新进行一些配置即可恢复 push，代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;Your Name&quot;</span><br><span class=\"line\">git config --global user.email your@example.com</span><br><span class=\"line\">eval &quot;$(ssh-agent -s)&quot;</span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以和往常一样的 git push 了</p>\n",
            "tags": []
        },
        {
            "id": "https://nightingalewk.cn/2021/08/09/27.%20%E8%A7%A3%E5%86%B3%20ohmyzsh%20%E8%AF%BB%E5%8F%96%20git%20%E4%BF%A1%E6%81%AF%E7%BC%93%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/",
            "url": "https://nightingalewk.cn/2021/08/09/27.%20%E8%A7%A3%E5%86%B3%20ohmyzsh%20%E8%AF%BB%E5%8F%96%20git%20%E4%BF%A1%E6%81%AF%E7%BC%93%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/",
            "title": "解决 ohmyzsh 读取 git 信息缓慢的问题",
            "date_published": "2021-08-09T04:00:00.000Z",
            "content_html": "<p>在 oh-my-zsh 进入包含 git 仓库目录时，会变的比平时慢&#x2F;卡顿，原因是因为 oh-my-zsh 要获取 git 更新信息，设置 oh-my-zsh 不读取文件变化信息（在 git 项目目录执行下列命令）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --add oh-my-zsh.hide-dirty 1</span><br></pre></td></tr></table></figure>\n\n<p>如果你还觉得慢，可以再设置 oh-my-zsh 不读取任何 git 信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --add oh-my-zsh.hide-status 1</span><br></pre></td></tr></table></figure>\n<p>如果想恢复，设置成0就好</p>\n",
            "tags": [
                "oh-my-zsh"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2021/08/03/26.%20git%20pull%20%E5%90%8E%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%9B%9E%E6%BB%9A/",
            "url": "https://nightingalewk.cn/2021/08/03/26.%20git%20pull%20%E5%90%8E%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%9B%9E%E6%BB%9A/",
            "title": "git pull 后如何快速回滚",
            "date_published": "2021-08-03T04:00:00.000Z",
            "content_html": "<p>在服务器执行 <code>git pull</code> 后发现生产环境报错，急需回滚到上一个安全版本，这时候我们需要运行 <code>git reflog</code> 命令查看你的历史变更记录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@user www.xxx.com]# git reflog</span><br><span class=\"line\">efb4b67 HEAD@&#123;0&#125;: pull: Fast-forward</span><br><span class=\"line\">fb7675d HEAD@&#123;1&#125;: pull: Fast-forward</span><br><span class=\"line\">77d8371 HEAD@&#123;2&#125;: pull: Fast-forward</span><br><span class=\"line\">3fa69a3 HEAD@&#123;3&#125;: pull: Fast-forward</span><br><span class=\"line\">fa72965 HEAD@&#123;4&#125;: pull: Fast-forward</span><br><span class=\"line\">ffe128e HEAD@&#123;5&#125;: pull: Fast-forward</span><br><span class=\"line\">c511308 HEAD@&#123;6&#125;: pull: Fast-forward</span><br><span class=\"line\">ef21f31 HEAD@&#123;7&#125;: pull: Fast-forward</span><br><span class=\"line\">8082a1b HEAD@&#123;8&#125;: pull: Fast-forward</span><br><span class=\"line\">7551f60 HEAD@&#123;9&#125;: pull: Fast-forward</span><br><span class=\"line\">0486156 HEAD@&#123;10&#125;: pull: Fast-forward</span><br><span class=\"line\">2be1fb0 HEAD@&#123;11&#125;: pull: Fast-forward</span><br><span class=\"line\">b3aec43 HEAD@&#123;12&#125;: pull: Fast-forward</span><br><span class=\"line\">c3318a4 HEAD@&#123;13&#125;: pull: Fast-forward</span><br><span class=\"line\">8ab54e1 HEAD@&#123;14&#125;: pull: Fast-forward</span><br><span class=\"line\">966c7ae HEAD@&#123;15&#125;: pull: Fast-forward</span><br><span class=\"line\">2e8a177 HEAD@&#123;16&#125;: pull: Fast-forward</span><br><span class=\"line\">5800282 HEAD@&#123;17&#125;: pull: Fast-forward</span><br><span class=\"line\">3e70800 HEAD@&#123;18&#125;: pull: Fast-forward</span><br><span class=\"line\">e4f45d9 HEAD@&#123;19&#125;: pull: Fast-forward</span><br><span class=\"line\">9069d11 HEAD@&#123;20&#125;: pull: Fast-forward</span><br><span class=\"line\">8b45ce5 HEAD@&#123;21&#125;: pull: Fast-forward</span><br><span class=\"line\">95a2d13 HEAD@&#123;22&#125;: pull: Fast-forward</span><br><span class=\"line\">d6ac3b6 HEAD@&#123;23&#125;: reset: moving to origin/master</span><br><span class=\"line\">99213c9 HEAD@&#123;24&#125;: pull: Fast-forward</span><br><span class=\"line\">d9b90ca HEAD@&#123;25&#125;: reset: moving to origin/master</span><br><span class=\"line\">d7258c4 HEAD@&#123;26&#125;: clone: from https://e.coding.net/xxxxxxxxxxxxxxxxxxxxxx.git</span><br></pre></td></tr></table></figure>\n<p>最上面的那条记录就是问题的那次，我们需要回滚到上一次，即 <code>fb7675d</code> 这里，输入如下指令即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard fb7675d</span><br></pre></td></tr></table></figure>",
            "tags": []
        }
    ]
}