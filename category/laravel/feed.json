{
    "version": "https://jsonfeed.org/version/1",
    "title": "雪漫城的风宅 • All posts by \"laravel\" category",
    "description": "この世界は好都合に未完成 だから知りたいんだ —— チ。-地球の運動について-",
    "home_page_url": "https://nightingalewk.cn",
    "items": [
        {
            "id": "https://nightingalewk.cn/2023/11/21/62.%20laravel%2010%20%E5%9C%A8%20vite%20%E5%B7%A5%E4%BD%9C%E6%B5%81%E4%B8%AD%E5%BC%95%E5%85%A5%E5%B9%B6%E4%BD%BF%E7%94%A8%20Font%20Awesome/",
            "url": "https://nightingalewk.cn/2023/11/21/62.%20laravel%2010%20%E5%9C%A8%20vite%20%E5%B7%A5%E4%BD%9C%E6%B5%81%E4%B8%AD%E5%BC%95%E5%85%A5%E5%B9%B6%E4%BD%BF%E7%94%A8%20Font%20Awesome/",
            "title": "laravel 10 在 vite 工作流中引入并使用 Font Awesome 6",
            "date_published": "2023-11-21T10:00:00.000Z",
            "content_html": "<p>引入 Font Awesome 组件到 Laravel 项目的 Vite 构建中涉及一些步骤。以下是一般的指南：</p>\n<h2 id=\"1-安装-Font-Awesome：\"><a href=\"#1-安装-Font-Awesome：\" class=\"headerlink\" title=\"1. 安装 Font Awesome：\"></a>1. 安装 Font Awesome：</h2><p>通过 npm 或 yarn 安装 Font Awesome。在项目根目录下运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @fortawesome/fontawesome-free</span><br></pre></td></tr></table></figure>\n<p>或者使用 yarn：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add @fortawesome/fontawesome-free</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-引入-Font-Awesome-样式：\"><a href=\"#2-引入-Font-Awesome-样式：\" class=\"headerlink\" title=\"2. 引入 Font Awesome 样式：\"></a>2. 引入 Font Awesome 样式：</h2><p>在 Vite 项目中，你可以在入口文件（通常是 main.js 或 main.ts,laravel 默认是 app.js ）中引入 Font Awesome 样式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/main.js or src/main.ts or resources/js/app.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;@fortawesome/fontawesome-free/css/all.css&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其他的入口文件内容...</span></span><br></pre></td></tr></table></figure>\n<p>这将引入 Font Awesome 的所有样式。如果你只需要使用特定图标的样式，你可以根据需要引入 solid、regular 或 brands 中的子集。</p>\n<h2 id=\"4-npm-构建\"><a href=\"#4-npm-构建\" class=\"headerlink\" title=\"4. npm 构建\"></a>4. npm 构建</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## laravel sail 环境需要添加 sail 前缀</span></span><br><span class=\"line\">sail npm run dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-开始使用\"><a href=\"#3-开始使用\" class=\"headerlink\" title=\"3. 开始使用\"></a>3. 开始使用</h2><p>然后你就可以使用 Font Awesome 图标了。</p>\n",
            "tags": [
                "Font Awesome",
                "vite"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2023/11/16/61.%20laravel%20%E9%A1%B9%E7%9B%AE%E6%89%A7%E8%A1%8C%20sail%20up%20%E6%8A%A5%2080%20%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/",
            "url": "https://nightingalewk.cn/2023/11/16/61.%20laravel%20%E9%A1%B9%E7%9B%AE%E6%89%A7%E8%A1%8C%20sail%20up%20%E6%8A%A5%2080%20%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/",
            "title": "laravel 项目执行 sail up 报 80 端口占用问题",
            "date_published": "2023-11-16T09:00:00.000Z",
            "content_html": "<p>今天给一台新机器装好 laravel sail 环境后，在最后一步启动项目时，报错如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wangkai@Precision-<span class=\"number\">7920</span>:~/code/daochenglin$ sail up -d</span><br><span class=\"line\">[+] Building <span class=\"number\">0.0</span>s (<span class=\"number\">0</span>/<span class=\"number\">0</span>)                                                                          docker:<span class=\"keyword\">default</span></span><br><span class=\"line\">[+] Running <span class=\"number\">8</span>/<span class=\"number\">8</span></span><br><span class=\"line\"> ✔ Network daochenglin_sail              Created                                                           <span class=\"number\">0.0</span>s</span><br><span class=\"line\"> ✔ Container daochenglin-meilisearch-<span class=\"number\">1</span>   Started                                                           <span class=\"number\">0.1</span>s</span><br><span class=\"line\"> ✔ Container daochenglin-selenium-<span class=\"number\">1</span>      Started                                                           <span class=\"number\">0.1</span>s</span><br><span class=\"line\"> ✔ Container daochenglin-redis-<span class=\"number\">1</span>         Started                                                           <span class=\"number\">0.1</span>s</span><br><span class=\"line\"> ✔ Container daochenglin-memcached-<span class=\"number\">1</span>     Started                                                           <span class=\"number\">0.1</span>s</span><br><span class=\"line\"> ✔ Container daochenglin-mysql-<span class=\"number\">1</span>         Started                                                           <span class=\"number\">0.1</span>s</span><br><span class=\"line\"> ✔ Container daochenglin-mailpit-<span class=\"number\">1</span>       Started                                                           <span class=\"number\">0.1</span>s</span><br><span class=\"line\"> ✔ Container daochenglin-laravel.test-<span class=\"number\">1</span>  Created                                                           <span class=\"number\">0.1</span>s</span><br><span class=\"line\"><span class=\"built_in\">Error</span> response <span class=\"keyword\">from</span> daemon: Ports are not available: exposing port TCP <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">80</span> -&gt; <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">0</span>: listen tcp <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">80</span>: bind: An attempt was made to access a socket in a way forbidden by its access permissions.</span><br></pre></td></tr></table></figure>\n\n<p>这个问题就是我们本机的 80 端口被占用了，我个人的电脑是 windows 11，系统服务默认开启一个叫 <code>World Wide Web 发布服务</code> 的服务，他是自动启动的，该服务通过 Internet Information Services 管理器提供 Web 连接和管理，默认占用 80 端口，这个服务我们很明显用不到，给他禁用掉，然后再 sail up 就 ok 了。</p>\n<p>一点小小的经验分享 😁</p>\n",
            "tags": [
                "laravel sail",
                "故障排除"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2023/11/15/60.%20laravel%20artisan%20route%20%E7%94%A8%E6%B3%95/",
            "url": "https://nightingalewk.cn/2023/11/15/60.%20laravel%20artisan%20route%20%E7%94%A8%E6%B3%95/",
            "title": "laravel artisan route 用法",
            "date_published": "2023-11-15T09:00:00.000Z",
            "content_html": "<p>基本用法是：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">laravel artisan route 用法</span><br></pre></td></tr></table></figure>\n\n<p>可添加的后缀有：</p>\n<table>\n<thead>\n<tr>\n<th>后缀参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–method&#x3D;<TERM></td>\n<td>Filters the routes by method.</td>\n<td>无</td>\n</tr>\n<tr>\n<td>–name&#x3D;<TERM></td>\n<td>Filters the routes by name.</td>\n<td>无</td>\n</tr>\n<tr>\n<td>–path&#x3D;<TERM></td>\n<td>Filters the routes by path (URI).</td>\n<td>无</td>\n</tr>\n<tr>\n<td>–reverse</td>\n<td>Reverses the order the routes are displayed in the table.</td>\n<td>无</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>Reverses the order the routes are displayed in the table (shortcut to –reverse).</td>\n<td>无</td>\n</tr>\n<tr>\n<td>–sort</td>\n<td>The column to sort by. Accepted values are host, method, uri, name, action or middleware.</td>\n<td>uri</td>\n</tr>\n</tbody></table>\n<p>举例：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Filter the route list by name.</span></span><br><span class=\"line\">php artisan route:<span class=\"keyword\">list</span> --name=account</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Filter the route list by URI.</span></span><br><span class=\"line\">php artisan route:<span class=\"keyword\">list</span> --path=<span class=\"string\">&#x27;api/v1/&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Filter the route list by method.</span></span><br><span class=\"line\">php artisan route:<span class=\"keyword\">list</span> --method=GET</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The filters can be combined; results will be aggregated using &quot;and&quot; logic. The following command:</span></span><br><span class=\"line\">php artisan route:<span class=\"keyword\">list</span> --path=account --method=GET</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Filter the routes and display them in reverse order.</span></span><br><span class=\"line\">php artisan route:<span class=\"keyword\">list</span> --method=GET --reverse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># The following is equivalent to the previous example.</span></span><br><span class=\"line\">php artisan route:<span class=\"keyword\">list</span> --method=GET -r</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Filter the routes and sort `name` column.</span></span><br><span class=\"line\">php artisan route:<span class=\"keyword\">list</span> --method=GET --sort=name</span><br></pre></td></tr></table></figure>",
            "tags": [
                "artisan 指令"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2023/07/10/57.%20%E9%85%8D%E7%BD%AE%E5%B9%B6%E9%83%A8%E7%BD%B2%20laravel%2010%20%E9%A1%B9%E7%9B%AE%E5%88%B0%20ubuntu%2022.04.2%20%E6%9C%8D%E5%8A%A1%E5%99%A8/",
            "url": "https://nightingalewk.cn/2023/07/10/57.%20%E9%85%8D%E7%BD%AE%E5%B9%B6%E9%83%A8%E7%BD%B2%20laravel%2010%20%E9%A1%B9%E7%9B%AE%E5%88%B0%20ubuntu%2022.04.2%20%E6%9C%8D%E5%8A%A1%E5%99%A8/",
            "title": "配置并部署 laravel 10 项目到 ubuntu 22.04.2 服务器",
            "date_published": "2023-07-10T06:21:00.000Z",
            "content_html": "<h2 id=\"ubuntu-镜像下载与安装\"><a href=\"#ubuntu-镜像下载与安装\" class=\"headerlink\" title=\"ubuntu 镜像下载与安装\"></a>ubuntu 镜像下载与安装</h2><p>ubuntu 官方可免费下载服务器版本的 iso 镜像文件，我们使用本镜像进行最小化安装即可。我自己的操作是把镜像交给我们公司的网络运维工程师，让他给我那这个镜像开了个虚机，分配了一个内网 IP 用来测试。</p>\n<p>记得跟网络运维工程师说一下让服务器通互联网，再配置一下阿里云的源</p>\n<h2 id=\"系统必要的配置\"><a href=\"#系统必要的配置\" class=\"headerlink\" title=\"系统必要的配置\"></a>系统必要的配置</h2><p>系统默认没初始化 root 账号，使用下方指令初始化：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo passwd root</span><br></pre></td></tr></table></figure>\n<p>然后定一个安全好记的密码就行，我们之后的操作都在 root 账号下执行。</p>\n<p>接下来就是升级 ubuntu 系统</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update</span><br><span class=\"line\">apt upgrade</span><br></pre></td></tr></table></figure>\n\n<p>然后我们安装 vim 编辑器，方便编辑文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install vim</span><br></pre></td></tr></table></figure>\n\n<p>然后我们安装 screen 工具，保证我们的操作不因关闭终端而终止</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install screen</span><br></pre></td></tr></table></figure>\n\n<p>至此该配置的都配置好了</p>\n<h2 id=\"安装并配置-oneinstack\"><a href=\"#安装并配置-oneinstack\" class=\"headerlink\" title=\"安装并配置 oneinstack\"></a>安装并配置 oneinstack</h2><p>oneinstack 是一款自动化部署 lnmp 环境的组件工具，百度并访问官网，选择自动安装，选好你需要的配置后，复制好安装的命令，后面用</p>\n<p>安装 lnmp 环境之前，我们新建一个 screen 窗口，保证我们的安装不因窗口关闭而终止：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">screen -S lnmp</span><br></pre></td></tr></table></figure>\n\n<p>下面是一些常用操作，可以参考：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl a + d    // 暂退当前的 screen 窗口</span><br><span class=\"line\">screen -r lnmp    // 恢复名为 lnmp 的 screen 窗口</span><br><span class=\"line\">screen -ls    // 查看当前的所有 screen 窗口信息</span><br></pre></td></tr></table></figure>\n\n<p>回到话题，配置好 screen 就可以开始安装 lnmp 环境啦，用上面的你复制的 oneinstack 生成的指令到你的终端，回车，然后等待安装完毕并重启服务器即可。</p>\n<p>此过程一般没问题，若出现报错，安装会终止并提示错误信息，建议重新执行一遍。再有故障那就要自行解决了。</p>\n<h2 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h2><p>根据 oneinstack 安装时配置的数据库密码，我们通过访问咱们主机的 ip 进入 oneinstack 默认页面，然后找到 phpmyadmin ，使用 root 和刚才说的密码进入数据库中，新建一个所需的空白数据库。</p>\n<h2 id=\"部署项目\"><a href=\"#部署项目\" class=\"headerlink\" title=\"部署项目\"></a>部署项目</h2><p>假设你的 laravel 10 项目在 github 中，代码通过 git 进行版本控制。</p>\n<p>接下来我们前往网站目录，并将代码 clone 到本地</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /date/wwwroot</span><br><span class=\"line\">mv default default_back</span><br><span class=\"line\">git clone [ 你的远端 git 地址 ] jiepade</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"php-配置\"><a href=\"#php-配置\" class=\"headerlink\" title=\"php 配置\"></a>php 配置</h2><p>我们需要将部分的 php 默认禁用的函数方法打开，方便使用诸如 composer 之类的命令，具体操作为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/php/etc/</span><br><span class=\"line\">vim php.ini</span><br></pre></td></tr></table></figure>\n\n<p>然后找到如下这行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; This directive allows you to disable certain functions.</span><br><span class=\"line\">; It receives a comma-delimited list of function names.</span><br><span class=\"line\">; https://php.net/disable-functions</span><br><span class=\"line\">disable_functions = passthru,exec,system,chroot,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_restore,dl,readlink,symlink,popepassthru,stream_socket_server,fsocket,popen</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disable_functions = passthru,exec,system,chroot,chgrp,chown,shell_exec,ini_alter,ini_restore,dl,readlink,popepassthru,stream_socket_server,fsocket,popen</span><br></pre></td></tr></table></figure>\n\n<p>保存退出后，重启 php—fpm 服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service php-fpm restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"composer-安装与执行\"><a href=\"#composer-安装与执行\" class=\"headerlink\" title=\"composer 安装与执行\"></a>composer 安装与执行</h2><p>回到项目根目录，安装 composer，若已安装，直接配置下一步</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -r &quot;copy(&#x27;https://install.phpcomposer.com/installer&#x27;, &#x27;composer-setup.php&#x27;);&quot;</span><br><span class=\"line\">php composer-setup.php</span><br><span class=\"line\">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>\n\n<p>若以上指令报错 php 无法找到，请检查path路径是否添加了php的bin目录，具体百度即可。不可能是没装 php，oneinstack 已经给你装好了，这个问题基本上是ubuntu下一般账号能跑 php，但 root 不行。小问题的。</p>\n<p>我们不使用阿里云的 composer 镜像，因为国内镜像的composer各依赖版本不够新，影响使用，用国外原版镜像慢点，但是稳定且最新。</p>\n<p>安装好后，在项目根目录执行 composer i 指令，安装项目所需的依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer i</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"laravel-初始化配置\"><a href=\"#laravel-初始化配置\" class=\"headerlink\" title=\"laravel 初始化配置\"></a>laravel 初始化配置</h2><p>接下来就可以进行基础的 laravel 配置了，首先我们复制根目录下的 .env 一份出来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp .env.example .env</span><br></pre></td></tr></table></figure>\n\n<p>然后生成密钥</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan key:generate</span><br></pre></td></tr></table></figure>\n\n<p>然后修改 .env 为项目实际需要调整的内容，具体需要咨询开发人员要改哪些。</p>\n<p>完成上述环节后，就可以进行数据库填充工作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan migrate:refresh --seed &amp;&amp; php artisan admin:install </span><br></pre></td></tr></table></figure>\n\n<p>之后你可能需要借助数据库程序，连接到服务器，把一些你备份的项目初始化数据库填充到项目中，具体自行操作即可，推荐使用 Dbeaver，开源且免费，官方也在更新，别用盗版的 navicat 辣</p>\n<h2 id=\"配置-nginx\"><a href=\"#配置-nginx\" class=\"headerlink\" title=\"配置 nginx\"></a>配置 nginx</h2><p>这时候你访问网址是无法看到你的项目的，需要对 nginx 配置，首先找到配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/nginx/conf/</span><br><span class=\"line\">vim nginx.conf</span><br></pre></td></tr></table></figure>\n<p>修改如下的几个值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">######################## default ############################</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen 2333;             &lt;------------------here,change it</span><br><span class=\"line\">    server_name _;</span><br><span class=\"line\">    access_log /data/wwwlogs/access_nginx.log combined;</span><br><span class=\"line\">    root /data/wwwroot/default/public;             &lt;------------------here,change it</span><br><span class=\"line\">    index index.html index.htm index.php;</span><br><span class=\"line\">    #error_page 404 /404.html;</span><br><span class=\"line\">    #error_page 502 /502.html;</span><br><span class=\"line\">    location /nginx_status &#123;</span><br><span class=\"line\">      stub_status on;</span><br><span class=\"line\">      access_log off;</span><br><span class=\"line\">      allow 127.0.0.1;</span><br><span class=\"line\">      deny all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ [^/]\\.php(/|$) &#123;</span><br><span class=\"line\">      #fastcgi_pass remote_php_ip:9000;</span><br><span class=\"line\">      fastcgi_pass unix:/dev/shm/php-cgi.sock;</span><br><span class=\"line\">      fastcgi_index index.php;</span><br><span class=\"line\">      include fastcgi.conf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ &#123;</span><br><span class=\"line\">      expires 30d;</span><br><span class=\"line\">      access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ .*\\.(js|css)?$ &#123;</span><br><span class=\"line\">      expires 7d;</span><br><span class=\"line\">      access_log off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ ^/(\\.user.ini|\\.ht|\\.git|\\.svn|\\.project|LICENSE|README.md) &#123;</span><br><span class=\"line\">      deny all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /.well-known &#123;</span><br><span class=\"line\">      allow all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location / &#123;             &lt;------------------here,add it</span><br><span class=\"line\">      try_files $uri $uri/ /index.php?$query_string;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>保存退出后，重启 nginx 使之生效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件权限调整\"><a href=\"#文件权限调整\" class=\"headerlink\" title=\"文件权限调整\"></a>文件权限调整</h2><p>我们需要对项目的文件提权，允许项目进行诸如存储文件等操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod -R 777 default</span><br><span class=\"line\">chown -R www-data:www-data default</span><br><span class=\"line\"></span><br><span class=\"line\">cd default</span><br><span class=\"line\">chgrp -R www storage bootstrap/cache</span><br><span class=\"line\">chmod -R ug+rwx storage bootstrap/cache</span><br></pre></td></tr></table></figure>\n\n<p>之后访问 http:&#x2F;&#x2F;[你的 IP 地址]:2333&#x2F; 就可以看到你的项目辣，项目部署到此结束</p>\n",
            "tags": [
                "代码部署"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2023/05/09/56.%20%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%E5%B0%86%20homestead%20%E4%B8%AD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0%20laravel%20sail%20%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/",
            "url": "https://nightingalewk.cn/2023/05/09/56.%20%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%E5%B0%86%20homestead%20%E4%B8%AD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0%20laravel%20sail%20%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/",
            "title": "（更新中）将 homestead 中的项目迁移到 laravel sail 中进行开发",
            "date_published": "2023-05-09T01:43:00.000Z",
            "content_html": "<p>本文的目的是：将原本跑 homestead 环境下的 laravel 项目，迁移到官方最新推荐的 laravel sail 开发环境中。下面我分享一下我的操作方法。</p>\n<p>在文章开始之前，我们默认大家均已拥有一个 homestead 开发环境，且你也是在其之上本地开发多次的开发者，而且你的需求是将你的 homestead 开发环境转换成 laravel sail，希望借助 docker 技术来提升系统的</p>\n<h2 id=\"1-项目克隆\"><a href=\"#1-项目克隆\" class=\"headerlink\" title=\"1. 项目克隆\"></a>1. 项目克隆</h2><p>首先我们你将线上仓库的代码clone到本地</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:NightingaleWK/larabbs.git larabbs</span><br></pre></td></tr></table></figure>\n\n<p>然后我们启动 homestead ，并在 homestead 的 linux 环境中执行接下来的工作。</p>\n<p>我们先来到项目根目录复制一份 .env 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp .env.example .env</span><br><span class=\"line\"></span><br><span class=\"line\">vim .env</span><br><span class=\"line\"></span><br><span class=\"line\">// 编辑一下 .env 文件并保存</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-项目改造\"><a href=\"#2-项目改造\" class=\"headerlink\" title=\"2. 项目改造\"></a>2. 项目改造</h2><p>然后在已运行的应用中安装 Composer 依赖，以下指令执行后，其余未安装的以来也将一并安装，毕竟我们没有执行过 composer i 嘛</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require laravel/sail --dev</span><br></pre></td></tr></table></figure>\n\n<p>在 Sail 完成安装后，你可以运行 Artisan 命令 sail:install。这个命令将会发布 Sail 的 docker-compose.yml 文件到你应用程序的根目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan sail:install --with=mysql,redis</span><br></pre></td></tr></table></figure>\n\n<p>以上这一步的执行可能会花费很长时间，网上有很多修改相关配置的来提高速度，大家可以自己搜索，至于为什么我不用，那就是希望追求纯粹正统，composer 阿里云的源与官方源完全跟不上，composer u 执行完简直是反向升级，以后再也不相信国内的源了。</p>\n<p>然后我再说一下 with 后面的该怎么填写，你可以尝试执行不带 with 的命令，可以看到几个可选的选项，这些就是填写在 with 后面的内容，按需选择安装即可。</p>\n<p>上述步骤安装完毕会系统会提示 Sail build successful. 这就代表着这一阶段任务完成</p>\n<p>然后我们把项目推送到线上仓库</p>\n<h2 id=\"3-代码上传\"><a href=\"#3-代码上传\" class=\"headerlink\" title=\"3. 代码上传\"></a>3. 代码上传</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m &quot;ready for docker&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-代码部署\"><a href=\"#4-代码部署\" class=\"headerlink\" title=\"4. 代码部署\"></a>4. 代码部署</h2><p>然后我们回到我们的sail环境中，把最新的项目代码从仓库拉下来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:NightingaleWK/larabbs.git larabbs</span><br></pre></td></tr></table></figure>\n\n<p>之后我们也是重新配置 .env 文件</p>\n<p>然后我们执行 composer 命令，安装在 sail 环境下的依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm \\</span><br><span class=\"line\">    -u &quot;$(id -u):$(id -g)&quot; \\</span><br><span class=\"line\">    -v &quot;$(pwd):/var/www/html&quot; \\</span><br><span class=\"line\">    -w /var/www/html \\</span><br><span class=\"line\">    laravelsail/php82-composer:latest \\</span><br><span class=\"line\">    composer install --ignore-platform-reqs</span><br></pre></td></tr></table></figure>\n<p>这里与在 homestead 中不同的是，我们 sail 环境不包括 composer 命令，这个命令使用一个包含 PHP 与 Composer 的小型 Docker 容器进行应用程序依赖的安装。</p>\n<p>当你使用 laravelsail&#x2F;phpXX-composer 镜像时，你应该选择和你的应用程序所用环境相同的 PHP 版本（74、80、81 或 82）。</p>\n<h2 id=\"5-环境运行\"><a href=\"#5-环境运行\" class=\"headerlink\" title=\"5. 环境运行\"></a>5. 环境运行</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sail up -d</span><br><span class=\"line\"></span><br><span class=\"line\">// -d 表示后台运行，去掉那就是前台运行，需要 ctrl + c 来结束。加入带着 -d，那么我们退出的话则需要输入 sail down 来结束</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "homestead",
                "laravel sail"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2022/12/14/52.%20%E5%8F%91%E8%B5%B7%20laravel%20%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88/",
            "url": "https://nightingalewk.cn/2022/12/14/52.%20%E5%8F%91%E8%B5%B7%20laravel%20%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88/",
            "title": "发起 laravel 队列任务不生效",
            "date_published": "2022-12-14T08:48:00.000Z",
            "content_html": "<p>当确定你的代码都没问题，而且队列都在运行，而且是你变动了 job 文件，那很有可能是缓存原因导致的，清理一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan cache:clear &amp;&amp; php artisan config:clear &amp;&amp; php artisan route:clear &amp;&amp; php artisan view:clear</span><br></pre></td></tr></table></figure>\n<p>若是在 laravel sail 开发环境中，修改一下即可使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sail artisan cache:clear &amp;&amp; sail artisan config:clear &amp;&amp; sail artisan route:clear &amp;&amp; sail artisan view:clear</span><br></pre></td></tr></table></figure>\n\n<p>花式清理后就好了</p>\n",
            "tags": [
                "debug",
                "队列",
                "redis"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2022/12/09/51.%20%E5%9C%A8%20laravel%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20redis%20%E9%98%9F%E5%88%97/",
            "url": "https://nightingalewk.cn/2022/12/09/51.%20%E5%9C%A8%20laravel%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20redis%20%E9%98%9F%E5%88%97/",
            "title": "在 laravel 中使用 redis 队列",
            "date_published": "2022-12-09T08:04:00.000Z",
            "content_html": "<p>我们实现的效果为：将一些业务逻辑转化为任务（job），然后启用队列功能，而且是 redis 的队列，同时使用 laravel 官方扩展 Horizon 实现队列的监控。将复杂耗时的工作后台处理，提高前台用户的使用体验。</p>\n<h2 id=\"1-安装-redis\"><a href=\"#1-安装-redis\" class=\"headerlink\" title=\"1. 安装 redis\"></a>1. 安装 redis</h2><p>注意不要使用国内 composer 源，官方的是最全最新的（什么阿里云镜像源反向升级了解一下）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require predis/predis</span><br></pre></td></tr></table></figure>\n<p>修改环境变量 QUEUE_CONNECTION 的值为 redis，并指定我们将使用 predis 作为请求 Redis 的类库：</p>\n<p>.env</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">QUEUE_CONNECTION=redis</span><br><span class=\"line\">REDIS_CLIENT=predis</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-生成任务类\"><a href=\"#2-生成任务类\" class=\"headerlink\" title=\"2. 生成任务类\"></a>2. 生成任务类</h2><p>使用以下 Artisan 命令来生成一个新的队列任务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ php artisan make:job EnterpriseExport</span><br></pre></td></tr></table></figure>\n<p>该命令会在 app&#x2F;Jobs 目录下生成一个新的类：</p>\n<p>app&#x2F;Jobs&#x2F;EnterpriseExport.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Jobs;</span><br><span class=\"line\"></span><br><span class=\"line\">use App\\Admin\\Controllers\\Api\\StaticFun;</span><br><span class=\"line\">use App\\Models\\Asset;</span><br><span class=\"line\">use Illuminate\\Bus\\Queueable;</span><br><span class=\"line\">use Illuminate\\Contracts\\Queue\\ShouldBeUnique;</span><br><span class=\"line\">use Illuminate\\Contracts\\Queue\\ShouldQueue;</span><br><span class=\"line\">use Illuminate\\Foundation\\Bus\\Dispatchable;</span><br><span class=\"line\">use Illuminate\\Queue\\InteractsWithQueue;</span><br><span class=\"line\">use Illuminate\\Queue\\SerializesModels;</span><br><span class=\"line\">use Illuminate\\Support\\Facades\\DB;</span><br><span class=\"line\"></span><br><span class=\"line\">class GetAssetsRemainDate implements ShouldQueue, ShouldBeUnique</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Create a new job instance.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Execute the job.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function handle()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // 拿到全部资产信息</span><br><span class=\"line\">        $assets = Asset::all();</span><br><span class=\"line\"></span><br><span class=\"line\">        // 开始循环计算资产剩余质保时间并更新</span><br><span class=\"line\">        foreach ($assets as $key =&gt; $value) &#123;</span><br><span class=\"line\">            // 计算</span><br><span class=\"line\">            $warranty_info = StaticFun::get2DateInfo($value-&gt;warranty_start, $value-&gt;warranty_end);</span><br><span class=\"line\">            // 拿取</span><br><span class=\"line\">            $warranty_remain = $warranty_info[&#x27;warranty_remain&#x27;];</span><br><span class=\"line\">            // 更新写入</span><br><span class=\"line\">            DB::table(&#x27;asset&#x27;)-&gt;where(&#x27;id&#x27;, $value-&gt;id)-&gt;update([&#x27;warranty_remain&#x27; =&gt; $warranty_remain]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>还有一点需要注意，我们将会在模型监控器中分发任务，任务中要避免使用 Eloquent 模型接口调用，如：create(), update(), save() 等操作。否则会陷入调用死循环 —— 模型监控器分发任务，任务触发模型监控器，模型监控器再次分发任务，任务再次触发模型监控器… 死循环。在这种情况下，使用 DB 类直接对数据库进行操作即可。</p>\n<h2 id=\"3-任务分发\"><a href=\"#3-任务分发\" class=\"headerlink\" title=\"3. 任务分发\"></a>3. 任务分发</h2><p>前往控制器或者观察者，去插入这项任务。</p>\n<p>SettingController.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">class SettingController extends Controller</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 展示</span><br><span class=\"line\">    public function index(Content $content)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $content</span><br><span class=\"line\">            -&gt;header(&#x27;系统设置&#x27;)</span><br><span class=\"line\">            -&gt;description(&#x27;亲自参与到系统的个性化管理&#x27;)</span><br><span class=\"line\">            -&gt;body(function (Row $row) &#123;</span><br><span class=\"line\">                $row-&gt;column(12, Setting::index());</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 刷新资产质保剩余时间</span><br><span class=\"line\">    public function warrantyRefresh()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dispatch(new GetAssetsRemainDate);  &lt;-- HERE</span><br><span class=\"line\"></span><br><span class=\"line\">        return redirect(&#x27;/admin/setting&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-安装-Horizon\"><a href=\"#4-安装-Horizon\" class=\"headerlink\" title=\"4. 安装 Horizon\"></a>4. 安装 Horizon</h2><p>使用 Composer 安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ composer require laravel/horizon</span><br></pre></td></tr></table></figure>\n<p>安装完成后，使用 vendor:publish Artisan 命令发布相关文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ php artisan vendor:publish --provider=&quot;laravel\\Horizon\\HorizonServiceProvider&quot;</span><br></pre></td></tr></table></figure>\n<p>分别是配置文件 config&#x2F;horizon.php 和存放在 public&#x2F;vendor&#x2F;horizon 文件夹中的 CSS 、JS 等页面资源文件。</p>\n<p>Horizon 是一个监控程序，需要常驻运行，我们可以通过以下命令启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ php artisan horizon</span><br></pre></td></tr></table></figure>\n<p>至此安装完毕，浏览器打开 larabbs.test&#x2F;horizon 访问控制台</p>\n<h2 id=\"5-安装-Supervisor\"><a href=\"#5-安装-Supervisor\" class=\"headerlink\" title=\"5. 安装 Supervisor\"></a>5. 安装 Supervisor</h2><p>Supervisor 是一个用于 Linux 操作系统的进程监视器。如果 Horizon 进程被退出或终止，Supervisor 将自动重启你的 Horizon 进程。如果要在 Ubuntu 上安装 Supervisor，你可以使用以下命令。如果你不使用 Ubuntu，也可以使用操作系统的包管理器安装 Supervisor：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install supervisor</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-配置-Supervisor\"><a href=\"#6-配置-Supervisor\" class=\"headerlink\" title=\"6. 配置 Supervisor\"></a>6. 配置 Supervisor</h2><p>Supervisor 配置文件通常存储在 &#x2F;etc&#x2F;supervisor&#x2F;conf.d 目录下。在此目录中，你可以创建任意数量的配置文件，这些配置文件会告诉 supervisor 如何监视你的进程。例如，让我们创建一个 horizon.conf 文件，它启动并监视一个 horizon 进程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:horizon]</span><br><span class=\"line\">process_name=%(program_name)s</span><br><span class=\"line\">directory=/data/wwwroot/yanji.wkarrow.top</span><br><span class=\"line\">command=/usr/local/php/bin/php artisan horizon</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">user=root</span><br><span class=\"line\">stopasgroup=true</span><br><span class=\"line\">killasgroup=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/data/wwwroot/yanji.wkarrow.top/horizon.log</span><br><span class=\"line\">stopwaitsecs=3600</span><br></pre></td></tr></table></figure>\n<p>注意：要确保 stopwaitsecs 的值大于运行时间最长的任务所消耗的秒数。否则，Supervisor 可能会在工作完成前终止任务。<br>注意：编辑文件之前，请使用 root 权限进行操作，否则无法保存（针对 homestead 环境下的操作）</p>\n<h2 id=\"7-启动-Supervisor\"><a href=\"#7-启动-Supervisor\" class=\"headerlink\" title=\"7. 启动 Supervisor\"></a>7. 启动 Supervisor</h2><p>在将新代码部署到服务器时，你需要终止 Horizon 主进程，以便进程监视器重新启动它并接收代码的更改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan horizon:terminate</span><br></pre></td></tr></table></figure>\n<p>创建了配置文件后，可以使用以下命令更新 Supervisor 配置并启动进程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo supervisorctl reread</span><br><span class=\"line\"></span><br><span class=\"line\">sudo supervisorctl update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo supervisorctl start horizon</span><br></pre></td></tr></table></figure>",
            "tags": [
                "队列",
                "redis"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2022/11/24/49.%20laravel%20blade%20%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/",
            "url": "https://nightingalewk.cn/2022/11/24/49.%20laravel%20blade%20%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/",
            "title": "laravel blade 简明示例",
            "date_published": "2022-11-24T08:17:11.000Z",
            "content_html": "<p>简单捯饬一下 laravel 的 blade 使用方法</p>\n<span id=\"more\"></span>\n<p>总之就是，主页面可用：</p>\n<ol>\n<li><code>@yield(&#39;content&#39;)</code> 表示这里后面子页面可以用 <code>@section(&#39;content&#39;) xxxx @endsection</code> 调用；</li>\n<li><code>@include(&#39;layouts._header&#39;)</code> 表示我引用其他的 blade 页面模块到这里。</li>\n</ol>\n<p>子页面可以用：</p>\n<ol>\n<li><code>@extends(&#39;layouts.app&#39;)</code> 表示我要使用这个 blade 模板页面，并在后面对模板传参；</li>\n<li><code>@section(&#39;title&#39;, $user-&gt;name . &#39; 的个人中心&#39;)</code> 表示子页面对 <code>app.blade.php</code> 的一个叫 title 的 yield 传递参数。</li>\n</ol>\n<p>具体代码示例如下：</p>\n<p>主页面 <code>app.balde.php</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;&#123;&#123; str_replace(&#x27;_&#x27;, &#x27;-&#x27;, app()-&gt;getLocale()) &#125;&#125;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compuiatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;@yield(&#x27;title&#x27;, &#x27;LaraBBS&#x27;) - laravel 进阶教程&lt;/title&gt;</span><br><span class=\"line\">    &lt;!-- CSRF Token --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;csrf-token&quot; content=&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;!-- CSS / JS --&gt;</span><br><span class=\"line\">    @vite([&#x27;resources/js/app.js&#x27;])</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot; class=&quot;&#123;&#123; route_class() &#125;&#125;-page&quot;&gt;</span><br><span class=\"line\">        @include(&#x27;layouts._header&#x27;)</span><br><span class=\"line\">        &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">            @include(&#x27;shared._messages&#x27;)</span><br><span class=\"line\">            @yield(&#x27;content&#x27;)</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        @include(&#x27;layouts._footer&#x27;)</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>子页面 <code>show.blade.php</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@extends(&#x27;layouts.app&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">@section(&#x27;title&#x27;, $user-&gt;name . &#x27; 的个人中心&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">@section(&#x27;content&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;row&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;div class=&quot;col-lg-3 col-md-3 hidden-sm hidden-xs user-info&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;card &quot;&gt;</span><br><span class=\"line\">                &lt;img class=&quot;card-img-top&quot;</span><br><span class=\"line\">                    src=&quot;https://cdn.learnku.com/uploads/images/201709/20/1/PtDKbASVcz.png?imageView2/1/w/600/h/600&quot;</span><br><span class=\"line\">                    alt=&quot;&#123;&#123; $user-&gt;name &#125;&#125;&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;card-body&quot;&gt;</span><br><span class=\"line\">                    &lt;h5&gt;&lt;strong&gt;个人简介&lt;/strong&gt;&lt;/h5&gt;</span><br><span class=\"line\">                    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. &lt;/p&gt;</span><br><span class=\"line\">                    &lt;hr&gt;</span><br><span class=\"line\">                    &lt;h5&gt;&lt;strong&gt;注册于&lt;/strong&gt;&lt;/h5&gt;</span><br><span class=\"line\">                    &lt;p&gt;January 01 1901&lt;/p&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;col-lg-9 col-md-9 col-sm-12 col-xs-12&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;card &quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;card-body&quot;&gt;</span><br><span class=\"line\">                    &lt;h1 class=&quot;mb-0&quot; style=&quot;font-size:22px;&quot;&gt;&#123;&#123; $user-&gt;name &#125;&#125; &lt;small&gt;&#123;&#123; $user-&gt;email &#125;&#125;&lt;/small&gt;&lt;/h1&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;hr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;&#123;-- 用户发布的内容 --&#125;&#125;</span><br><span class=\"line\">            &lt;div class=&quot;card &quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;card-body&quot;&gt;</span><br><span class=\"line\">                    暂无数据 ~_~</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">@stop</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>",
            "tags": [
                "blade"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2022/11/24/48.%20laravel%20%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/",
            "url": "https://nightingalewk.cn/2022/11/24/48.%20laravel%20%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/",
            "title": "laravel 事件系统简明示例",
            "date_published": "2022-11-24T08:17:00.000Z",
            "content_html": "<p>简单对 laravel 事件系统做一些说明</p>\n<span id=\"more\"></span>\n<p>laravel 的事件提供了一个简单的观察者实现，能够订阅和监听应用中发生的各种事件。事件类保存在 app&#x2F;Events 目录中，而这些事件的的监听器则被保存在 app&#x2F;Listeners 目录下。这些目录只有当你使用 Artisan 命令来生成事件和监听器时才会被自动创建。</p>\n<p>事件机制是一种很好的应用解耦方式，因为一个事件可以拥有多个互不依赖的监听器。例如，如果你希望每次订单发货时向用户发送一个 Slack 通知。你可以简单地发起一个 OrderShipped 事件，让监听器接收之后转化成一个 Slack 通知，这样你就可以不用把订单的业务代码跟 Slack 通知的代码耦合在一起了。</p>\n<h2 id=\"生成一个事件类\"><a href=\"#生成一个事件类\" class=\"headerlink\" title=\"生成一个事件类\"></a>生成一个事件类</h2><p>比如通过 artisan 命令生成一个 UserLogin 事件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:event UserLogin</span><br></pre></td></tr></table></figure>\n<p>在 app&#x2F;Events 中就会自动生成一个 UserLogin.php 文件，内容不多，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Events;</span><br><span class=\"line\"></span><br><span class=\"line\">use Illuminate\\Broadcasting\\Channel;</span><br><span class=\"line\">use Illuminate\\Queue\\SerializesModels;</span><br><span class=\"line\">use Illuminate\\Broadcasting\\PrivateChannel;</span><br><span class=\"line\">use Illuminate\\Broadcasting\\PresenceChannel;</span><br><span class=\"line\">use Illuminate\\Broadcasting\\InteractsWithSockets;</span><br><span class=\"line\">use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;</span><br><span class=\"line\"></span><br><span class=\"line\">class UserLogin</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    use InteractsWithSockets, SerializesModels;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Create a new event instance.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Get the channels the event should broadcast on.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return Channel|array</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function broadcastOn()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new PrivateChannel(&#x27;channel-name&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"定义监听器\"><a href=\"#定义监听器\" class=\"headerlink\" title=\"定义监听器\"></a>定义监听器</h2><p>一个事件可以被一个或多个监听器监听，也就是观察者模式，我们可以定义多个监听器，当这个事件发生，执行一系列逻辑。</p>\n<p>在 EventServiceProvider 的 $listen 中可以定义事件和监听器，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected $listen = [</span><br><span class=\"line\">    &#x27;App\\Events\\UserLogin&#x27; =&gt; [</span><br><span class=\"line\">        &#x27;App\\Lisenter\\DoSomething1&#x27;,</span><br><span class=\"line\">        &#x27;App\\Lisenter\\Dosomething2&#x27;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>然后执行 artisan 命令，就可以自动在 app&#x2F;Lisenter 目录生成监听器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan event::generate</span><br></pre></td></tr></table></figure>\n<p>可以看到 app&#x2F;Lisenter 目录多了 DoSomething1.php 和 DoSomething2.php 两个文件，我们看看其中一个内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Lisenter;</span><br><span class=\"line\"></span><br><span class=\"line\">use App\\Events\\UserLogin;</span><br><span class=\"line\">use Illuminate\\Queue\\InteractsWithQueue;</span><br><span class=\"line\">use Illuminate\\Contracts\\Queue\\ShouldQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">class DoSomething1</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Create the event listener.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Handle the event.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param  UserLogin  $event</span><br><span class=\"line\">     * @return void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function handle(UserLogin $event)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        info(&#x27;do something1&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在两个监听器的 handle 方法中我们打印一个日志来测试一下，如代码 handle 方法所示。</p>\n<h2 id=\"分发和触发事件\"><a href=\"#分发和触发事件\" class=\"headerlink\" title=\"分发和触发事件\"></a>分发和触发事件</h2><p>我们在某个控制器的方法中来分发事件，也就是触发事件，看监听器是否正常工作。</p>\n<p>就是一句话：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event(new UserLogin());</span><br></pre></td></tr></table></figure>\n<p>然后我们请求这个控制器，观察日志，发现打印了日志：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2018-06-17 10:04:29] local.INFO: do something1</span><br><span class=\"line\">[2018-06-17 10:04:29] local.INFO: do something2</span><br></pre></td></tr></table></figure>\n<p>那么这个事件 - 监听机制就正常工作了。</p>\n<h1 id=\"队列异步处理\"><a href=\"#队列异步处理\" class=\"headerlink\" title=\"队列异步处理\"></a>队列异步处理</h1><p>如果某个监听器需要执行的操作比较慢，可以放到消息队列进行异步处理。</p>\n<p>比如把上面的 DoSomething1 改成需要放入队列的，只需要 implements ShoulQueue 接口。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DoSomething1 implements ShouldQueue</span><br></pre></td></tr></table></figure>\n<p>也可以指定队列驱动，如下代码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 任务应该发送到的队列的连接的名称</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @var string|null</span><br><span class=\"line\"> */</span><br><span class=\"line\">public $connection = &#x27;redis&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 任务应该发送到的队列的名称</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @var string|null</span><br><span class=\"line\"> */</span><br><span class=\"line\">public $queue = &#x27;listeners&#x27;;</span><br></pre></td></tr></table></figure>\n<p>我们再次执行控制器方法。</p>\n<p>日志里没有打印 do something1，只有 do something2，但是在 redis 队列里发现了一个名为 queues:default 的列表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;job&quot;:&quot;Illuminate\\\\Events\\\\CallQueuedHandler@call&quot;,&quot;data&quot;:&#123;&quot;class&quot;:&quot;App\\\\Listener\\\\DoSomething1&quot;,&quot;method&quot;:&quot;handle&quot;,&quot;data&quot;:&quot;a:1:&#123;i:0;O:20:\\&quot;App\\\\Events\\\\UserLogin\\&quot;:1:&#123;s:6:\\&quot;socket\\&quot;;N;&#125;&#125;&quot;&#125;,&quot;id&quot;:&quot;3D7VDUwueYGtUvsazicWsifwWQxnnLID&quot;,&quot;attempts&quot;:1&#125;</span><br></pre></td></tr></table></figure>\n<p>这个时候需要使用 php artisan queue:work 执行队列任务，才是真正执行 DoSomething1 这个监听器的 handle 方法。</p>\n",
            "tags": [
                "事件"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2022/11/24/47.%20laravel%20%E8%A1%A8%E5%8D%95%E8%AF%B7%E6%B1%82%E9%AA%8C%E8%AF%81%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/",
            "url": "https://nightingalewk.cn/2022/11/24/47.%20laravel%20%E8%A1%A8%E5%8D%95%E8%AF%B7%E6%B1%82%E9%AA%8C%E8%AF%81%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/",
            "title": "laravel 表单请求验证简明示例",
            "date_published": "2022-11-24T08:10:00.000Z",
            "content_html": "<p>简单写一下 laravel 表单请求验证使用方法</p>\n<span id=\"more\"></span>\n<p>示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">use App\\Http\\Requests\\UserRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">class UsersController extends Controller</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\">    .</span><br><span class=\"line\"></span><br><span class=\"line\">    public function update(UserRequest $request, User $user)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $user-&gt;update($request-&gt;all());</span><br><span class=\"line\">        return redirect()-&gt;route(&#x27;users.show&#x27;, $user-&gt;id)-&gt;with(&#x27;success&#x27;, &#x27;个人资料更新成功！&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实我们将 update 方法中传的第一个参，从 Request 改成 UserRequest 就可以了，系统会在一开始就开始验证，过了再继续之后的步骤。而在此之前，我们需要生成表单请求验证：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:request UserRequest</span><br></pre></td></tr></table></figure>\n<p>之后我们就可以去修改这个 UserRequest 文件了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Http\\Requests;</span><br><span class=\"line\"></span><br><span class=\"line\">use Illuminate\\Foundation\\Http\\FormRequest;</span><br><span class=\"line\">use Illuminate\\Support\\Facades\\Auth;</span><br><span class=\"line\"></span><br><span class=\"line\">class UserRequest extends FormRequest</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Determine if the user is authorized to make this request.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return bool</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function authorize()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Get the validation rules that apply to the request.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return array&lt;string, mixed&gt;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function rules()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return [</span><br><span class=\"line\">            &#x27;name&#x27; =&gt; &#x27;required|between:3,25|regex:/^[A-Za-z0-9\\-\\_]+$/|unique:users,name,&#x27; . Auth::id(),</span><br><span class=\"line\">            &#x27;email&#x27; =&gt; &#x27;required|email&#x27;,</span><br><span class=\"line\">            &#x27;introduction&#x27; =&gt; &#x27;max:80&#x27;,</span><br><span class=\"line\">        ];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function messages()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return [</span><br><span class=\"line\">            &#x27;name.unique&#x27; =&gt; &#x27;用户名已被占用，请重新填写&#x27;,</span><br><span class=\"line\">            &#x27;name.regex&#x27; =&gt; &#x27;用户名只支持英文、数字、横杠和下划线。&#x27;,</span><br><span class=\"line\">            &#x27;name.between&#x27; =&gt; &#x27;用户名必须介于 3 - 25 个字符之间。&#x27;,</span><br><span class=\"line\">            &#x27;name.required&#x27; =&gt; &#x27;用户名不能为空。&#x27;,</span><br><span class=\"line\">        ];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>",
            "tags": [
                "表单验证"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2022/04/26/41.%20Target%20Class%20does%20not%20exists%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "url": "https://nightingalewk.cn/2022/04/26/41.%20Target%20Class%20does%20not%20exists%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "title": "Target Class does not exists 解决方案",
            "date_published": "2022-04-26T04:45:00.000Z",
            "content_html": "<h2 id=\"问题情况\"><a href=\"#问题情况\" class=\"headerlink\" title=\"问题情况\"></a>问题情况</h2><p>在路由里写了一个 API 路由</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::prefix(&#x27;v1&#x27;)-&gt;namespace(&#x27;Api&#x27;)-&gt;name(&#x27;api.v1.&#x27;)-&gt;group(function () &#123;</span><br><span class=\"line\">    // 短信验证码</span><br><span class=\"line\">    Route::post(&#x27;verificationCodes&#x27;, [VerificationCodesController::class, &#x27;store&#x27;])</span><br><span class=\"line\">        -&gt;name(&#x27;verificationCodes.store&#x27;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>控制器如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Http\\Controllers\\Api;</span><br><span class=\"line\"></span><br><span class=\"line\">use Illuminate\\Http\\Request;</span><br><span class=\"line\"></span><br><span class=\"line\">class VerificationCodesController extends Controller</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function store()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return response()-&gt;json([&#x27;test_message&#x27; =&gt; &#x27;store verification code&#x27;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Postman 以 post 方式访问 <a href=\"http://larabbs.test/api/v1/verificationCodes%EF%BC%8C%E6%8A%A5%E9%94%99%EF%BC%9A\">http://larabbs.test/api/v1/verificationCodes，报错：</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Target Class XXXXXXXXX does not exists</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2. 解决方案\"></a>2. 解决方案</h2><p>抛开先入为主的思想，我们一条一条的排查：</p>\n<ol>\n<li>php artisan cache:clear</li>\n<li>检查命名空间大小写</li>\n<li>是否有路由组，路由组是否声明了命名空间？</li>\n<li>在同样的位置注册另一个路由地址，使用其他控制器，是否生效？</li>\n<li>注释关于 SearchController 的所有相关代码，项目是否正常运行？</li>\n<li>把 api.php 路由文件的内容全部删除，项目是否正常运行？</li>\n</ol>\n",
            "tags": [
                "debug"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2022/04/14/40.%20Laravel%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/",
            "url": "https://nightingalewk.cn/2022/04/14/40.%20Laravel%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/",
            "title": "laravel 定时任务配置方式",
            "date_published": "2022-04-14T05:39:00.000Z",
            "content_html": "<h2 id=\"1-创建一个自定义的-Command\"><a href=\"#1-创建一个自定义的-Command\" class=\"headerlink\" title=\"1. 创建一个自定义的 Command\"></a>1. 创建一个自定义的 Command</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:command WarrantyRefresh</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h2 id=\"2-编辑-WarrantyRefresh-php-文件（app-Console-Commands-WarrantyRefresh-php）\"><a href=\"#2-编辑-WarrantyRefresh-php-文件（app-Console-Commands-WarrantyRefresh-php）\" class=\"headerlink\" title=\"2. 编辑 WarrantyRefresh.php 文件（app&#x2F;Console&#x2F;Commands&#x2F;WarrantyRefresh.php）\"></a>2. 编辑 WarrantyRefresh.php 文件（app&#x2F;Console&#x2F;Commands&#x2F;WarrantyRefresh.php）</h2><p>​</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Console\\Commands;</span><br><span class=\"line\"></span><br><span class=\"line\">use App\\Admin\\Controllers\\Api\\StaticFun;</span><br><span class=\"line\">use App\\Models\\Asset;</span><br><span class=\"line\">use Illuminate\\Console\\Command;</span><br><span class=\"line\">use Illuminate\\Support\\Facades\\Log;</span><br><span class=\"line\"></span><br><span class=\"line\">class WarrantyRefresh extends Command</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * The name and signature of the console command.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @var string</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected $signature = &#x27;command:warrantyRefresh&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * The console command description.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @var string</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected $description = &#x27;刷新资产质保时间为最新状态&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Create a new command instance.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        parent::__construct();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Execute the console command.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return int</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function handle()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;info(now() . &quot; Start Refresh Asset Warranty Remain&quot;);</span><br><span class=\"line\">        // 拿到全部资产信息</span><br><span class=\"line\">        $assets = Asset::all();</span><br><span class=\"line\"></span><br><span class=\"line\">        // 创建进度条</span><br><span class=\"line\">        $bar = $this-&gt;output-&gt;createProgressBar(count($assets));</span><br><span class=\"line\"></span><br><span class=\"line\">        // 开始循环计算资产剩余质保时间并更新</span><br><span class=\"line\">        foreach ($assets as $key =&gt; $value) &#123;</span><br><span class=\"line\">            // 计算</span><br><span class=\"line\">            $warranty_info = StaticFun::get2DateInfo($value-&gt;warranty_start, $value-&gt;warranty_end);</span><br><span class=\"line\">            // 拿取</span><br><span class=\"line\">            $warranty_remain = $warranty_info[&#x27;warranty_remain&#x27;];</span><br><span class=\"line\">            // 更新写入</span><br><span class=\"line\">            $asset = Asset::find($value-&gt;id);</span><br><span class=\"line\">            $asset-&gt;warranty_remain = $warranty_remain;</span><br><span class=\"line\">            $asset-&gt;save();</span><br><span class=\"line\"></span><br><span class=\"line\">            // 进度条+1</span><br><span class=\"line\">            $bar-&gt;advance();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 进度条结束</span><br><span class=\"line\">        $bar-&gt;finish();</span><br><span class=\"line\">        </span><br><span class=\"line\">        $this-&gt;info(&quot;\\n&quot; . now() . &quot; Finish Refresh √ \\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"3-修改kernel-php\"><a href=\"#3-修改kernel-php\" class=\"headerlink\" title=\"3.修改kernel.php\"></a>3.修改kernel.php</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Console;</span><br><span class=\"line\"></span><br><span class=\"line\">use Illuminate\\Console\\Scheduling\\Schedule;</span><br><span class=\"line\">use Illuminate\\Foundation\\Console\\Kernel as ConsoleKernel;</span><br><span class=\"line\"></span><br><span class=\"line\">class Kernel extends ConsoleKernel</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Define the application&#x27;s command schedule.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule</span><br><span class=\"line\">     * @return void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected function schedule(Schedule $schedule)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // 每天0点刷新资产剩余质保日期</span><br><span class=\"line\">        $schedule-&gt;command(&#x27;command:warrantyRefresh&#x27;)-&gt;daily();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Register the commands for the application.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected function commands()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;load(__DIR__ . &#x27;/Commands&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">        require base_path(&#x27;routes/console.php&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-执行定时任务\"><a href=\"#4-执行定时任务\" class=\"headerlink\" title=\"4.执行定时任务\"></a>4.执行定时任务</h2><p>手动执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan command:WarrantyRefresh</span><br></pre></td></tr></table></figure>\n<p>服务器自动执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.编辑定时任务：</span><br><span class=\"line\">crontab -e</span><br><span class=\"line\"></span><br><span class=\"line\">2.php多版本可以将php改为版本的绝对路径，项目路径</span><br><span class=\"line\"> * * * * * php /www/wwwroot/yanji/artisan schedule:run &gt;&gt; /www/wwwroot/yanji/CronReord.txt 2&gt;&amp;1</span><br><span class=\"line\"></span><br><span class=\"line\">3.CentOS 7 重启 cron 服务</span><br><span class=\"line\">systemctl restart crond.service </span><br></pre></td></tr></table></figure>",
            "tags": [
                "定时任务"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2022/03/01/37.%20%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%20Laravel%20Sail%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/",
            "url": "https://nightingalewk.cn/2022/03/01/37.%20%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%20Laravel%20Sail%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/",
            "title": "（更新中）从零开始搭建 laravel Sail 开发环境",
            "date_published": "2022-03-01T09:00:00.000Z",
            "content_html": "<p>之前的 laravel 开发环境均为 windows + homestead，一直都用得挺好没问题，但由于 Windows 11 的稳定性越来越好，并且内置的 WSL 也更新到了第二代，再加上 laravel 官方也将推荐的统一开发环境换成了 laravel Sail，啥也不说了，本着终生学习的态度，是时候放弃虚机，拥抱 docker 了。</p>\n<p>通过几天的实际体验，给我最大的感受就是快，方方面面的快，环境启停迅速，配置也快，页面响应的也快，没别的，巴适的很。同时在 homestead 做的一切事情，在 docker 下也全能做到，完美</p>\n<p>在开始之前，我们需要检查如下几点是否已经做到</p>\n<ul>\n<li>Windows 10 or 11，并升级到系统最新版本</li>\n<li>受够虚机缓慢的相应和繁琐的配置</li>\n<li>热与学习新技术，不局限于当下</li>\n<li>爱折腾的心</li>\n</ul>\n<p>发稿时，我当前版本环境为</p>\n<ul>\n<li>windows 11 22H2</li>\n<li>docker 4.19.0</li>\n<li>laravel 10</li>\n</ul>\n<p>ok，让我们正式开始配置之旅吧，很简单</p>\n<h2 id=\"1-启用-wsl2\"><a href=\"#1-启用-wsl2\" class=\"headerlink\" title=\"1. 启用 wsl2\"></a>1. 启用 wsl2</h2><p>按 <code>Win + R</code> 。输入指令 <code>appwiz.cpl</code> 回车。</p>\n<p>在弹出窗的左侧点击 <code>启动或关闭 Windows 功能</code> ，在弹出窗内勾选 <code>适用于 Linux 的 Windows 子系统</code>、<code>Hyper-V</code> 和 <code>虚拟机平台</code> 。</p>\n<p>点击确定电脑会及自动安装，期间根据提示会有几次重启。</p>\n<p>重启完后，打开终端应用 <code>Windows Terminal</code> （以管理员方式运行），接下来我们需要设置 WSL 版本为 WSL2 ，并对系统进行更新</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --set-default-version 2</span><br><span class=\"line\">wsl --update</span><br></pre></td></tr></table></figure>\n<p>当然，关于更新这块，你也可以打开电脑设置中的 Windows更新，点击检查更新即可对 wsl 进行更新</p>\n<h2 id=\"2-安装-Ubuntu\"><a href=\"#2-安装-Ubuntu\" class=\"headerlink\" title=\"2. 安装 Ubuntu\"></a>2. 安装 Ubuntu</h2><p>当前我们的 Ubuntu TLS 版本为 22.04，我们在 Windows Terminal 中继续操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --list --online    // 列出所有可安装的 linux 版本</span><br><span class=\"line\">wsl --install -d Ubuntu-22.04    // 这行指令会安装 Ubuntu-22.04。该指令可能会提示网络错误，因为需要访问 ``https://raw.githubusercontent.com/microsoft/WSL/master/distributions/DistributionInfo.json`` 这个资源，请科学上网后重试该指令</span><br></pre></td></tr></table></figure>\n\n<p>系统安装完毕后会自动启动，进入 ubuntu 界面，等待初始化完毕后，需要设置一个 linux 账号，为了下文演示，我设置的账号密码为 <code>wangkai Admin@123</code></p>\n<p>完成后便可进入熟悉的命令行，关闭即可。以下是具体的执行效果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\djsyw&gt; wsl --list --online</span><br><span class=\"line\">以下是可安装的有效分发的列表。</span><br><span class=\"line\">使用 &#x27;wsl.exe --install &lt;Distro&gt;&#x27; 安装。</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                   FRIENDLY NAME</span><br><span class=\"line\">Ubuntu                                 Ubuntu</span><br><span class=\"line\">Debian                                 Debian GNU/Linux</span><br><span class=\"line\">kali-linux                             Kali Linux Rolling</span><br><span class=\"line\">Ubuntu-18.04                           Ubuntu 18.04 LTS</span><br><span class=\"line\">Ubuntu-20.04                           Ubuntu 20.04 LTS</span><br><span class=\"line\">Ubuntu-22.04                           Ubuntu 22.04 LTS</span><br><span class=\"line\">OracleLinux_8_5                        Oracle Linux 8.5</span><br><span class=\"line\">OracleLinux_7_9                        Oracle Linux 7.9</span><br><span class=\"line\">SUSE-Linux-Enterprise-Server-15-SP4    SUSE Linux Enterprise Server 15 SP4</span><br><span class=\"line\">openSUSE-Leap-15.4                     openSUSE Leap 15.4</span><br><span class=\"line\">openSUSE-Tumbleweed                    openSUSE Tumbleweed</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\djsyw&gt; wsl --install -d Ubuntu-22.04</span><br><span class=\"line\">正在安装: Ubuntu 22.04 LTS</span><br><span class=\"line\">已安装 Ubuntu 22.04 LTS。</span><br><span class=\"line\">正在启动 Ubuntu 22.04 LTS...</span><br><span class=\"line\">Installing, this may take a few minutes...</span><br><span class=\"line\">Please create a default UNIX user account. The username does not need to match your Windows username.</span><br><span class=\"line\">For more information visit: https://aka.ms/wslusers</span><br><span class=\"line\">Enter new UNIX username: wangkai</span><br><span class=\"line\">New password:</span><br><span class=\"line\">Retype new password:</span><br><span class=\"line\">passwd: password updated successfully</span><br><span class=\"line\">Installation successful!</span><br><span class=\"line\">To run a command as administrator (user &quot;root&quot;), use &quot;sudo &lt;command&gt;&quot;.</span><br><span class=\"line\">See &quot;man sudo_root&quot; for details.</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to Ubuntu 22.04.2 LTS (GNU/Linux 5.15.90.1-microsoft-standard-WSL2 x86_64)</span><br><span class=\"line\"></span><br><span class=\"line\"> * Documentation:  https://help.ubuntu.com</span><br><span class=\"line\"> * Management:     https://landscape.canonical.com</span><br><span class=\"line\"> * Support:        https://ubuntu.com/advantage</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">This message is shown once a day. To disable it please create the</span><br><span class=\"line\">/home/wangkai/.hushlogin file.</span><br><span class=\"line\">wangkai@Surface-Pro-7:~$</span><br></pre></td></tr></table></figure>\n\n<p>以上安装 ubuntu 的步骤，也可以在应用商店直接搜索安装，也是一样的，相比指令更加直观。</p>\n<h2 id=\"3-安装-docker\"><a href=\"#3-安装-docker\" class=\"headerlink\" title=\"3. 安装 docker\"></a>3. 安装 docker</h2><p>前往 [Docker 官网][1] 下载最新的 Docker Desktop ，下载可能需要注册个免费账号，下载完成后打开安装包，一直下一步即可。</p>\n<p>安装完毕会提示注销一下电脑，根据提示操作即可</p>\n<h2 id=\"4-配置-docker\"><a href=\"#4-配置-docker\" class=\"headerlink\" title=\"4. 配置 docker\"></a>4. 配置 docker</h2><p>打开 docker 后，选择上方的齿轮（即设置）- Docker Engine，在右侧我们需要填写一下 docker 仓库的加速镜像，就是下方代码的 registry-mirrors 这块</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;builder&quot;: &#123;</span><br><span class=\"line\">    &quot;gc&quot;: &#123;</span><br><span class=\"line\">      &quot;defaultKeepStorage&quot;: &quot;20GB&quot;,</span><br><span class=\"line\">      &quot;enabled&quot;: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;experimental&quot;: false,</span><br><span class=\"line\">  &quot;features&quot;: &#123;</span><br><span class=\"line\">    &quot;buildkit&quot;: true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [</span><br><span class=\"line\">    &quot;https://hub-mirror.c.163.com&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后点击 Apply &amp; Restart ，进行重启，至此我们的 docker 配置就完事儿了。</p>\n<p>若你能够魔法上网，这一大步你啥也不用配置，官方的就是最好的，镜像会有几率出问题，我遇到很多次了。</p>\n<h1 id=\"5-创建测试项目\"><a href=\"#5-创建测试项目\" class=\"headerlink\" title=\"5. 创建测试项目\"></a>5. 创建测试项目</h1><p>为了解决 linux 子系统与 windows 之间文件传输缓慢的问题，我们的代码直接放在linux中，不要放在 windows 里，我们打开 vs code，安装 remote - WSL 扩展，完成后点击窗口左下角，选择 new WSL window，vs code 会下载必要的数据，完成后，在左侧选择打开文件夹，我默认代码放在 &#x2F;home&#x2F;wangkai 的家目录中，点击确定即可</p>\n<p>在左侧右键新建 code 文件夹，并对其右键，选择在集成终端中打开，在命令行中输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s https://laravel.build/example-app | bash</span><br></pre></td></tr></table></figure>\n<p>接下来就会自动安装代码到本地</p>\n<h1 id=\"6-部署已有项目（已适配docker）并启动\"><a href=\"#6-部署已有项目（已适配docker）并启动\" class=\"headerlink\" title=\"6. 部署已有项目（已适配docker）并启动\"></a>6. 部署已有项目（已适配docker）并启动</h1><p>更多情况下，我们的工程项目一般不是在 docker 环境跑的，基本都是在 lnmp 的环境下开发和部署（win 环境？异端！烧了！），比如我们经常使用的“本地 homestead 开发 + 线上 lnmp 部署”思路。下面我们就切换我们的开发方式，修改为“本地 docker 开发+线上 docker or lnmp 环境部署”的思路。</p>\n<p>首先我们先在 &#x2F;home&#x2F;wangkai 目录下新建一个名为 code 的目录，我们之后项目代码都放在这。这里我多说一些为啥这样操作，我们把代码放在 linux 中，而非放在 windows 中，目的就是解决了这两个系统数据传输的缓慢问题，这一点在我们使用 homestead 环境的时候尤其明显，用过的都知道，homestead 是吧 virtualbox 的 linux 虚机的一个目录 与 windows 的一个文件夹做了同步，你在任意一个系统中操作的代码都会同步到另一端，这期间就牵扯到跨系统，固然牵扯到跨系统带来的读写缓慢，而这里我们的一切都在 linux 中操作，你的代码、数据库、redis、nginx 都在 Linux<br>中，不与 windows 做交互，速度自然高。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/wangkai</span><br><span class=\"line\">mkdir code</span><br></pre></td></tr></table></figure>\n\n<p>然后我们再从远端 git 仓库 clone 下一份全新的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/code</span><br><span class=\"line\">git clone git@github.com:NightingaleWK/yanjiv2.git yanjiv2</span><br></pre></td></tr></table></figure>\n\n<p>注意，这里我使用的是 ssh-key 的方式拉的代码到本地，你也可以使用 https 的方式，只不过需要每次都输入账号密码，用 ssh-key 的方法是实现了免密，比较方便。关于如何实现 ssh-key 的方式操作 git，请自行百度或者等我佛系更新一下。</p>\n<p>之后我们复制一份 .env 出来，并根据实际修改其中的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd yanjiv2</span><br><span class=\"line\">cp .env.example .env</span><br><span class=\"line\">vim .env</span><br><span class=\"line\"></span><br><span class=\"line\">然后开始你的修改就行了，修改完毕保存退出 .env，下面是修改的例子</span><br><span class=\"line\"></span><br><span class=\"line\">APP_NAME=yanjiv2</span><br><span class=\"line\">APP_ENV=local</span><br><span class=\"line\">APP_KEY=</span><br><span class=\"line\">APP_DEBUG=true</span><br><span class=\"line\">APP_URL=http://localhost</span><br><span class=\"line\"></span><br><span class=\"line\">LOG_CHANNEL=stack</span><br><span class=\"line\">LOG_DEPRECATIONS_CHANNEL=null</span><br><span class=\"line\">LOG_LEVEL=debug</span><br><span class=\"line\"></span><br><span class=\"line\">DB_CONNECTION=mysql</span><br><span class=\"line\">DB_HOST=mysql</span><br><span class=\"line\">DB_PORT=3306</span><br><span class=\"line\">DB_DATABASE=yanjiv2</span><br><span class=\"line\">DB_USERNAME=sail</span><br><span class=\"line\">DB_PASSWORD=password</span><br><span class=\"line\"></span><br><span class=\"line\">BROADCAST_DRIVER=log</span><br><span class=\"line\">CACHE_DRIVER=file</span><br><span class=\"line\">FILESYSTEM_DRIVER=local</span><br><span class=\"line\">QUEUE_CONNECTION=sync</span><br><span class=\"line\">SESSION_DRIVER=file</span><br><span class=\"line\">SESSION_LIFETIME=120</span><br><span class=\"line\"></span><br><span class=\"line\">MEMCACHED_HOST=127.0.0.1</span><br><span class=\"line\"></span><br><span class=\"line\">REDIS_HOST=127.0.0.1</span><br><span class=\"line\">REDIS_PASSWORD=null</span><br><span class=\"line\">REDIS_PORT=6379</span><br><span class=\"line\"></span><br><span class=\"line\">MAIL_MAILER=smtp</span><br><span class=\"line\">MAIL_HOST=mailhog</span><br><span class=\"line\">MAIL_PORT=1025</span><br><span class=\"line\">MAIL_USERNAME=null</span><br><span class=\"line\">MAIL_PASSWORD=null</span><br><span class=\"line\">MAIL_ENCRYPTION=null</span><br><span class=\"line\">MAIL_FROM_ADDRESS=null</span><br><span class=\"line\">MAIL_FROM_NAME=&quot;$&#123;APP_NAME&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">AWS_ACCESS_KEY_ID=</span><br><span class=\"line\">AWS_SECRET_ACCESS_KEY=</span><br><span class=\"line\">AWS_DEFAULT_REGION=us-east-1</span><br><span class=\"line\">AWS_BUCKET=</span><br><span class=\"line\">AWS_USE_PATH_STYLE_ENDPOINT=false</span><br><span class=\"line\"></span><br><span class=\"line\">PUSHER_APP_ID=</span><br><span class=\"line\">PUSHER_APP_KEY=</span><br><span class=\"line\">PUSHER_APP_SECRET=</span><br><span class=\"line\">PUSHER_APP_CLUSTER=mt1</span><br><span class=\"line\"></span><br><span class=\"line\">MIX_PUSHER_APP_KEY=&quot;$&#123;PUSHER_APP_KEY&#125;&quot;</span><br><span class=\"line\">MIX_PUSHER_APP_CLUSTER=&quot;$&#123;PUSHER_APP_CLUSTER&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 环境是HTTPS环境，则为 true，否则请填写 false</span><br><span class=\"line\">ADMIN_HTTPS=false</span><br><span class=\"line\"></span><br><span class=\"line\"># 环境若为windows，则为 true，否则请填写 false。这里影响维修工单导出时图片的显示</span><br><span class=\"line\">MAINTENANCE_EXPORT_DEV_MODE=false</span><br></pre></td></tr></table></figure>\n\n<p>然后我们在 ubunut 中，跳转到项目根目录，执行如下代码来运行 composer install 指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm \\</span><br><span class=\"line\">    -u &quot;$(id -u):$(id -g)&quot; \\</span><br><span class=\"line\">    -v &quot;$(pwd):/var/www/html&quot; \\</span><br><span class=\"line\">    -w /var/www/html \\</span><br><span class=\"line\">    laravelsail/php82-composer:latest \\</span><br><span class=\"line\">    composer install --ignore-platform-reqs</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以在 ubuntu 没装 composer 的情况下运行composer命令，这个命令使用一个包含 PHP 与 Composer 的小型 Docker 容器进行应用程序依赖的安装。</p>\n<p>当你使用 laravelsail&#x2F;phpXX-composer 镜像时，你应该选择和你的应用程序所用环境相同的 PHP 版本（74、80、81 或 82）</p>\n<p>默认情况下，Sail 命令使用 vendor&#x2F;bin&#x2F;sail 脚本调用，该脚本已包含在所有新建的 laravel 应用程序中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./vendor/bin/sail up</span><br></pre></td></tr></table></figure>\n\n<p>但与其重复的输入 vendor&#x2F;bin&#x2F;sail 来执行 Sail 命令，你可能会希望配置一个 Shell 别名方便你更容易的执行 Sail 命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias sail=&#x27;[ -f sail ] &amp;&amp; sh sail || sh vendor/bin/sail&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>为了确保这一点始终可用，你可以把它添加到你的主目录下的 shell 配置文件中，如 ~&#x2F;.zshrc 或 ~&#x2F;.bashrc ，然后重新启动你的 shell。</p>\n<p>一旦配置了 shell 别名，你可以通过简单地输入 sail 来执行 Sail 命令。本文接下来的示例都假定你已经配置了此别名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sail up</span><br></pre></td></tr></table></figure>\n\n<p>具体执行效果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wangkai@PRECISION-7920:~$ cd code/yanjiv2/</span><br><span class=\"line\">wangkai@PRECISION-7920:~/code/yanjiv2$ sail up</span><br><span class=\"line\">[+] Running 65/7</span><br><span class=\"line\"> ✔ redis 6 layers [⣿⣿⣿⣿⣿⣿]      0B/0B      Pulled                                                         25.3s</span><br><span class=\"line\"> ✔ mailpit 2 layers [⣿⣿]      0B/0B      Pulled                                                           44.8s</span><br><span class=\"line\"> ! laravel.test Warning                                                                                    2.5s</span><br><span class=\"line\"> ✔ memcached 5 layers [⣿⣿⣿⣿⣿]      0B/0B      Pulled                                                      52.5s</span><br><span class=\"line\"> ✔ selenium 33 layers [⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿]      0B/0B      Pulled                         146.5s</span><br><span class=\"line\"> ✔ meilisearch 5 layers [⣿⣿⣿⣿⣿]      0B/0B      Pulled                                                    58.0s</span><br><span class=\"line\"> ✔ mysql 7 layers [⣿⣿⣿⣿⣿⣿⣿]      0B/0B      Pulled                                                        60.4s</span><br><span class=\"line\">[+] Building 568.7s (16/16) FINISHED</span><br><span class=\"line\"> =&gt; [internal] load build definition from Dockerfile                                                                                                                                                                                                   0.1s</span><br><span class=\"line\"> =&gt; =&gt; transferring dockerfile: 2.74kB                                                                                                                                                                                                                 0.0s</span><br><span class=\"line\"> =&gt; [internal] load .dockerignore                                                                                                                                                                                                                      0.1s</span><br><span class=\"line\"> =&gt; =&gt; transferring context: 2B                                                                                                                                                                                                                        0.0s</span><br><span class=\"line\"> =&gt; [internal] load metadata for docker.io/library/ubuntu:22.04                                                                                                                                                                                        2.9s</span><br><span class=\"line\"> =&gt; [internal] load build context                                                                                                                                                                                                                      0.0s</span><br><span class=\"line\"> =&gt; =&gt; transferring context: 907B                                                                                                                                                                                                                      0.0s</span><br><span class=\"line\"> =&gt; [ 1/11] FROM docker.io/library/ubuntu:22.04@sha256:9dc05cf19a5745c33b9327dba850480dae80310972dea9b05052162e7c7f2763                                                                                                                                7.1s</span><br><span class=\"line\"> =&gt; =&gt; resolve docker.io/library/ubuntu:22.04@sha256:9dc05cf19a5745c33b9327dba850480dae80310972dea9b05052162e7c7f2763                                                                                                                                  0.0s</span><br><span class=\"line\"> =&gt; =&gt; sha256:9dc05cf19a5745c33b9327dba850480dae80310972dea9b05052162e7c7f2763 1.20kB / 1.20kB                                                                                                                                                         0.0s</span><br><span class=\"line\"> =&gt; =&gt; sha256:965fbcae990b0467ed5657caceaec165018ef44a4d2d46c7cdea80a9dff0d1ea 529B / 529B                                                                                                                                                             0.0s</span><br><span class=\"line\"> =&gt; =&gt; sha256:6b7dfa7e8fdbe18ad425dd965a1049d984f31cf0ad57fa6d5377cca355e65f03 1.46kB / 1.46kB                                                                                                                                                         0.0s</span><br><span class=\"line\"> =&gt; =&gt; sha256:6e3729cf69e0ce2de9e779575a1fec8b7fb5efdfa822829290ab6d5d1bc3e797 30.43MB / 30.43MB                                                                                                                                                       6.2s</span><br><span class=\"line\"> =&gt; =&gt; extracting sha256:6e3729cf69e0ce2de9e779575a1fec8b7fb5efdfa822829290ab6d5d1bc3e797                                                                                                                                                              0.7s</span><br><span class=\"line\"> =&gt; [ 2/11] WORKDIR /var/www/html                                                                                                                                                                                                                      1.5s</span><br><span class=\"line\"> =&gt; [ 3/11] RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime &amp;&amp; echo UTC &gt; /etc/timezone                                                                                                                                                             0.8s</span><br><span class=\"line\"> =&gt; [ 4/11] RUN apt-get update     &amp;&amp; apt-get install -y gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python2 dnsutils librsvg2-bin     &amp;&amp; curl -sS &#x27;https://keyserver.ubuntu.com/pks/lookup?op=get&amp;sear  542.9s</span><br><span class=\"line\"> =&gt; [ 5/11] RUN setcap &quot;cap_net_bind_service=+ep&quot; /usr/bin/php8.2                                                                                                                                                                                      0.7s</span><br><span class=\"line\"> =&gt; [ 6/11] RUN groupadd --force -g 1000 sail                                                                                                                                                                                                          0.6s</span><br><span class=\"line\"> =&gt; [ 7/11] RUN useradd -ms /bin/bash --no-user-group -g 1000 -u 1337 sail                                                                                                                                                                             0.7s</span><br><span class=\"line\"> =&gt; [ 8/11] COPY start-container /usr/local/bin/start-container                                                                                                                                                                                        0.1s</span><br><span class=\"line\"> =&gt; [ 9/11] COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf                                                                                                                                                                              0.1s</span><br><span class=\"line\"> =&gt; [10/11] COPY php.ini /etc/php/8.2/cli/conf.d/99-sail.ini                                                                                                                                                                                           0.1s</span><br><span class=\"line\"> =&gt; [11/11] RUN chmod +x /usr/local/bin/start-container                                                                                                                                                                                                0.7s</span><br><span class=\"line\"> =&gt; exporting to image                                                                                                                                                                                                                                10.5s</span><br><span class=\"line\"> =&gt; =&gt; exporting layers                                                                                                                                                                                                                               10.5s</span><br><span class=\"line\"> =&gt; =&gt; writing image sha256:ba56461e171b7ca24bba5c554ab4fa9af1dfee46f15e432132b6999b94bd07b4                                                                                                                                                           0.0s</span><br><span class=\"line\"> =&gt; =&gt; naming to sail-8.2/app                                                                                                                                                                                                                          0.0s</span><br><span class=\"line\">[+] Running 11/11</span><br><span class=\"line\"> ✔ Network yanjiv2_sail               Created                                                                                                                                                                                                          0.1s</span><br><span class=\"line\"> ✔ Volume &quot;yanjiv2_sail-meilisearch&quot;  Created                                                                                                                                                                                                          0.0s</span><br><span class=\"line\"> ✔ Volume &quot;yanjiv2_sail-mysql&quot;        Created                                                                                                                                                                                                          0.0s</span><br><span class=\"line\"> ✔ Volume &quot;yanjiv2_sail-redis&quot;        Created                                                                                                                                                                                                          0.0s</span><br><span class=\"line\"> ✔ Container yanjiv2-mysql-1          Created                                                                                                                                                                                                          0.2s</span><br><span class=\"line\"> ✔ Container yanjiv2-selenium-1       Created                                                                                                                                                                                                          0.2s</span><br><span class=\"line\"> ✔ Container yanjiv2-redis-1          Created                                                                                                                                                                                                          0.2s</span><br><span class=\"line\"> ✔ Container yanjiv2-memcached-1      Created                                                                                                                                                                                                          0.2s</span><br><span class=\"line\"> ✔ Container yanjiv2-meilisearch-1    Created                                                                                                                                                                                                          0.2s</span><br><span class=\"line\"> ✔ Container yanjiv2-mailpit-1        Created                                                                                                                                                                                                          0.2s</span><br><span class=\"line\"> ✔ Container yanjiv2-laravel.test-1   Created                                                                                                                                                                                                          0.1s</span><br><span class=\"line\">Attaching to yanjiv2-laravel.test-1, yanjiv2-mailpit-1, yanjiv2-meilisearch-1, yanjiv2-memcached-1, yanjiv2-mysql-1, yanjiv2-redis-1, yanjiv2-selenium-1</span><br><span class=\"line\">yanjiv2-selenium-1      | 2023-05-05 06:47:12,672 INFO Included extra file &quot;/etc/supervisor/conf.d/selenium.conf&quot; during parsing</span><br><span class=\"line\">yanjiv2-selenium-1      | 2023-05-05 06:47:12,676 INFO RPC interface &#x27;supervisor&#x27; initialized</span><br><span class=\"line\">yanjiv2-selenium-1      | 2023-05-05 06:47:12,677 CRIT Server &#x27;unix_http_server&#x27; running without any HTTP authentication checking</span><br><span class=\"line\">yanjiv2-selenium-1      | 2023-05-05 06:47:12,677 INFO supervisord started with pid 8</span><br><span class=\"line\">yanjiv2-redis-1         | 1:C 05 May 2023 06:47:12.892 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class=\"line\">yanjiv2-redis-1         | 1:C 05 May 2023 06:47:12.892 # Redis version=7.0.11, bits=64, commit=00000000, modified=0, pid=1, just started</span><br><span class=\"line\">yanjiv2-redis-1         | 1:C 05 May 2023 06:47:12.892 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span><br><span class=\"line\">yanjiv2-redis-1         | 1:M 05 May 2023 06:47:12.893 * monotonic clock: POSIX clock_gettime</span><br><span class=\"line\">yanjiv2-redis-1         | 1:M 05 May 2023 06:47:12.893 * Running mode=standalone, port=6379.</span><br><span class=\"line\">yanjiv2-redis-1         | 1:M 05 May 2023 06:47:12.893 # Server initialized</span><br><span class=\"line\">yanjiv2-redis-1         | 1:M 05 May 2023 06:47:12.893 # WARNING Memory overcommit must be enabled! Without it, a background save or replication may fail under low memory condition. Being disabled, it can can also cause failures without low memory condition, see https://github.com/jemalloc/jemalloc/issues/1328. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.</span><br><span class=\"line\">yanjiv2-redis-1         | 1:M 05 May 2023 06:47:12.894 * Ready to accept connections</span><br><span class=\"line\">yanjiv2-mysql-1         | [Entrypoint] MySQL Docker Image 8.0.32-1.2.11-server</span><br><span class=\"line\">yanjiv2-mailpit-1       | INFO[2023/05/05 06:47:13] [smtpd] starting on 0.0.0.0:1025</span><br><span class=\"line\">yanjiv2-mailpit-1       | INFO[2023/05/05 06:47:13] [http] starting server on http://0.0.0.0:8025/</span><br><span class=\"line\">yanjiv2-mysql-1         | [Entrypoint] Initializing database</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:13.388634Z 0 [Warning] [MY-011068] [Server] The syntax &#x27;--skip-host-cache&#x27; is deprecated and will be removed in a future release. Please use SET GLOBAL host_cache_size=0 instead.</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:13.388730Z 0 [System] [MY-013169] [Server] /usr/sbin/mysqld (mysqld 8.0.32) initializing of server in progress as process 17</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:13.399393Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span><br><span class=\"line\">yanjiv2-selenium-1      | 2023-05-05 06:47:13,681 INFO spawned: &#x27;xvfb&#x27; with pid 10</span><br><span class=\"line\">yanjiv2-selenium-1      | 2023-05-05 06:47:13,683 INFO spawned: &#x27;vnc&#x27; with pid 11</span><br><span class=\"line\">yanjiv2-selenium-1      | 2023-05-05 06:47:13,686 INFO spawned: &#x27;novnc&#x27; with pid 13</span><br><span class=\"line\">yanjiv2-selenium-1      | 2023-05-05 06:47:13,691 INFO spawned: &#x27;selenium-standalone&#x27; with pid 18</span><br><span class=\"line\">yanjiv2-selenium-1      | Setting up SE_NODE_GRID_URL...</span><br><span class=\"line\">yanjiv2-selenium-1      | 2023-05-05 06:47:13,705 INFO success: xvfb entered RUNNING state, process has stayed up for &gt; than 0 seconds (startsecs)</span><br><span class=\"line\">yanjiv2-selenium-1      | 2023-05-05 06:47:13,705 INFO success: vnc entered RUNNING state, process has stayed up for &gt; than 0 seconds (startsecs)</span><br><span class=\"line\">yanjiv2-selenium-1      | 2023-05-05 06:47:13,705 INFO success: novnc entered RUNNING state, process has stayed up for &gt; than 0 seconds (startsecs)</span><br><span class=\"line\">yanjiv2-selenium-1      | 2023-05-05 06:47:13,705 INFO success: selenium-standalone entered RUNNING state, process has stayed up for &gt; than 0 seconds (startsecs)</span><br><span class=\"line\">yanjiv2-selenium-1      | Selenium Grid Standalone configuration:</span><br><span class=\"line\">yanjiv2-selenium-1      | [network]</span><br><span class=\"line\">yanjiv2-selenium-1      | relax-checks = true</span><br><span class=\"line\">yanjiv2-selenium-1      |</span><br><span class=\"line\">yanjiv2-selenium-1      | [node]</span><br><span class=\"line\">yanjiv2-selenium-1      | session-timeout = &quot;300&quot;</span><br><span class=\"line\">yanjiv2-selenium-1      | override-max-sessions = false</span><br><span class=\"line\">yanjiv2-selenium-1      | detect-drivers = false</span><br><span class=\"line\">yanjiv2-selenium-1      | drain-after-session-count = 0</span><br><span class=\"line\">yanjiv2-selenium-1      | max-sessions = 1</span><br><span class=\"line\">yanjiv2-selenium-1      |</span><br><span class=\"line\">yanjiv2-selenium-1      | [[node.driver-configuration]]</span><br><span class=\"line\">yanjiv2-selenium-1      | display-name = &quot;chrome&quot;</span><br><span class=\"line\">yanjiv2-selenium-1      | stereotype = &#x27;&#123;&quot;browserName&quot;: &quot;chrome&quot;, &quot;browserVersion&quot;: &quot;112.0&quot;, &quot;platformName&quot;: &quot;Linux&quot;&#125;&#x27;</span><br><span class=\"line\">yanjiv2-selenium-1      | max-sessions = 1</span><br><span class=\"line\">yanjiv2-selenium-1      |</span><br><span class=\"line\">yanjiv2-selenium-1      | Starting Selenium Grid Standalone...</span><br><span class=\"line\">yanjiv2-selenium-1      | Tracing is disabled</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:14.006754Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span><br><span class=\"line\">yanjiv2-selenium-1      | 06:47:14.251 INFO [LoggingOptions.configureLogEncoding] - Using the system default encoding</span><br><span class=\"line\">yanjiv2-selenium-1      | 06:47:14.258 INFO [OpenTelemetryTracer.createTracer] - Using OpenTelemetry for tracing</span><br><span class=\"line\">yanjiv2-laravel.test-1  | 2023-05-05 06:47:14,290 INFO Set uid to user 0 succeeded</span><br><span class=\"line\">yanjiv2-laravel.test-1  | 2023-05-05 06:47:14,292 INFO supervisord started with pid 1</span><br><span class=\"line\">yanjiv2-selenium-1      | 06:47:15.076 INFO [NodeOptions.getSessionFactories] - Detected 20 available processors</span><br><span class=\"line\">yanjiv2-selenium-1      | 06:47:15.134 INFO [NodeOptions.report] - Adding chrome for &#123;&quot;browserVersion&quot;: &quot;112.0&quot;,&quot;se:noVncPort&quot;: 7900,&quot;browserName&quot;: &quot;chrome&quot;,&quot;platformName&quot;: &quot;LINUX&quot;,&quot;se:vncEnabled&quot;: true&#125; 1 times (Host)</span><br><span class=\"line\">yanjiv2-selenium-1      | 06:47:15.153 INFO [Node.&lt;init&gt;] - Binding additional locator mechanisms: relative</span><br><span class=\"line\">yanjiv2-selenium-1      | 06:47:15.176 INFO [GridModel.setAvailability] - Switching Node 9fac02ef-1d70-409d-8b15-a74e93fb0f25 (uri: http://172.18.0.2:4444) from DOWN to UP</span><br><span class=\"line\">yanjiv2-selenium-1      | 06:47:15.177 INFO [LocalDistributor.add] - Added node 9fac02ef-1d70-409d-8b15-a74e93fb0f25 at http://172.18.0.2:4444. Health check every 120s</span><br><span class=\"line\">yanjiv2-laravel.test-1  | 2023-05-05 06:47:15,295 INFO spawned: &#x27;php&#x27; with pid 16</span><br><span class=\"line\">yanjiv2-meilisearch-1   |</span><br><span class=\"line\">yanjiv2-meilisearch-1   | 888b     d888          d8b 888 d8b                                            888</span><br><span class=\"line\">yanjiv2-meilisearch-1   | 8888b   d8888          Y8P 888 Y8P                                            888</span><br><span class=\"line\">yanjiv2-meilisearch-1   | 88888b.d88888              888                                                888</span><br><span class=\"line\">yanjiv2-meilisearch-1   | 888Y88888P888  .d88b.  888 888 888 .d8888b   .d88b.   8888b.  888d888 .d8888b 88888b.</span><br><span class=\"line\">yanjiv2-meilisearch-1   | 888 Y888P 888 d8P  Y8b 888 888 888 88K      d8P  Y8b     &quot;88b 888P&quot;  d88P&quot;    888 &quot;88b</span><br><span class=\"line\">yanjiv2-meilisearch-1   | 888  Y8P  888 88888888 888 888 888 &quot;Y8888b. 88888888 .d888888 888    888      888  888</span><br><span class=\"line\">yanjiv2-meilisearch-1   | 888   &quot;   888 Y8b.     888 888 888      X88 Y8b.     888  888 888    Y88b.    888  888</span><br><span class=\"line\">yanjiv2-meilisearch-1   | 888       888  &quot;Y8888  888 888 888  88888P&#x27;  &quot;Y8888  &quot;Y888888 888     &quot;Y8888P 888  888</span><br><span class=\"line\">yanjiv2-meilisearch-1   |</span><br><span class=\"line\">yanjiv2-meilisearch-1   | Config file path:     &quot;none&quot;</span><br><span class=\"line\">yanjiv2-meilisearch-1   | Database path:                &quot;./data.ms&quot;</span><br><span class=\"line\">yanjiv2-meilisearch-1   | Server listening on:  &quot;http://0.0.0.0:7700&quot;</span><br><span class=\"line\">yanjiv2-meilisearch-1   | Environment:          &quot;development&quot;</span><br><span class=\"line\">yanjiv2-meilisearch-1   | Commit SHA:           &quot;4b953d62fbab81278324e71b4037eb06355dd49a&quot;</span><br><span class=\"line\">yanjiv2-meilisearch-1   | Commit date:          &quot;2023-04-13T16:24:16+00:00&quot;</span><br><span class=\"line\">yanjiv2-meilisearch-1   | Package version:      &quot;1.1.1&quot;</span><br><span class=\"line\">yanjiv2-meilisearch-1   |</span><br><span class=\"line\">yanjiv2-meilisearch-1   | Thank you for using Meilisearch!</span><br><span class=\"line\">yanjiv2-meilisearch-1   |</span><br><span class=\"line\">yanjiv2-meilisearch-1   |</span><br><span class=\"line\">yanjiv2-meilisearch-1   | We collect anonymized analytics to improve our product and your experience. To learn more, including how to turn off analytics, visit our dedicated documentation page: https://docs.meilisearch.com/learn/what_is_meilisearch/telemetry.html</span><br><span class=\"line\">yanjiv2-meilisearch-1   |</span><br><span class=\"line\">yanjiv2-meilisearch-1   | Anonymous telemetry:  &quot;Enabled&quot;</span><br><span class=\"line\">yanjiv2-meilisearch-1   | Instance UID:         &quot;073aa49c-374d-4af8-bb0c-5e0b8ef95b38&quot;</span><br><span class=\"line\">yanjiv2-meilisearch-1   |</span><br><span class=\"line\">yanjiv2-meilisearch-1   |</span><br><span class=\"line\">yanjiv2-meilisearch-1   |</span><br><span class=\"line\">yanjiv2-meilisearch-1   |  No master key was found. The server will accept unidentified requests.</span><br><span class=\"line\">yanjiv2-meilisearch-1   |</span><br><span class=\"line\">yanjiv2-meilisearch-1   |  A master key of at least 16 bytes will be required when switching to a production environment.</span><br><span class=\"line\">yanjiv2-meilisearch-1   |</span><br><span class=\"line\">yanjiv2-meilisearch-1   |</span><br><span class=\"line\">yanjiv2-meilisearch-1   | We generated a new secure master key for you (you can safely use this token):</span><br><span class=\"line\">yanjiv2-meilisearch-1   |</span><br><span class=\"line\">yanjiv2-meilisearch-1   | &gt;&gt; --master-key XVIX1t9QZsTQN6nz7uSS8Y71qPUIdohggUxIWeCR8gg &lt;&lt;</span><br><span class=\"line\">yanjiv2-meilisearch-1   |</span><br><span class=\"line\">yanjiv2-meilisearch-1   | Restart Meilisearch with the argument above to use this new and secure master key.</span><br><span class=\"line\">yanjiv2-meilisearch-1   |</span><br><span class=\"line\">yanjiv2-meilisearch-1   | Documentation:                https://docs.meilisearch.com</span><br><span class=\"line\">yanjiv2-meilisearch-1   | Source code:          https://github.com/meilisearch/meilisearch</span><br><span class=\"line\">yanjiv2-meilisearch-1   | Contact:              https://docs.meilisearch.com/resources/contact.html</span><br><span class=\"line\">yanjiv2-meilisearch-1   |</span><br><span class=\"line\">yanjiv2-meilisearch-1   | [2023-05-05T06:47:15Z INFO  actix_server::builder] Starting 10 workers</span><br><span class=\"line\">yanjiv2-meilisearch-1   | [2023-05-05T06:47:15Z INFO  actix_server::server] Actix runtime found; starting in Actix runtime</span><br><span class=\"line\">yanjiv2-selenium-1      | 06:47:15.381 INFO [Standalone.execute] - Started Selenium Standalone 4.9.0 (revision d7057100a6): http://172.18.0.2:4444</span><br><span class=\"line\">yanjiv2-laravel.test-1  | Starting laravel development server: http://0.0.0.0:80</span><br><span class=\"line\">yanjiv2-laravel.test-1  | [Fri May  5 06:47:15 2023] PHP 8.2.5 Development Server (http://0.0.0.0:80) started</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:16.298633Z 6 [Warning] [MY-010453] [Server] root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option.</span><br><span class=\"line\">yanjiv2-laravel.test-1  | 2023-05-05 06:47:17,205 INFO success: php entered RUNNING state, process has stayed up for &gt; than 1 seconds (startsecs)</span><br><span class=\"line\">yanjiv2-mysql-1         | [Entrypoint] Database initialized</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:21.867567Z 0 [Warning] [MY-011068] [Server] The syntax &#x27;--skip-host-cache&#x27; is deprecated and will be removed in a future release. Please use SET GLOBAL host_cache_size=0 instead.</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:21.869445Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.0.32) starting as process 60</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:21.903451Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:22.074419Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:22.447280Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:22.447388Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:22.494594Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Socket: /var/run/mysqld/mysqlx.sock</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:22.494863Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: &#x27;8.0.32&#x27;  socket: &#x27;/var/lib/mysql/mysql.sock&#x27;  port: 0  MySQL Community Server - GPL.</span><br><span class=\"line\">yanjiv2-mysql-1         | Warning: Unable to load &#x27;/usr/share/zoneinfo/iso3166.tab&#x27; as time zone. Skipping it.</span><br><span class=\"line\">yanjiv2-mysql-1         | Warning: Unable to load &#x27;/usr/share/zoneinfo/leapseconds&#x27; as time zone. Skipping it.</span><br><span class=\"line\">yanjiv2-mysql-1         | Warning: Unable to load &#x27;/usr/share/zoneinfo/tzdata.zi&#x27; as time zone. Skipping it.</span><br><span class=\"line\">yanjiv2-mysql-1         | Warning: Unable to load &#x27;/usr/share/zoneinfo/zone.tab&#x27; as time zone. Skipping it.</span><br><span class=\"line\">yanjiv2-mysql-1         | Warning: Unable to load &#x27;/usr/share/zoneinfo/zone1970.tab&#x27; as time zone. Skipping it.</span><br><span class=\"line\">yanjiv2-mysql-1         |</span><br><span class=\"line\">yanjiv2-mysql-1         | [Entrypoint] running /docker-entrypoint-initdb.d/10-create-testing-database.sh</span><br><span class=\"line\">yanjiv2-mysql-1         | mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class=\"line\">yanjiv2-mysql-1         |</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:25.076164Z 15 [System] [MY-013172] [Server] Received SHUTDOWN from user root. Shutting down mysqld (Version: 8.0.32).</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:26.390283Z 0 [System] [MY-010910] [Server] /usr/sbin/mysqld: Shutdown complete (mysqld 8.0.32)  MySQL Community Server - GPL.</span><br><span class=\"line\">yanjiv2-mysql-1         | [Entrypoint] Server shut down</span><br><span class=\"line\">yanjiv2-mysql-1         |</span><br><span class=\"line\">yanjiv2-mysql-1         | [Entrypoint] MySQL init process done. Ready for start up.</span><br><span class=\"line\">yanjiv2-mysql-1         |</span><br><span class=\"line\">yanjiv2-mysql-1         | [Entrypoint] Starting MySQL 8.0.32-1.2.11-server</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:27.300132Z 0 [Warning] [MY-011068] [Server] The syntax &#x27;--skip-host-cache&#x27; is deprecated and will be removed in a future release. Please use SET GLOBAL host_cache_size=0 instead.</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:27.301672Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.0.32) starting as process 1</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:27.316952Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:27.452872Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:27.736549Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:27.736619Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:27.770036Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: &#x27;::&#x27; port: 33060, socket: /var/run/mysqld/mysqlx.sock</span><br><span class=\"line\">yanjiv2-mysql-1         | 2023-05-05T06:47:27.770200Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: &#x27;8.0.32&#x27;  socket: &#x27;/var/lib/mysql/mysql.sock&#x27;  port: 3306  MySQL Community Server - GPL.</span><br><span class=\"line\">yanjiv2-laravel.test-1  | [Fri May  5 06:47:35 2023] 172.18.0.1:44704 Accepted</span><br><span class=\"line\">yanjiv2-laravel.test-1  | [Fri May  5 06:47:35 2023] 172.18.0.1:44704 Closing</span><br><span class=\"line\">yanjiv2-laravel.test-1  | [Fri May  5 06:47:35 2023] 172.18.0.1:44708 Accepted</span><br><span class=\"line\">yanjiv2-laravel.test-1  | [Fri May  5 06:47:35 2023] 172.18.0.1:44708 Closing</span><br><span class=\"line\">yanjiv2-laravel.test-1  | [Fri May  5 06:47:35 2023] 172.18.0.1:44716 Accepted</span><br><span class=\"line\">yanjiv2-laravel.test-1  | [Fri May  5 06:47:35 2023] 172.18.0.1:44716 Closing</span><br><span class=\"line\">yanjiv2-laravel.test-1  | [Fri May  5 06:47:35 2023] 172.18.0.1:44730 Accepted</span><br><span class=\"line\">yanjiv2-laravel.test-1  | [Fri May  5 06:47:35 2023] 172.18.0.1:44730 Closing</span><br><span class=\"line\">yanjiv2-laravel.test-1  | [Fri May  5 06:47:36 2023] 172.18.0.1:44744 Accepted</span><br><span class=\"line\">yanjiv2-laravel.test-1  | [Fri May  5 06:47:36 2023] 172.18.0.1:44744 Closing</span><br><span class=\"line\">yanjiv2-laravel.test-1  | [Fri May  5 06:47:36 2023] 172.18.0.1:44750 Accepted</span><br><span class=\"line\">yanjiv2-laravel.test-1  | [Fri May  5 06:47:36 2023] 172.18.0.1:44750 [200]: GET /favicon.ico</span><br><span class=\"line\">yanjiv2-laravel.test-1  | [Fri May  5 06:47:36 2023] 172.18.0.1:44750 Closing</span><br><span class=\"line\">yanjiv2-meilisearch-1   | [2023-05-05T06:47:43Z INFO  actix_web::middleware::logger] 127.0.0.1 &quot;GET /health HTTP/1.1&quot; 200 22 &quot;-&quot; &quot;Wget&quot; 0.000301</span><br></pre></td></tr></table></figure>\n\n<p>如果没出意外的话，现在服务应该起来了，访问一下 localhost 就可以看到熟悉的 laravel 欢迎界面了。</p>\n<p>若提示“No application encryption key has been specified.”，点击报错页面的“Generate app key”，然后刷新一下就好了</p>\n<p>之后就和正常继续部署项目一样，但是记得把每行指令的 php artisan 改为 sail artisan，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan migrate:refresh --seed</span><br><span class=\"line\">// to</span><br><span class=\"line\">sail artisan migrate:refresh --seed</span><br><span class=\"line\"></span><br><span class=\"line\">composer i</span><br><span class=\"line\">// to</span><br><span class=\"line\">sail composer i</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"7-部署已有项目（未适配-docker）并启动\"><a href=\"#7-部署已有项目（未适配-docker）并启动\" class=\"headerlink\" title=\"7. 部署已有项目（未适配 docker）并启动\"></a>7. 部署已有项目（未适配 docker）并启动</h1><p>更多情况下，我们的工程项目一般不是在 docker 环境跑的，基本都是在 lnmp 的环境下开发和部署（win 环境？异端！烧了！），比如我们经常使用的“本地 homestead 开发 + 线上 lnmp 部署”思路。下面我们就切换我们的开发方式，修改为“本地 docker 开发+线上 docker or lnmp 环境部署”的思路。</p>\n<p>首先我们先在 &#x2F;home&#x2F;wangkai 目录下新建一个名为 code 的目录，我们之后项目代码都放在这。这里我多说一些为啥这样操作，我们把代码放在 linux 中，而非放在 windows 中，目的就是解决了这两个系统数据传输的缓慢问题，这一点在我们使用 homestead 环境的时候尤其明显，用过的都知道，homestead 是吧 virtualbox 的 linux 虚机的一个目录 与 windows 的一个文件夹做了同步，你在任意一个系统中操作的代码都会同步到另一端，这期间就牵扯到跨系统，固然牵扯到跨系统带来的读写缓慢，而这里我们的一切都在 linux 中操作，你的代码、数据库、redis、nginx 都在 Linux<br>中，不与 windows 做交互，速度自然高。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/wangkai</span><br><span class=\"line\">mkdir code</span><br></pre></td></tr></table></figure>\n\n<p>然后我们再从远端 git 仓库 clone 下一份全新的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/code</span><br><span class=\"line\">git clone git@github.com:NightingaleWK/yanjiv2.git yanjiv2</span><br></pre></td></tr></table></figure>\n\n<p>注意，这里我使用的是 ssh-key 的方式拉的代码到本地，你也可以使用 https 的方式，只不过需要每次都输入账号密码，用 ssh-key 的方法是实现了免密，比较方便。关于如何实现 ssh-key 的方式操作 git，请自行百度或者等我佛系更新一下。</p>\n<p>之后我们复制一份 .env 出来，并根据实际修改其中的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd yanjiv2</span><br><span class=\"line\">cp .env.example .env</span><br><span class=\"line\">vim .env</span><br><span class=\"line\"></span><br><span class=\"line\">然后开始你的修改就行了，修改完毕保存退出 .env，下面是修改的例子</span><br><span class=\"line\"></span><br><span class=\"line\">APP_NAME=yanjiv2</span><br><span class=\"line\">APP_ENV=local</span><br><span class=\"line\">APP_KEY=</span><br><span class=\"line\">APP_DEBUG=true</span><br><span class=\"line\">APP_URL=http://localhost</span><br><span class=\"line\"></span><br><span class=\"line\">LOG_CHANNEL=stack</span><br><span class=\"line\">LOG_DEPRECATIONS_CHANNEL=null</span><br><span class=\"line\">LOG_LEVEL=debug</span><br><span class=\"line\"></span><br><span class=\"line\">DB_CONNECTION=mysql</span><br><span class=\"line\">DB_HOST=127.0.0.1</span><br><span class=\"line\">DB_PORT=3306</span><br><span class=\"line\">DB_DATABASE=yanjiv2</span><br><span class=\"line\">DB_USERNAME=yanjiv2</span><br><span class=\"line\">DB_PASSWORD=yanjiv2</span><br><span class=\"line\"></span><br><span class=\"line\">BROADCAST_DRIVER=log</span><br><span class=\"line\">CACHE_DRIVER=file</span><br><span class=\"line\">FILESYSTEM_DRIVER=local</span><br><span class=\"line\">QUEUE_CONNECTION=sync</span><br><span class=\"line\">SESSION_DRIVER=file</span><br><span class=\"line\">SESSION_LIFETIME=120</span><br><span class=\"line\"></span><br><span class=\"line\">MEMCACHED_HOST=127.0.0.1</span><br><span class=\"line\"></span><br><span class=\"line\">REDIS_HOST=127.0.0.1</span><br><span class=\"line\">REDIS_PASSWORD=null</span><br><span class=\"line\">REDIS_PORT=6379</span><br><span class=\"line\"></span><br><span class=\"line\">MAIL_MAILER=smtp</span><br><span class=\"line\">MAIL_HOST=mailhog</span><br><span class=\"line\">MAIL_PORT=1025</span><br><span class=\"line\">MAIL_USERNAME=null</span><br><span class=\"line\">MAIL_PASSWORD=null</span><br><span class=\"line\">MAIL_ENCRYPTION=null</span><br><span class=\"line\">MAIL_FROM_ADDRESS=null</span><br><span class=\"line\">MAIL_FROM_NAME=&quot;$&#123;APP_NAME&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">AWS_ACCESS_KEY_ID=</span><br><span class=\"line\">AWS_SECRET_ACCESS_KEY=</span><br><span class=\"line\">AWS_DEFAULT_REGION=us-east-1</span><br><span class=\"line\">AWS_BUCKET=</span><br><span class=\"line\">AWS_USE_PATH_STYLE_ENDPOINT=false</span><br><span class=\"line\"></span><br><span class=\"line\">PUSHER_APP_ID=</span><br><span class=\"line\">PUSHER_APP_KEY=</span><br><span class=\"line\">PUSHER_APP_SECRET=</span><br><span class=\"line\">PUSHER_APP_CLUSTER=mt1</span><br><span class=\"line\"></span><br><span class=\"line\">MIX_PUSHER_APP_KEY=&quot;$&#123;PUSHER_APP_KEY&#125;&quot;</span><br><span class=\"line\">MIX_PUSHER_APP_CLUSTER=&quot;$&#123;PUSHER_APP_CLUSTER&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 环境是HTTPS环境，则为 true，否则请填写 false</span><br><span class=\"line\">ADMIN_HTTPS=false</span><br><span class=\"line\"></span><br><span class=\"line\"># 环境若为windows，则为 true，否则请填写 false。这里影响维修工单导出时图片的显示</span><br><span class=\"line\">MAINTENANCE_EXPORT_DEV_MODE=false</span><br></pre></td></tr></table></figure>\n\n<p>本小节未完待续…<br>  [1]: <a href=\"https://www.docker.com/\">https://www.docker.com/</a></p>\n",
            "tags": [
                "laravel sail"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2021/12/15/34.%20laravel%20%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/",
            "url": "https://nightingalewk.cn/2021/12/15/34.%20laravel%20%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/",
            "title": "laravel 项目常用指令",
            "date_published": "2021-12-15T04:00:00.000Z",
            "content_html": "<h2 id=\"Create-vhost\"><a href=\"#Create-vhost\" class=\"headerlink\" title=\"Create vhost\"></a>Create vhost</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/oneinstack</span><br><span class=\"line\">./vhost.sh</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h2 id=\"Git-clone\"><a href=\"#Git-clone\" class=\"headerlink\" title=\"Git clone\"></a>Git clone</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &lt;url&gt; .</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Create-Edit-env\"><a href=\"#Create-Edit-env\" class=\"headerlink\" title=\"Create &amp; Edit .env\"></a>Create &amp; Edit .env</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &lt;project dir&gt;</span><br><span class=\"line\">mv .env.example .env</span><br><span class=\"line\">vim .env</span><br></pre></td></tr></table></figure>\n<p>Then,edit it</p>\n<p>Finally,create a app_key</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan key:generate</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Change-file-permission\"><a href=\"#Change-file-permission\" class=\"headerlink\" title=\"Change file permission\"></a>Change file permission</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod -R 777 &lt;project dir&gt;</span><br><span class=\"line\">chown -R www-data:www-data &lt;project dir&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">cd &lt;project dir&gt;</span><br><span class=\"line\">chgrp -R www storage bootstrap/cache</span><br><span class=\"line\">chmod -R ug+rwx storage bootstrap/cache</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Migration（For-Dcat-Admin）\"><a href=\"#Migration（For-Dcat-Admin）\" class=\"headerlink\" title=\"Migration（For Dcat-Admin）\"></a>Migration（For Dcat-Admin）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan migrate:refresh &amp;&amp; php artisan admin:install &amp;&amp; php artisan db:seed</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"vagrant\"><a href=\"#vagrant\" class=\"headerlink\" title=\"vagrant\"></a>vagrant</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant init\t  初始化 vagrant</span><br><span class=\"line\">vagrant up\t  启动 vagrant</span><br><span class=\"line\">vagrant halt  \t关闭 vagrant</span><br><span class=\"line\">vagrant ssh  \t通过 SSH 登录 vagrant（需要先启动 vagrant）</span><br><span class=\"line\">vagrant provision\t  重新应用更改 vagrant 配置</span><br><span class=\"line\">vagrant destroy\t  删除 vagrant</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "指令"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2021/11/03/32.%20%E6%96%B0%E5%BB%BA%20laravel%20%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/",
            "url": "https://nightingalewk.cn/2021/11/03/32.%20%E6%96%B0%E5%BB%BA%20laravel%20%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/",
            "title": "新建 laravel 项目常用指令",
            "date_published": "2021-11-03T04:00:00.000Z",
            "content_html": "<h2 id=\"1-安装-virtual-box\"><a href=\"#1-安装-virtual-box\" class=\"headerlink\" title=\"1. 安装 virtual box\"></a>1. 安装 virtual box</h2><p>官网下载最新稳定版，安装</p>\n<h2 id=\"2-安装-vagrant\"><a href=\"#2-安装-vagrant\" class=\"headerlink\" title=\"2. 安装 vagrant\"></a>2. 安装 vagrant</h2><p>官网下载最新稳定版，安装</p>\n<h2 id=\"3-命令行安装-laravel-homestead-box\"><a href=\"#3-命令行安装-laravel-homestead-box\" class=\"headerlink\" title=\"3. 命令行安装 laravel&#x2F;homestead box\"></a>3. 命令行安装 laravel&#x2F;homestead box</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant box add laravel/homestead</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-在用户目录下新建-code-文件夹\"><a href=\"#4-在用户目录下新建-code-文件夹\" class=\"headerlink\" title=\"4. 在用户目录下新建 code 文件夹\"></a>4. 在用户目录下新建 <code>code</code> 文件夹</h2><p>项目以后放这里</p>\n<h2 id=\"5-在用户目录下-git-clone-homestead-文件夹\"><a href=\"#5-在用户目录下-git-clone-homestead-文件夹\" class=\"headerlink\" title=\"5. 在用户目录下 git clone homestead 文件夹\"></a>5. 在用户目录下 git clone homestead 文件夹</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/laravel/homestead.git Homestead</span><br></pre></td></tr></table></figure>\n<p>同时进入 Homestead 文件夹下双击 <code>init.bat</code> 进行初始化</p>\n<h2 id=\"6-配置-homestead\"><a href=\"#6-配置-homestead\" class=\"headerlink\" title=\"6. 配置 homestead\"></a>6. 配置 homestead</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">ip: &quot;192.168.22.33&quot;</span><br><span class=\"line\">memory: 4096</span><br><span class=\"line\">cpus: 4</span><br><span class=\"line\">provider: virtualbox</span><br><span class=\"line\"></span><br><span class=\"line\">authorize: ~/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">keys:</span><br><span class=\"line\">    - ~/.ssh/id_rsa</span><br><span class=\"line\">    - ~/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">folders:</span><br><span class=\"line\">    - map: ~/code</span><br><span class=\"line\">      to: /home/vagrant/code</span><br><span class=\"line\"></span><br><span class=\"line\">sites:</span><br><span class=\"line\">    - map: weibo.test</span><br><span class=\"line\">      to: /home/vagrant/code/weibo/public</span><br><span class=\"line\">    - map: larabbs.test</span><br><span class=\"line\">      to: /home/vagrant/code/larabbs/public</span><br><span class=\"line\">    - map: yanji.test</span><br><span class=\"line\">      to: /home/vagrant/code/yanji/public</span><br><span class=\"line\">    - map: jianbing.test</span><br><span class=\"line\">      to: /home/vagrant/code/jianbing/public</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">databases:</span><br><span class=\"line\">    - weibo</span><br><span class=\"line\">    - larabbs</span><br><span class=\"line\">    - yanji</span><br><span class=\"line\">    - jianbing</span><br><span class=\"line\"></span><br><span class=\"line\">features:</span><br><span class=\"line\">    - mysql: true</span><br><span class=\"line\">    - mariadb: false</span><br><span class=\"line\">    - postgresql: false</span><br><span class=\"line\">    - ohmyzsh: false</span><br><span class=\"line\">    - webdriver: false</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">    - enabled:</span><br><span class=\"line\">          - &quot;mysql&quot;</span><br><span class=\"line\">#    - disabled:</span><br><span class=\"line\">#        - &quot;postgresql@11-main&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#ports:</span><br><span class=\"line\">#    - send: 33060 # MySQL/MariaDB</span><br><span class=\"line\">#      to: 3306</span><br><span class=\"line\">#    - send: 4040</span><br><span class=\"line\">#      to: 4040</span><br><span class=\"line\">#    - send: 54320 # PostgreSQL</span><br><span class=\"line\">#      to: 5432</span><br><span class=\"line\">#    - send: 8025 # Mailhog</span><br><span class=\"line\">#      to: 8025</span><br><span class=\"line\">#    - send: 9600</span><br><span class=\"line\">#      to: 9600</span><br><span class=\"line\">#    - send: 27017</span><br><span class=\"line\">#      to: 27017</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-修改-host-文件\"><a href=\"#7-修改-host-文件\" class=\"headerlink\" title=\"7. 修改 host 文件\"></a>7. 修改 host 文件</h2><p>文件位于 C:\\Windows\\System32\\drivers\\etc\\hosts ，使用 vs code 在文件尾部添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.22.33 homestead.app</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-启动-homestead\"><a href=\"#8-启动-homestead\" class=\"headerlink\" title=\"8.启动 homestead\"></a>8.启动 homestead</h2><p>在 Homestead 文件夹下，执行 <code>vagrant up</code>，其他常用指令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant init\t  //初始化 vagrant</span><br><span class=\"line\">vagrant up\t  //启动 vagrant</span><br><span class=\"line\">vagrant halt\t  //关闭 vagrant</span><br><span class=\"line\">vagrant ssh\t  //通过 SSH 登录 vagrant（需要先启动 vagrant）</span><br><span class=\"line\">vagrant provision\t  //重新应用更改 vagrant 配置</span><br><span class=\"line\">vagrant destroy\t   //删除 vagrant</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-克隆-larave-初始化项目\"><a href=\"#9-克隆-larave-初始化项目\" class=\"headerlink\" title=\"9.克隆 larave 初始化项目\"></a>9.克隆 larave 初始化项目</h2><p>在 linux 中，定位到 ~&#x2F;code 目录下，执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer create-project laravel/laravel duanliu</span><br></pre></td></tr></table></figure>",
            "tags": [
                "指令"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2021/08/03/25.%20Dcat-Admin%20%E4%B8%BB%E9%A2%98%E8%89%B2%E5%8F%98%E6%9B%B4%E7%9A%84%E9%81%BF%E5%9D%91%E6%96%B9%E6%B3%95/",
            "url": "https://nightingalewk.cn/2021/08/03/25.%20Dcat-Admin%20%E4%B8%BB%E9%A2%98%E8%89%B2%E5%8F%98%E6%9B%B4%E7%9A%84%E9%81%BF%E5%9D%91%E6%96%B9%E6%B3%95/",
            "title": "Dcat-Admin 主题色变更的避坑方法",
            "date_published": "2021-08-03T04:00:00.000Z",
            "content_html": "<p>官方文档里写了如何变变更主题色，文档如下：</p>\n<p><a href=\"https://learnku.com/docs/dcat-admin/2.x/theme-and-color/8085#db3725\">https://learnku.com/docs/dcat-admin/2.x/theme-and-color/8085#db3725</a></p>\n<p>当我们使用 <code>homestead</code> 开发时，运行 <code>php artisan admin:minify orange --color fbbd08 --publish</code> 会报错，问题大约就是在 <code>windows</code> 上运行的 <code>homestead</code> 这样的 <code>linux</code> 系统，在建立软连接的时候会出错，故我这里改一下教程，按照这样的方式就可以编译通过，达到效果</p>\n<h2 id=\"1-Windows-上的操作\"><a href=\"#1-Windows-上的操作\" class=\"headerlink\" title=\"1. Windows 上的操作\"></a>1. Windows 上的操作</h2><p>上官网下载 <code>Node.js</code> 并安装，找到项目文件所在位置，这里我按照默认的规范，位置在 <code>C:\\Users\\djsyw\\code\\MyProject</code> ，之后我们继续寻找 <code>dcat</code> 的包，在 <code>C:\\Users\\djsyw\\code\\MyProject\\vendor\\dcat\\laravel-admin</code> 这里，我们在这里打开 <code>Terminal</code> 输入指令 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>完成后执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>相对于在 <code>homestead</code> 里运行 <code>linux Mix</code> 前端工作流那繁琐操蛋的流程， <code>win</code>下就很舒心，至此准备工作结束，我们这些操作完成了在 <code>homestead</code> 上各种报错的环节，这里算是给他提前做好了</p>\n<h2 id=\"2-homestead-上的操作\"><a href=\"#2-homestead-上的操作\" class=\"headerlink\" title=\"2. homestead 上的操作\"></a>2. homestead 上的操作</h2><p>定位到我们的项目根目录，直接按照教程走，执行命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan admin:minify orange --color fbbd08 --publish</span><br></pre></td></tr></table></figure>\n<p>然后会有接下来的显示，这就没问题了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  yanji git:(master) php artisan admin:minify cecBlue --color 004ea2 --publish</span><br><span class=\"line\">[cecBlue][#004ea2] npm run production...</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; prod</span><br><span class=\"line\">&gt; npm run production</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; production</span><br><span class=\"line\">&gt; cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js</span><br><span class=\"line\"></span><br><span class=\"line\">//这里有很多的 warning 忽略即可（反正没 ERR 就行）</span><br><span class=\"line\"></span><br><span class=\"line\">DONE  Compiled successfully in 27702ms2:32:20 AM</span><br><span class=\"line\"></span><br><span class=\"line\">Asset      Size  Chunks                          Chunk Names</span><br><span class=\"line\">/resources/dist/adminlte/adminlte.js  29.4 KiB       0  [emitted]               /resources/dist/adminlte/adminlte</span><br><span class=\"line\">/resources/dist/adminlte/adminlte.js.map  83.9 KiB       0  [emitted] [dev]         /resources/dist/adminlte/adminlte</span><br><span class=\"line\">/resources/dist/dcat/css/nunito.css  9.83 KiB          [emitted]</span><br><span class=\"line\">/resources/dist/dcat/extra/action.js  2.85 KiB       1  [emitted]               /resources/dist/dcat/extra/action</span><br><span class=\"line\">/resources/dist/dcat/extra/action.js.map  10.6 KiB       1  [emitted] [dev]         /resources/dist/dcat/extra/action</span><br><span class=\"line\">/resources/dist/dcat/extra/grid-extend.js  7.65 KiB       2  [emitted]               /resources/dist/dcat/extra/grid-extend</span><br><span class=\"line\">/resources/dist/dcat/extra/grid-extend.js.map  24.7 KiB       2  [emitted] [dev]         /resources/dist/dcat/extra/grid-extend</span><br><span class=\"line\">/resources/dist/dcat/extra/select-table.js  4.79 KiB       3  [emitted]               /resources/dist/dcat/extra/select-table</span><br><span class=\"line\">/resources/dist/dcat/extra/select-table.js.map  18.3 KiB       3  [emitted] [dev]         /resources/dist/dcat/extra/select-table</span><br><span class=\"line\">/resources/dist/dcat/extra/upload.js  24.9 KiB       4  [emitted]               /resources/dist/dcat/extra/upload</span><br><span class=\"line\">/resources/dist/dcat/extra/upload.js.map  74.5 KiB       4  [emitted] [dev]         /resources/dist/dcat/extra/upload</span><br><span class=\"line\">/resources/dist/dcat/js/dcat-app.js  99.1 KiB       5  [emitted]               /resources/dist/dcat/js/dcat-app</span><br><span class=\"line\">/resources/dist/dcat/js/dcat-app.js.map   192 KiB       5  [emitted] [dev]         /resources/dist/dcat/js/dcat-app</span><br><span class=\"line\">resources/dist/adminlte/adminlte-cecBlue.css   656 KiB       0  [emitted]        [big]  /resources/dist/adminlte/adminlte</span><br><span class=\"line\">resources/dist/dcat/css/dcat-app-cecBlue.css    68 KiB       0  [emitted]               /resources/dist/adminlte/adminlte</span><br><span class=\"line\">resources/dist/dcat/extra/markdown.css  1.72 KiB       0  [emitted]               /resources/dist/adminlte/adminlte</span><br><span class=\"line\">resources/dist/dcat/extra/upload.css  6.34 KiB       0  [emitted]               /resources/dist/adminlte/adminlte</span><br><span class=\"line\"></span><br><span class=\"line\">Copied Directory [/vendor/dcat/laravel-admin/resources/dist] To [/public/vendor/dcat-admin]</span><br><span class=\"line\">Publishing complete.</span><br></pre></td></tr></table></figure>\n<p>之后按照教程就可以了</p>\n",
            "tags": [
                "dcat admin"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2021/06/08/22.%20Laravel%20%E9%A1%B9%E7%9B%AE%20Homestead%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/",
            "url": "https://nightingalewk.cn/2021/06/08/22.%20Laravel%20%E9%A1%B9%E7%9B%AE%20Homestead%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/",
            "title": "laravel 项目 Homestead 开发环境的搭建",
            "date_published": "2021-06-08T04:00:00.000Z",
            "content_html": "<h1 id=\"做好准备\"><a href=\"#做好准备\" class=\"headerlink\" title=\"做好准备\"></a>做好准备</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/Homestead &amp;&amp; vagrant up</span><br><span class=\"line\">vagrant ssh</span><br></pre></td></tr></table></figure>\n<p>在虚拟机中进入 <code>code</code> 文件夹</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/code\t</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Composer-加速\"><a href=\"#Composer-加速\" class=\"headerlink\" title=\"Composer 加速\"></a>Composer 加速</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer create-project laravel/laravel yourapp</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改-Hosts\"><a href=\"#修改-Hosts\" class=\"headerlink\" title=\"修改 Hosts\"></a>修改 Hosts</h1><p>首先找到 <code>Hosts</code> 文件，<code>Windows</code> 下是在</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:/Windows/System32/Drivers/etc/hosts</span><br></pre></td></tr></table></figure>\n<p>文件成功打开后，在 <code>hosts</code> 文件最后面新增下面一行以完成设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.10.10   yourapp.test</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"新增站点\"><a href=\"#新增站点\" class=\"headerlink\" title=\"新增站点\"></a>新增站点</h1><p>进入 homestead 的根目录，找到 <code>Homestead.yaml</code> 并打开</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">ip: &quot;192.168.10.10&quot;</span><br><span class=\"line\">memory: 2048</span><br><span class=\"line\">cpus: 2</span><br><span class=\"line\">provider: virtualbox</span><br><span class=\"line\"></span><br><span class=\"line\">authorize: ~/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">keys:</span><br><span class=\"line\">    - ~/.ssh/id_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">folders:</span><br><span class=\"line\">    - map: ~/Code</span><br><span class=\"line\">      to: /home/vagrant/Code</span><br><span class=\"line\"></span><br><span class=\"line\">sites:</span><br><span class=\"line\">    - map: homestead.test</span><br><span class=\"line\">      to: /home/vagrant/Code/laravel/public</span><br><span class=\"line\">    - map: yourapp.test #  &lt;--- 这里</span><br><span class=\"line\">      to: /home/vagrant/Code/yourapp/public #  &lt;--- 这里</span><br><span class=\"line\"></span><br><span class=\"line\">databases:</span><br><span class=\"line\">    - homestead</span><br><span class=\"line\">    - yourapp #  &lt;--- 这里</span><br><span class=\"line\"></span><br><span class=\"line\">variables:</span><br><span class=\"line\">    - key: APP_ENV</span><br><span class=\"line\">      value: local</span><br><span class=\"line\"></span><br><span class=\"line\">features:</span><br><span class=\"line\">    - mysql: true</span><br><span class=\"line\"></span><br><span class=\"line\"># blackfire:</span><br><span class=\"line\">#     - id: foo</span><br><span class=\"line\">#       token: bar</span><br><span class=\"line\">#       client-id: foo</span><br><span class=\"line\">#       client-token: bar</span><br><span class=\"line\"></span><br><span class=\"line\"># ports:</span><br><span class=\"line\">#     - send: 93000</span><br><span class=\"line\">#       to: 9300</span><br><span class=\"line\">#     - send: 7777</span><br><span class=\"line\">#       to: 777</span><br><span class=\"line\">#       protocol: udp</span><br></pre></td></tr></table></figure>\n\n<p>这里主要设置了 <code>sites</code> 和 <code>databases</code> 两项。 <code>sites</code> 会将域名 <code>larabbs.test</code> 映射到虚拟机的 <code>/home/vagrant/Code/yourapp/public</code> 文件夹上，而 <code>databases</code> 则为新创建的项目指定数据库名</p>\n<h1 id=\"重启虚拟机\"><a href=\"#重启虚拟机\" class=\"headerlink\" title=\"重启虚拟机\"></a>重启虚拟机</h1><p>对 <code>Homestead.yaml</code> 文件进行了更改之后，需要运行下面命令来使其更改生效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/Homestead</span><br><span class=\"line\">vagrant provision</span><br><span class=\"line\">vagrant reload</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"env-修改\"><a href=\"#env-修改\" class=\"headerlink\" title=\".env 修改\"></a>.env 修改</h1><p>我们还需要对应用根目录下的 <code>.env</code> 文件进行设置，为应用指定数据库名称 <code>yourapp</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_NAME=yourapp</span><br><span class=\"line\">APP_ENV=local</span><br><span class=\"line\">APP_KEY=your_app_key</span><br><span class=\"line\">APP_DEBUG=true</span><br><span class=\"line\">APP_URL=http://yourapp.test</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">DB_DATABASE=yourapp</span><br><span class=\"line\">DB_USERNAME=homestead</span><br><span class=\"line\">DB_PASSWORD=secret</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n<h1 id=\"统一代码风格\"><a href=\"#统一代码风格\" class=\"headerlink\" title=\"统一代码风格\"></a>统一代码风格</h1><p>对项目的 <code>.editorconfig</code> 进行统一修改。这是为了保证我们的代码风格一致，以避免引起不必要的歧义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root = true</span><br><span class=\"line\"></span><br><span class=\"line\">[*]</span><br><span class=\"line\">charset = utf-8</span><br><span class=\"line\">end_of_line = lf</span><br><span class=\"line\">insert_final_newline = true</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 4</span><br><span class=\"line\">trim_trailing_whitespace = true</span><br><span class=\"line\"></span><br><span class=\"line\">[*.md]</span><br><span class=\"line\">trim_trailing_whitespace = false</span><br><span class=\"line\"></span><br><span class=\"line\">[*.&#123;yml,yaml&#125;]</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\"></span><br><span class=\"line\">[*.&#123;js,html,blade.php,css,scss,vue&#125;]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 2</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"访问应用\"><a href=\"#访问应用\" class=\"headerlink\" title=\"访问应用\"></a>访问应用</h1><p>在 Chrome 浏览器中打开 <code>yourapp.test</code> 即可</p>\n<h1 id=\"git-版本控制\"><a href=\"#git-版本控制\" class=\"headerlink\" title=\"git 版本控制\"></a>git 版本控制</h1><p>线上建立好仓库后，记住 ssh 方式连接的代码仓库名，在虚机的项目根目录下输入如下指令即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m &quot;初始化项目&quot;</span><br><span class=\"line\">git remote add origin git@e.coding.net:nightingalewk/yanji/yanji.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"git-分支的使用\"><a href=\"#git-分支的使用\" class=\"headerlink\" title=\"git 分支的使用\"></a>git 分支的使用</h1><p>分支使用时，首先执行如下指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git checkout -b static-pages</span><br></pre></td></tr></table></figure>\n\n<p>当写完一阶段的代码时，需要合并到主分支，需要如下操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m &quot;完成静态页面的建立&quot;</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge static-pages</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h1 id=\"启用-Bootstrap\"><a href=\"#启用-Bootstrap\" class=\"headerlink\" title=\"启用 Bootstrap\"></a>启用 Bootstrap</h1><p>项目中使用 Bootstrap 前端框架，需要先执行以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require laravel/ui --dev</span><br><span class=\"line\">php artisan ui bootstrap</span><br></pre></td></tr></table></figure>\n<p>开始安装之前，我们需要设置安装器来使用国内的淘宝镜像加速，加速镜像的原理是使用国内的 CDN 来下载所需代码包，会更加顺畅</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry=https://registry.npm.taobao.org</span><br><span class=\"line\">yarn config set registry &#x27;https://registry.npm.taobao.org&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>使用用 Yarn 对扩展包进行安装，请在项目根目录下运行以下命令进行安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SASS_BINARY_SITE=http://npm.taobao.org/mirrors/node-sass yarn --no-bin-links</span><br><span class=\"line\">yarn add cross-env --no-bin-links</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"开发常用指令\"><a href=\"#开发常用指令\" class=\"headerlink\" title=\"开发常用指令\"></a>开发常用指令</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//清理各类缓存</span><br><span class=\"line\">php artisan cache:clear &amp;&amp; php artisan config:clear &amp;&amp; php artisan route:clear &amp;&amp; php artisan view:clear</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "homestead"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2021/06/08/23.%20Laravel%20%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%B5%81%E7%A8%8B/",
            "url": "https://nightingalewk.cn/2021/06/08/23.%20Laravel%20%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%B5%81%E7%A8%8B/",
            "title": "laravel 项目部署到服务器的流程",
            "date_published": "2021-06-08T04:00:00.000Z",
            "content_html": "<h1 id=\"新建虚拟站点\"><a href=\"#新建虚拟站点\" class=\"headerlink\" title=\"新建虚拟站点\"></a>新建虚拟站点</h1><p>进入到 oneinstack 根目录，输入 <code>./vhost</code> 新建虚拟主机，在开始之前首先申请好指向本测试服务器的域名，ssl 证书可使用 oneinstack 自动生成并自动续期，一路完成后会有如下提示即可</p>\n<p>&#x2F;&#x2F; #######################################################################<br>&#x2F;&#x2F; #       OneinStack for CentOS&#x2F;RedHat 6+ Debian 8+ and Ubuntu 14+      #<br>&#x2F;&#x2F; #       For more information please visit <a href=\"https://oneinstack.com/\">https://oneinstack.com</a>      #<br>&#x2F;&#x2F; #######################################################################<br>&#x2F;&#x2F; Your domain:                  yanji.wkarrow.top<br>&#x2F;&#x2F; Virtualhost conf:             &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;vhost&#x2F;yanji.wkarrow.top.conf<br>&#x2F;&#x2F; Directory of:                 &#x2F;data&#x2F;wwwroot&#x2F;yanji.wkarrow.top<br>&#x2F;&#x2F; Rewrite rule:                 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;rewrite&#x2F;laravel.conf<br>&#x2F;&#x2F; Let’s Encrypt SSL Certificate:&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;ssl&#x2F;yanji.wkarrow.top.crt<br>&#x2F;&#x2F; SSL Private Key:              &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;ssl&#x2F;yanji.wkarrow.top.key</p>\n<h1 id=\"git-clone-拷贝线上仓库数据到本地\"><a href=\"#git-clone-拷贝线上仓库数据到本地\" class=\"headerlink\" title=\"git clone 拷贝线上仓库数据到本地\"></a>git clone 拷贝线上仓库数据到本地</h1><p>cd 到 <code>/date/wwwroot/yanji.wkarrow.top</code> 目录中，执行<br> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer update</span><br><span class=\"line\">php artisan key:generate</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"修改-env-文件\"><a href=\"#修改-env-文件\" class=\"headerlink\" title=\"修改 .env 文件\"></a>修改 .env 文件</h1><p>在项目根目录下执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp .env.example .env</span><br></pre></td></tr></table></figure>\n<p>之后 <code>vim .env</code> 配置站点数据</p>\n<h1 id=\"修改站点权限\"><a href=\"#修改站点权限\" class=\"headerlink\" title=\"修改站点权限\"></a>修改站点权限</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod -R 777 yanji.wkarrow.top</span><br><span class=\"line\">chown -R www-data:www-data yanji.wkarrow.top</span><br><span class=\"line\"></span><br><span class=\"line\">cd yanji,wkarrow.top</span><br><span class=\"line\">chgrp -R www storage bootstrap/cache</span><br><span class=\"line\">chmod -R ug+rwx storage bootstrap/cache</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改-nginx-配置\"><a href=\"#修改-nginx-配置\" class=\"headerlink\" title=\"修改 nginx 配置\"></a>修改 nginx 配置</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/nginx/conf/vhost</span><br><span class=\"line\">vim yanji.wkarrow.top.conf</span><br><span class=\"line\">service nginx restart</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h1><p>前往 oneinstack 自带的 phpMyAdmin 新建一个名为“岩脊”数据库</p>\n<h1 id=\"数据库迁移\"><a href=\"#数据库迁移\" class=\"headerlink\" title=\"数据库迁移\"></a>数据库迁移</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan migrate</span><br></pre></td></tr></table></figure>",
            "tags": [
                "代码部署",
                "oneinstack",
                "lnmp"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2021/06/08/24.%20Laravel%20%E9%A1%B9%E7%9B%AE%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E6%9B%B4%E6%96%B0/",
            "url": "https://nightingalewk.cn/2021/06/08/24.%20Laravel%20%E9%A1%B9%E7%9B%AE%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E6%9B%B4%E6%96%B0/",
            "title": "laravel 项目在服务器上的更新",
            "date_published": "2021-06-08T04:00:00.000Z",
            "content_html": "<p>代码更新时会经常遇到服务器数据变动导致无法 git pull ，需要强行覆盖并重新进行参数配置，具体如下</p>\n<h1 id=\"强制覆盖\"><a href=\"#强制覆盖\" class=\"headerlink\" title=\"强制覆盖\"></a>强制覆盖</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin/master </span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改-config-配置文件\"><a href=\"#修改-config-配置文件\" class=\"headerlink\" title=\"修改 config 配置文件\"></a>修改 config 配置文件</h1><p>&#x2F;data&#x2F;wwwroot&#x2F;yanji.wkarrow.top&#x2F;config&#x2F;admin.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\"> &#x27;https&#x27; =&gt; env(&#x27;ADMIN_HTTPS&#x27;, ture),</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n<p>之后重启 nginx 服务并清理缓存</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx restart</span><br><span class=\"line\">//清理各类缓存</span><br><span class=\"line\">php artisan cache:clear &amp;&amp; php artisan config:clear &amp;&amp; php artisan route:clear &amp;&amp; php artisan view:clear</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据库迁移并填充\"><a href=\"#数据库迁移并填充\" class=\"headerlink\" title=\"数据库迁移并填充\"></a>数据库迁移并填充</h1><p>若有需要可以执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan migrate:regresh --seed</span><br><span class=\"line\">php artisan admin:install</span><br></pre></td></tr></table></figure>",
            "tags": [
                "oneinstack",
                "lnmp",
                "代码更新"
            ]
        }
    ]
}